<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ardee Wong&#39;s Blog</title>
  
  <subtitle>stay foolish stay hungry</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://chongdee.github.io/"/>
  <updated>2018-07-13T14:49:40.376Z</updated>
  <id>https://chongdee.github.io/</id>
  
  <author>
    <name>ardee Wong</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JavaScript之原型与原型链</title>
    <link href="https://chongdee.github.io/2018/07/13/JavaScript%E4%B9%8B%E5%8E%9F%E5%9E%8B%E4%B8%8E%E5%8E%9F%E5%9E%8B%E9%93%BE/"/>
    <id>https://chongdee.github.io/2018/07/13/JavaScript之原型与原型链/</id>
    <published>2018-07-13T00:26:09.000Z</published>
    <updated>2018-07-13T14:49:40.376Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>对于很多前端开发者而言，JavaScript的原型实在是很让人头疼。<br>说起原型，那就不得不说prototype、__proto__、constructor三者的关系，其中比较麻烦的就是容易将prototype和__proto__混淆，这也是因为它们之间的指向确实有些复杂。</p><h2 id="prototype"><a href="#prototype" class="headerlink" title="prototype"></a>prototype</h2><div class="note info"><p>每个函数都有一个原型prototype属性，每一个实例对象都会从原型”继承”属性。</p></div><a id="more"></a><p>代码：<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Person构造函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    name = <span class="string">'Person'</span>;</span><br><span class="line">    <span class="keyword">this</span>.height = <span class="string">'160cm'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//在其原型对象中添加age属性</span></span><br><span class="line">Person.prototype.age = <span class="string">'18'</span>;</span><br><span class="line"><span class="comment">//Person的实例p1</span></span><br><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> Person();</span><br><span class="line">p1.age;<span class="comment">//18</span></span><br><span class="line">p1.name;<span class="comment">//undefined</span></span><br><span class="line">p1.height;<span class="comment">//160cm</span></span><br></pre></td></tr></table></figure></p><p>代码中原型与构造函数与实例的关系如下：<br><img src="/img/prototype/proto_1.jpg" alt="&quot;麻蛋，图片不见啦&quot;"></p><ul><li>Person为构造函数</li><li>Person.prototype为原型</li><li>p1虽然是通过newPerson获得的，但是p1的原型__proto__却直接指向Person.Prototype，并且只得到了Person中的this的属性。</li></ul><blockquote><p><strong>var p1 = new Person()都发生了什么？</strong><br>1.var p1 = new Object(); //此时p1.__proto__ === Object.Prototype<br>2.p1.__proto__ === Person.prototype;<br>3.Person.call(p1);//使用新对象p1调用函数Person，将this指向p1</p></blockquote><h2 id="proto"><a href="#proto" class="headerlink" title="__proto__"></a>__proto__</h2><blockquote><p>实例中的属性，指向new这个实例的构造函数的原型对象<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> Person();</span><br><span class="line"><span class="built_in">console</span>.log(p1.__proto__ === Person.prototype); <span class="comment">// true</span></span><br></pre></td></tr></table></figure></p></blockquote><p>由于__proto__是任何对象都有的属性，而JS中万物皆对象，所以会形成一条__proto__连起来的链条，递归访问__proto__必须最终到头，并且值是null。</p><p>当JS引擎查找对象的属性时，先查找对象本身是否存在该属性，如果不存在，会在原型链中查找，但不会查找自身的prototype</p><p>代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Person构造函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    name = <span class="string">'Person'</span>;</span><br><span class="line">    <span class="keyword">this</span>.height = <span class="string">'160cm'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//原型为一个Object实例，并有age属性</span></span><br><span class="line">Person.prototype = &#123;</span><br><span class="line">    age: <span class="string">'18'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Person的实例p1</span></span><br><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> Person();</span><br><span class="line">p1.age;<span class="comment">//18</span></span><br><span class="line">p1.name;<span class="comment">//undefined</span></span><br><span class="line">p1.height;<span class="comment">//160cm</span></span><br><span class="line"><span class="built_in">console</span>.log(p1 === Person.prototype.constructor); <span class="comment">// false</span></span><br></pre></td></tr></table></figure></p><p>代码中原型与构造函数与实例的关系如下：</p><p><img src="/img/prototype/proto_2.jpg" alt="&quot;麻蛋，图片不见啦&quot;"></p><ul><li>代码第7行Person.Prototype赋值定义一个新对象Object，并且其中不再有constructor属性<br>//console.log(p1 === Person.prototype.constructor); // false<blockquote><p>构造函数原型属性定义给新对象要想constructor重新指向该构造函数，可以这样<br>Person.prototype.constructor === Person，这样构造函数Person的this指向始终指向Person的实例</p></blockquote></li><li>Person.Prototype重新定义Object的一个实例，也就是说Person.Prototype中有一个__proto__属性，指向Object.Prototype</li><li>在实例p1中想要调用一个方法或者属性的时候会沿原型链__proto__向上查找。<br>直到Object.prototype.<strong>proto</strong> === null，停止查找</li></ul><h2 id="constructor-NaN"><a href="#constructor-NaN" class="headerlink" title="constructor"></a>constructor</h2><p>既然实例对象(<strong>p1.__proto__</strong>)和构造函数(<strong>Person.Prototype</strong>)都可以指向原型，那么原型是否有属性指向构造函数或者实例呢？<br>指向实例倒是没有，因为一个构造函数可以生成多个实例，但是原型指向构造函数(<strong>Person.Prototype.constructor</strong>)倒是有的，这就要讲到第三个属性：<strong>constructor</strong>，每个原型都有一个 <strong>constructor</strong> 属性指向关联的构造函数。</p><p>代码：<br><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span><span class="params">()</span> <span class="comment">&#123;</span></span></span><br><span class="line"><span class="function"><span class="comment"></span></span></span><br><span class="line"><span class="function"><span class="comment">&#125;</span></span></span><br><span class="line"><span class="function"><span class="title">console</span>.<span class="title">log</span><span class="params">(Person === Person.prototype.<span class="keyword">constructor</span>)</span>;</span> <span class="comment">// true</span></span><br></pre></td></tr></table></figure></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>综上我们已经得出：</p><ul><li>prototype：构造函数中的属性，指向该构造函数的原型对象。</li><li>constructor：原型对象中的属性，指向该原型对象的构造函数</li><li>__proto__：实例中的属性，指向new这个实例的构造函数的原型对象<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> Person();</span><br><span class="line"><span class="built_in">console</span>.log(Person.prototype == Person.prototype) <span class="comment">// true  构造函数中的属性，指向该构造函数的原型对象。</span></span><br><span class="line"><span class="built_in">console</span>.log(p1.__proto__ == Person.prototype) <span class="comment">// true  实例中的属性，指向new这个实例的构造函数的原型对象</span></span><br><span class="line"><span class="built_in">console</span>.log(Person.prototype.constructor == Person) <span class="comment">// true  原型对象中的属性，指向该原型对象的构造函数</span></span><br><span class="line"><span class="comment">// 顺便学习一个ES5的方法,可以获得对象的原型</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.getPrototypeOf(person) === Person.prototype) <span class="comment">// true</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;对于很多前端开发者而言，JavaScript的原型实在是很让人头疼。&lt;br&gt;说起原型，那就不得不说prototype、__proto__、constructor三者的关系，其中比较麻烦的就是容易将prototype和__proto__混淆，这也是因为它们之间的指向确实有些复杂。&lt;/p&gt;
&lt;h2 id=&quot;prototype&quot;&gt;&lt;a href=&quot;#prototype&quot; class=&quot;headerlink&quot; title=&quot;prototype&quot;&gt;&lt;/a&gt;prototype&lt;/h2&gt;&lt;div class=&quot;note info&quot;&gt;&lt;p&gt;每个函数都有一个原型prototype属性，每一个实例对象都会从原型”继承”属性。&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="https://chongdee.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://chongdee.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript之继承（包含ES6）</title>
    <link href="https://chongdee.github.io/2018/07/13/JavaScript%E4%B9%8B%E7%BB%A7%E6%89%BF%EF%BC%88%E5%8C%85%E5%90%ABES6%EF%BC%89/"/>
    <id>https://chongdee.github.io/2018/07/13/JavaScript之继承（包含ES6）/</id>
    <published>2018-07-13T00:12:50.000Z</published>
    <updated>2018-07-15T00:48:23.311Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2 id="原型链继承"><a href="#原型链继承" class="headerlink" title="原型链继承"></a>原型链继承</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Parent</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.names = [<span class="string">'foo'</span>, <span class="string">'bar'</span>];</span><br><span class="line">    <span class="keyword">this</span>.age = <span class="number">60</span>;</span><br><span class="line">&#125;</span><br><span class="line">Parent.prototype.greeting = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"hello!"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Child</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Child.prototype = <span class="keyword">new</span> Parent();  <span class="comment">//将父类实例作为子类原型</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> child1 = <span class="keyword">new</span> Child();</span><br><span class="line"></span><br><span class="line">child1.names.push(<span class="string">'baz'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(child1.names); <span class="comment">// ["foo", "bar", "baz"]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> child2 = <span class="keyword">new</span> Child();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(child2.names); <span class="comment">// ["foo", "bar", "baz"] </span></span><br><span class="line"></span><br><span class="line">child1.greeting()  <span class="comment">//  hello!</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> age1 = child1.age = <span class="number">5</span></span><br><span class="line"><span class="built_in">console</span>.log(age1)   <span class="comment">//5</span></span><br><span class="line"><span class="built_in">console</span>.log(child2.age)   <span class="comment">//60  依旧继承父类基本类属性</span></span><br><span class="line"><span class="comment">//修改其中一个实例子类基本类型属性不会影响其他子类基本类型属性</span></span><br></pre></td></tr></table></figure><a id="more"></a><p><strong>原型链继承</strong><br>优点：</p><ol><li>方法复用，由于方法定义在父类的原型上，复用了父类构造函数的方法。比如greeting方法。</li></ol><p>缺点：</p><ol><li>创建子类实例的时候，不能传参数。</li><li>子类实例共享了父类构造函数的引用属性，比如names属性。child1.names修改会影响child2.names的值</li><li>但是实例子类基本类型属性不会影响其他子类基本类型属性。child1.age</li></ol><h2 id="借用构造函数-经典继承"><a href="#借用构造函数-经典继承" class="headerlink" title="借用构造函数(经典继承)"></a>借用构造函数(经典继承)</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Parent</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.names = [<span class="string">'foo'</span>, <span class="string">'bar'</span>];</span><br><span class="line">    <span class="keyword">this</span>.greeting = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;      <span class="comment">// 方法都在构造函数中定义，每次创建实例都会创建一遍方法。且实例不能共用此方法</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'hello'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Child</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    Parent.call(<span class="keyword">this</span>);      <span class="comment">//核心技术</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> child1 = <span class="keyword">new</span> Child();</span><br><span class="line"></span><br><span class="line">child1.greeting()     <span class="comment">// undefined    方法都在构造函数中定义，每次创建实例都会创建一遍方法。且实例不能共用此方法</span></span><br><span class="line"></span><br><span class="line">child1.names.push(<span class="string">'baz'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(child1.names); <span class="comment">// ['foo', 'bar', 'baz']</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> child2 = <span class="keyword">new</span> Child();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(child2.names); <span class="comment">// ['foo', 'bar']   //避免了引用类型的属性被所有实例共享</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Parent</span> (<span class="params">name</span>) </span>&#123;   <span class="comment">//创建子类实例，可以向父类构造函数传参数。</span></span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Child</span> (<span class="params">name</span>) </span>&#123;</span><br><span class="line">    Parent.call(<span class="keyword">this</span>, name);  <span class="comment">//核心技术</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> child1 = <span class="keyword">new</span> Child(<span class="string">'huahua'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(child1.name); <span class="comment">// huahua</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> child2 = <span class="keyword">new</span> Child(<span class="string">'dandan'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(child2.name); <span class="comment">// dandan</span></span><br></pre></td></tr></table></figure><p><strong>借用构造函数</strong><br>优点：</p><ol><li>避免了引用类型的属性被所有实例共享，比如names属性</li><li>创建子类实例，可以向父类构造函数传参数。</li></ol><p>缺点：</p><ol><li>父类的方法不能复用</li><li>方法都在构造函数中定义，每次创建实例都会创建一遍方法。</li></ol><h2 id="组合继承"><a href="#组合继承" class="headerlink" title="组合继承"></a>组合继承</h2><p>原型链继承和构造函数组合拳<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Parent</span> (<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.colors = [<span class="string">'red'</span>, <span class="string">'blue'</span>, <span class="string">'green'</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Parent.prototype.getName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//构造函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Child</span> (<span class="params">name, age</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    Parent.call(<span class="keyword">this</span>, name);    一次函数调用</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Child.prototype = <span class="keyword">new</span> Parent();   <span class="comment">//原型链继承   二次函数调用</span></span><br><span class="line">Child.prototype.constructor = Child;  <span class="comment">//修复Child.prototype.constructor</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> child1 = <span class="keyword">new</span> Child(<span class="string">'foo'</span>, <span class="string">'18'</span>);</span><br><span class="line"></span><br><span class="line">child1.colors.push(<span class="string">'black'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(child1.name); <span class="comment">// foo</span></span><br><span class="line"><span class="built_in">console</span>.log(child1.age); <span class="comment">// 18</span></span><br><span class="line"><span class="built_in">console</span>.log(child1.colors); <span class="comment">// ["red", "blue", "green", "black"]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> child2 = <span class="keyword">new</span> Child(<span class="string">'bar'</span>, <span class="string">'20'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(child2.name); <span class="comment">// bar</span></span><br><span class="line"><span class="built_in">console</span>.log(child2.age); <span class="comment">// 20</span></span><br><span class="line"><span class="built_in">console</span>.log(child2.colors); <span class="comment">// ["red", "blue", "green"]</span></span><br></pre></td></tr></table></figure></p><p><strong>组合继承</strong><br>优点：</p><ol><li>保留构造函数的优点：创建子类实例，可以向父类构造函数传参数。</li><li>保留原型链的优点：父类的实例方法定义在父类的原型对象上，可以实现方法复用。</li><li>不共享父类的引用属性。比如colors属性</li></ol><p>缺点：</p><ol><li>由于调用了2次父类的构造方法，会存在一份多余的父类实例属性<blockquote><p><strong>注意：</strong>‘组合继承’这种方式，要记得修复Child.prototype.constructor指向</p></blockquote></li></ol><h2 id="寄生组合继承——完美方式"><a href="#寄生组合继承——完美方式" class="headerlink" title="寄生组合继承——完美方式"></a>寄生组合继承——完美方式</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Parent</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name; <span class="comment">// 实例基本属性 (该属性，强调私有，不共享)</span></span><br><span class="line">    <span class="keyword">this</span>.colors = [<span class="string">'red'</span>, <span class="string">'blue'</span>]; <span class="comment">// (该属性，强调私有)</span></span><br><span class="line">&#125;</span><br><span class="line">Parent.prototype.say = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="comment">// --- 将需要复用、共享的方法定义在父类原型上 </span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'hello'</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Child</span>(<span class="params">name,like</span>) </span>&#123;    <span class="comment">//实例实现可传参</span></span><br><span class="line">    Parent.call(<span class="keyword">this</span>,name,like) <span class="comment">// 核心  </span></span><br><span class="line">    <span class="keyword">this</span>.like = like;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 核心  通过创建中间对象，子类原型和父类原型，就会隔离开。不是同一个啦，有效避免了组合继承的缺点。</span></span><br><span class="line"><span class="keyword">var</span> F = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line">F.prototype = Parent.prototype;</span><br><span class="line">Child.prototype = <span class="keyword">new</span> F();</span><br><span class="line"></span><br><span class="line"><span class="comment">//或者用ES5,Object.create()创建对象，内部原理就是通过创建中间对象实现的</span></span><br><span class="line"></span><br><span class="line">&lt;!--这里是修复构造函数指向的代码--&gt;</span><br><span class="line">Child.prototype.constructor = Child</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> child1 = <span class="keyword">new</span> Child(<span class="string">'小红'</span>,<span class="string">'apple'</span>)</span><br><span class="line"><span class="keyword">var</span> child2 = <span class="keyword">new</span> Child(<span class="string">'小明'</span>,<span class="string">'orange'</span>)</span><br><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> Parent(<span class="string">'小爸爸'</span>)</span><br><span class="line">child1.say()</span><br><span class="line">child2.say()</span><br></pre></td></tr></table></figure><p>代码优化：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">object</span><span class="params">(o)</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">F</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    F.prototype = o;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> F();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">prototype</span><span class="params">(child, parent)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> prototype = object(<span class="keyword">parent</span>.prototype);</span><br><span class="line">    prototype.constructor = child;</span><br><span class="line">    child.prototype = prototype;</span><br><span class="line"><span class="comment">// 当我们使用的时候：</span></span><br><span class="line">prototype(Child, <span class="keyword">Parent</span>);</span><br></pre></td></tr></table></figure></p><p><strong>寄生组合继承</strong><br>优点：完美<br>缺点：理论上没有</p><p>ES6继承</p><blockquote><p>ECMAScript6 引入了一套新的关键字用来实现 class。使用基于类语言(java,php等)的开发人员会对这些结构感到熟悉，但它们是不一样的。 JavaScript 仍然是基于原型的。这些新的关键字包括 class , constructor , static , extends , 和 super . 例子如下：</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 构造方法，实例化的时候将会被调用，如果不指定，那么会有一个不带参数的默认构造函数.</span></span><br><span class="line">    <span class="keyword">constructor</span>(name,color) &#123;</span><br><span class="line">      <span class="keyword">this</span>.name = name;</span><br><span class="line">      <span class="keyword">this</span>.color = color;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// toString 是原型对象上的属性</span></span><br><span class="line">    toString() &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'name:'</span> + <span class="keyword">this</span>.name + <span class="string">',color:'</span> + <span class="keyword">this</span>.color);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">   </span><br><span class="line"> <span class="keyword">var</span> animal = <span class="keyword">new</span> Animal(<span class="string">'dog'</span>,<span class="string">'white'</span>);</span><br><span class="line"> animal.toString();</span><br><span class="line"></span><br><span class="line"> <span class="built_in">console</span>.log(animal.hasOwnProperty(<span class="string">'name'</span>)); <span class="comment">//true</span></span><br><span class="line"> <span class="built_in">console</span>.log(animal.hasOwnProperty(<span class="string">'toString'</span>)); <span class="comment">// false</span></span><br><span class="line"> <span class="built_in">console</span>.log(animal.__proto__.hasOwnProperty(<span class="string">'toString'</span>)); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(action) &#123;</span><br><span class="line">    <span class="comment">// 子类必须要在constructor中指定super 方法，否则在新建实例的时候会报错.</span></span><br><span class="line">    <span class="comment">// 如果没有置顶consructor,默认带super方法的constructor将会被添加、</span></span><br><span class="line">    <span class="keyword">super</span>(<span class="string">'cat'</span>,<span class="string">'white'</span>);</span><br><span class="line">    <span class="keyword">this</span>.action = action;</span><br><span class="line">  &#125;</span><br><span class="line">  toString() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">super</span>.toString());</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">var</span> cat = <span class="keyword">new</span> Cat(<span class="string">'catch'</span>)</span><br><span class="line"> cat.toString();</span><br><span class="line"> </span><br><span class="line"> <span class="comment">// 实例cat 是 Cat 和 Animal 的实例，和Es5完全一致。</span></span><br><span class="line"> <span class="built_in">console</span>.log(cat <span class="keyword">instanceof</span> Cat); <span class="comment">// true</span></span><br><span class="line"> <span class="built_in">console</span>.log(cat <span class="keyword">instanceof</span> Animal); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p><strong>class和自定义类型的区别</strong></p><ul><li>class的声明不会提升，与let类似</li><li>class的声明自动运行于严格模式之下</li><li>class声明的方法不可枚举（显著区别）</li><li>class的内部方法没有[[construct]]属性，无法new</li><li>调用class的构造函数必须new</li><li>class内部方法不能同名</li></ul><p>ES6继承小结：</p><ul><li>ES6中class简化了ES5中的继承，但是未改变现有的继承模型。可以理解为是ES5基于原型链的语法糖</li><li>通过class声明一个类，constructor()作为构造函数，属性在constructor()中初始化</li><li>class内可以定义getter/setter访问器属性</li><li>可以在class内定义非静态方法，静态方法绑定在构造器上</li><li>类的所有方法都是不可枚举的，也符合内部方法</li><li>实例化一个class必须要new关键字</li><li>extends实现继承，子类中调用super()访问父类构造函数</li><li>因为class的实现是基于ES5类模型那一套，本质上和ES5中是一样的，如果过多使用extends可能还会降低性能</li></ul><p>ES6 继承推荐看阮一峰的<a href="http://es6.ruanyifeng.com/" target="_blank" rel="noopener">ES6</a> </p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;原型链继承&quot;&gt;&lt;a href=&quot;#原型链继承&quot; class=&quot;headerlink&quot; title=&quot;原型链继承&quot;&gt;&lt;/a&gt;原型链继承&lt;/h2&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Parent&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.names = [&lt;span class=&quot;string&quot;&gt;&#39;foo&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;bar&#39;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.age = &lt;span class=&quot;number&quot;&gt;60&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Parent.prototype.greeting = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&quot;hello!&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Child&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Child.prototype = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Parent();  &lt;span class=&quot;comment&quot;&gt;//将父类实例作为子类原型&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; child1 = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Child();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;child1.names.push(&lt;span class=&quot;string&quot;&gt;&#39;baz&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(child1.names); &lt;span class=&quot;comment&quot;&gt;// [&quot;foo&quot;, &quot;bar&quot;, &quot;baz&quot;]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; child2 = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Child();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(child2.names); &lt;span class=&quot;comment&quot;&gt;// [&quot;foo&quot;, &quot;bar&quot;, &quot;baz&quot;] &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;child1.greeting()  &lt;span class=&quot;comment&quot;&gt;//  hello!&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; age1 = child1.age = &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(age1)   &lt;span class=&quot;comment&quot;&gt;//5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(child2.age)   &lt;span class=&quot;comment&quot;&gt;//60  依旧继承父类基本类属性&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//修改其中一个实例子类基本类型属性不会影响其他子类基本类型属性&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="https://chongdee.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://chongdee.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript之作用域（Scope）,作用域链（Scope Chain）</title>
    <link href="https://chongdee.github.io/2018/07/12/JavaScript%E4%B9%8B%E4%BD%9C%E7%94%A8%E5%9F%9F%EF%BC%88Scope%EF%BC%89%E4%BD%9C%E7%94%A8%E5%9F%9F%E9%93%BE%EF%BC%88Scope%20chain%EF%BC%89/"/>
    <id>https://chongdee.github.io/2018/07/12/JavaScript之作用域（Scope）作用域链（Scope chain）/</id>
    <published>2018-07-12T10:17:35.000Z</published>
    <updated>2018-07-12T16:57:01.549Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2 id="官方概念"><a href="#官方概念" class="headerlink" title="官方概念"></a>官方概念</h2><h3 id="作用域-Scope"><a href="#作用域-Scope" class="headerlink" title="作用域(Scope):"></a>作用域(Scope):</h3><div class="note info"><p>javaScript中没有块级作用域、取而代之的使用了函数作用域、即变量在声明它们的函数以及这个函数体嵌套的任意函数体内都是有定义的 –《javaScript权威指南》</p></div><h3 id="作用域链-Scope-Chain"><a href="#作用域链-Scope-Chain" class="headerlink" title="作用域链(Scope Chain):"></a>作用域链(Scope Chain):</h3><div class="note info"><p>当函数创建时会创建一个包含其父函数变量、父函数的父函数的变量对象、直至全局变量对象的一个作用域链，这个作用域被保存在函数内部的[[scope]]属性中，由于函数本身即是对象，可以理解[[scope]]是后台可以访问的一个属性，不可再JavaScript代码中访问，当函数调用时，会创建一个自己的活动对象、作为变量对象，被推入到执行环境作用域链的最前端，此时这个[[scope]]属性相当于一个变量对象的集合，并有访问的优先级。作用域链并不保存实际的变量对象，它是一个指针，指向内存中的变量对象列表。</p></div><a id="more"></a><h3 id="执行环境-执行上下文Execution-Contexts"><a href="#执行环境-执行上下文Execution-Contexts" class="headerlink" title="执行环境(执行上下文Execution Contexts):"></a>执行环境(执行上下文Execution Contexts):</h3><div class="note info"><p>执行环境定义了变量或函数有权访问的其他数据、决定了它们各自的行为。每个函数都有自己的执行环境，当执行流进入一个函数时，函数的环境就会被推入一个环境栈中，而函数执行之后，栈将其环境弹出，把控制权返回给之前的执行环境 –《javaScript高级教程》</p></div><h2 id="个人理解"><a href="#个人理解" class="headerlink" title="个人理解"></a>个人理解</h2><h3 id="作用域："><a href="#作用域：" class="headerlink" title="作用域："></a>作用域：</h3><div class="note info"><p>所谓作用域，就是变量或者是函数能作用的范围。</p></div><p>分为全局作用域和局部作用域：</p><h4 id="1、全局作用域"><a href="#1、全局作用域" class="headerlink" title="1、全局作用域"></a>1、全局作用域</h4><div class="note info"><p>除了函数中定义的变量之外，都是全局作用域。</p></div><p>举个栗子：<br><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span><span class="params">()</span><span class="comment">&#123;</span></span></span><br><span class="line"><span class="function"><span class="comment">    console.log(a);</span></span></span><br><span class="line"><span class="function"><span class="comment">&#125;</span></span></span><br><span class="line"><span class="function"><span class="title">bar</span><span class="params">()</span>;</span><span class="comment">//10</span></span><br></pre></td></tr></table></figure></p><p>以上的a就是全局变量，到处可以访问a。<br>但是要理解<strong>变量声明提升</strong>慨念，以下代码涉及<strong>变量声明提升</strong>问题（博客也有自己写的一篇关于<a href="https://chongdee.github.io/2018/07/11/JavaScript%E4%B9%8B%E5%A3%B0%E6%98%8E%E6%8F%90%E5%8D%87%EF%BC%88Hoisting%EF%BC%89/">声明提升</a>的文章）：</p><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span><span class="params">()</span><span class="comment">&#123;</span></span></span><br><span class="line"><span class="function"><span class="comment">    console.log(a);</span></span></span><br><span class="line"><span class="function"><span class="comment">    var a = 20;</span></span></span><br><span class="line"><span class="function"><span class="comment">&#125;</span></span></span><br><span class="line"><span class="function"><span class="title">bar</span><span class="params">()</span>;</span><span class="comment">//undefined</span></span><br></pre></td></tr></table></figure><p>是的，你没看错。函数内的变量a由于被预解析（变量提升），变量a提升到bar函数内的顶部形成一个局部作用域，赋值位置不变，所以结果就是undefined。<br>上面代码实质执行是：<br><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span><span class="params">()</span><span class="comment">&#123;</span></span></span><br><span class="line"><span class="function"><span class="comment">    var a</span></span></span><br><span class="line"><span class="function"><span class="comment">    console.log(a);  // undefined</span></span></span><br><span class="line"><span class="function"><span class="comment">    a = 20;</span></span></span><br><span class="line"><span class="function"><span class="comment">&#125;</span></span></span><br><span class="line"><span class="function"><span class="title">bar</span><span class="params">()</span>;</span> <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure></p><h4 id="2、局部作用域"><a href="#2、局部作用域" class="headerlink" title="2、局部作用域"></a>2、局部作用域</h4><div class="note info"><p>函数里用var声明的变量。</p></div><p>举个栗子：<br><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span><span class="params">()</span><span class="comment">&#123;</span></span></span><br><span class="line"><span class="function"><span class="comment">    var a  = 20;</span></span></span><br><span class="line"><span class="function"><span class="comment">    console.log(a);</span></span></span><br><span class="line"><span class="function"><span class="comment">&#125;</span></span></span><br><span class="line"><span class="function"><span class="title">bar</span><span class="params">()</span>;</span><span class="comment">//20</span></span><br></pre></td></tr></table></figure></p><h3 id="作用域链"><a href="#作用域链" class="headerlink" title="作用域链"></a>作用域链</h3><div class="note info"><p>一个变量随着父级函数一级一级往上搜索的查找,找到这个变量最近定义var的地方，直到找到为止，找不到就报错，这个程就是作用域链起的作用。</p></div><p>代码分析：<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span><span class="params">()</span> </span>&#123; <span class="comment">//外部函数</span></span><br><span class="line">  <span class="keyword">var</span> b = <span class="number">20</span>; </span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">bar</span><span class="params">()</span> </span>&#123; <span class="comment">//内部函数</span></span><br><span class="line">    alert(a + b);  <span class="comment">//变量 a,b 一层一层往上找 这个过程就是作用域链的过程</span></span><br><span class="line">  &#125; </span><br><span class="line">  <span class="keyword">return</span> bar; </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">foo()(); <span class="comment">// 30</span></span><br></pre></td></tr></table></figure></p><h2 id="没有块级作用域（至ES5），ES6中有块级作用域"><a href="#没有块级作用域（至ES5），ES6中有块级作用域" class="headerlink" title="没有块级作用域（至ES5），ES6中有块级作用域"></a>没有块级作用域（至ES5），ES6中有块级作用域</h2><div class="note info"><p>ES6之前，除了函数之外的代码块都不具备块级作用域。</p></div><p>常见的经典例子：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="number">6</span>;i++)&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(i);</span><br><span class="line">    &#125;,<span class="number">200</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//6 6 6 6 6 6</span></span><br></pre></td></tr></table></figure></p><p>解决办法：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通过立即执行函数（IIFE）解决</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="number">6</span>;i++)&#123;</span><br><span class="line">    (<span class="function"><span class="keyword">function</span>(<span class="params">j</span>)</span>&#123;</span><br><span class="line">        setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(j);</span><br><span class="line">    &#125;,<span class="number">200</span>);</span><br><span class="line">    &#125;)(i)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//0 1 2 3 4 5</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//通过ES6 let块作用域把var 换成 let 声明变量</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;<span class="number">6</span>;i++)&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(i);</span><br><span class="line">    &#125;,<span class="number">200</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//0 1 2 3 4 5</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;官方概念&quot;&gt;&lt;a href=&quot;#官方概念&quot; class=&quot;headerlink&quot; title=&quot;官方概念&quot;&gt;&lt;/a&gt;官方概念&lt;/h2&gt;&lt;h3 id=&quot;作用域-Scope&quot;&gt;&lt;a href=&quot;#作用域-Scope&quot; class=&quot;headerlink&quot; title=&quot;作用域(Scope):&quot;&gt;&lt;/a&gt;作用域(Scope):&lt;/h3&gt;&lt;div class=&quot;note info&quot;&gt;&lt;p&gt;javaScript中没有块级作用域、取而代之的使用了函数作用域、即变量在声明它们的函数以及这个函数体嵌套的任意函数体内都是有定义的 –《javaScript权威指南》&lt;/p&gt;&lt;/div&gt;
&lt;h3 id=&quot;作用域链-Scope-Chain&quot;&gt;&lt;a href=&quot;#作用域链-Scope-Chain&quot; class=&quot;headerlink&quot; title=&quot;作用域链(Scope Chain):&quot;&gt;&lt;/a&gt;作用域链(Scope Chain):&lt;/h3&gt;&lt;div class=&quot;note info&quot;&gt;&lt;p&gt;当函数创建时会创建一个包含其父函数变量、父函数的父函数的变量对象、直至全局变量对象的一个作用域链，这个作用域被保存在函数内部的[[scope]]属性中，由于函数本身即是对象，可以理解[[scope]]是后台可以访问的一个属性，不可再JavaScript代码中访问，当函数调用时，会创建一个自己的活动对象、作为变量对象，被推入到执行环境作用域链的最前端，此时这个[[scope]]属性相当于一个变量对象的集合，并有访问的优先级。作用域链并不保存实际的变量对象，它是一个指针，指向内存中的变量对象列表。&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="https://chongdee.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://chongdee.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript之this</title>
    <link href="https://chongdee.github.io/2018/07/12/JavaScript%E4%B9%8Bthis/"/>
    <id>https://chongdee.github.io/2018/07/12/JavaScript之this/</id>
    <published>2018-07-11T17:26:37.000Z</published>
    <updated>2018-07-12T22:56:49.710Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><div class="note info"><p>与我们常见的很多语言不同，JavaScript 函数中的 this 指向并不是在函数定义的时候确定的，而是在调用的时候确定的。换句话说，函数的调用方式决定了 this 指向。</p><p>JavaScript 中，普通的函数调用方式有三种：直接调用、方法调用和 new 调用。除此之外，还有一些特殊的调用方式，比如通过 bind() 将函数绑定到对象之后再进行调用、通过 call()、apply() 进行调用等。而 es6 引入了箭头函数之后，箭头函数调用时，其 this 指向又有所不同。下面就来分析这些情况下的 this 指向。</p></div><a id="more"></a><h2 id="直接调用（全局环境下的this）"><a href="#直接调用（全局环境下的this）" class="headerlink" title="直接调用（全局环境下的this）"></a>直接调用（全局环境下的this）</h2><p>当在网页的全局作用域中调用函数时，this对象引用的就是window。<br>例1：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span>);<span class="comment">//Window</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line">f();<span class="comment">//Window  函数直接调用</span></span><br></pre></td></tr></table></figure></p><p>例2：<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">"window"</span>; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayName</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> name = <span class="string">"fun"</span>;</span><br><span class="line">    alert(<span class="keyword">this</span>.name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sayName();    <span class="comment">// "window"   在全局调用，this对象引用的就是window</span></span><br></pre></td></tr></table></figure></p><h2 id="方法调用（对象中的this）"><a href="#方法调用（对象中的this）" class="headerlink" title="方法调用（对象中的this）"></a>方法调用（对象中的this）</h2><p>将一个函数赋给对象，通过对象调用这个函数，它们的this是调用该函数的对象。<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">"window"</span>; </span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    name: <span class="string">"hehe"</span>,</span><br><span class="line">    sayName: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">obj.sayName();<span class="comment">//hehe</span></span><br></pre></td></tr></table></figure></p><p>将函数sayName赋给对象o，obj.sayName()被调用时，函数内部的this被绑定到obj</p><h2 id="new-调用（构造函数中的this）"><a href="#new-调用（构造函数中的this）" class="headerlink" title="new 调用（构造函数中的this）"></a>new 调用（构造函数中的this）</h2><p>函数或方法之前带有关键字new，它就构成了构造函数调用。通过构造函数生成一个新的对象，this指向新对象<br>构造函数以大写字母开头，提醒调用者使用正确的方式调用<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">"global"</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name,</span><br><span class="line">    <span class="keyword">this</span>.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        alert(<span class="keyword">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> Person(<span class="string">"local"</span>);</span><br><span class="line">p.sayName();    <span class="comment">// "local"</span></span><br><span class="line"><span class="built_in">console</span>.log(p.name);    <span class="comment">// local</span></span><br><span class="line"><span class="built_in">console</span>.log(name);      <span class="comment">// global</span></span><br></pre></td></tr></table></figure></p><h2 id="apply和call调用对this的影响"><a href="#apply和call调用对this的影响" class="headerlink" title="apply和call调用对this的影响"></a>apply和call调用对this的影响</h2><p>apply和call是函数对象的的两个方法，它们可以修改函数执行的上下文环境，即this绑定的对象。apply和call的第一个参数就是this绑定的对象，若apply和call的参数为空，则默认调用全局对象。</p><blockquote><p><strong>apply和call的区别：</strong></p><ol><li>它们在功能上是没有区别的，都是改变this的指向，它们的区别主要是在于方法的实现形式和参数传递上的不同</li><li>call与apply的第一个参数都是要传入给当前对象的对象</li><li>apply第二个参数传入的是数组，而call传入的是序列项。</li><li>fn.call(对象,arg1,arg2….)</li><li>fn.apply(对象，[arg1,arg2,…])</li></ol></blockquote><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">"window"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  name: <span class="string">"object"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayName</span><span class="params">()</span></span>&#123;</span><br><span class="line">  alert(<span class="keyword">this</span>.name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sayName();           <span class="comment">// window   直接调用函数sayName</span></span><br><span class="line">sayName.call(obj);   <span class="comment">// object   调用call方法修改this的指向</span></span><br><span class="line">sayName.call();      <span class="comment">// window   当call方法的参数为空时，默认调用全局对象</span></span><br></pre></td></tr></table></figure><h2 id="bind-对直接调用的影响"><a href="#bind-对直接调用的影响" class="headerlink" title="bind() 对直接调用的影响"></a>bind() 对直接调用的影响</h2><p>这个方法会创建一个函数的实例，其 this 始终指向bind()绑定的对象<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> name = <span class="string">"window"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  name: <span class="string">"object"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayName</span><span class="params">()</span></span>&#123;</span><br><span class="line">  alert(<span class="keyword">this</span>.name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> objSayName = sayName.bind(obj);</span><br><span class="line">objSayName();<span class="comment">//object</span></span><br></pre></td></tr></table></figure></p><h2 id="闭包中的this"><a href="#闭包中的this" class="headerlink" title="闭包中的this"></a>闭包中的this</h2><p>闭包中使用this对象可能会导致一些问题，this对象在运行时是基于函数的执行环境对象的：在全局函数中，this等于window，而当函数被作为某个对象方法调用时，this等于那个对象。<br><strong>匿名函数的执行环境具有全局性，因此其this对象通常指向window。</strong><br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">"window"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  name: <span class="string">"obj"</span>,</span><br><span class="line">  sayName: <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> test = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">      alert(<span class="keyword">this</span>.name);    <span class="comment">// this绑定到全局对象上</span></span><br><span class="line">    &#125;</span><br><span class="line">    test();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">obj.sayName();    <span class="comment">// "window"</span></span><br></pre></td></tr></table></figure></p><p>解决方法<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">"window"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  name: <span class="string">"obj"</span>,</span><br><span class="line">  sayName: <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> that = <span class="keyword">this</span>;    <span class="comment">// 使用变量替代的方法,这样我们创建了一个局部变量that来指向obj对象</span></span><br><span class="line">    <span class="keyword">var</span> test = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">      alert(that.name);</span><br><span class="line">    &#125;</span><br><span class="line">    test();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">obj.sayName();    <span class="comment">// "obj"</span></span><br></pre></td></tr></table></figure></p><h2 id="ES6中箭头函数中的this"><a href="#ES6中箭头函数中的this" class="headerlink" title="ES6中箭头函数中的this"></a>ES6中箭头函数中的this</h2><p>箭头函数中的 this 在定义它的时候已经决定了，与如何调用以及在哪里调用它无关，包括 (call, apply, bind) 等操作都无法改变它的 this。<br>ES6<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = <span class="function">(<span class="params">a</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(a);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line">foo(<span class="number">1</span>);</span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="comment">// Window</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  name: <span class="string">'hehe'</span></span><br><span class="line">&#125;;</span><br><span class="line">foo.call(obj, <span class="number">2</span>);</span><br></pre></td></tr></table></figure></p><p>ES5<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = <span class="function"><span class="keyword">function</span> (<span class="params">a</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(a);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line">foo(<span class="number">1</span>);</span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="comment">// obj</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  name: <span class="string">'hehe'</span></span><br><span class="line">&#125;;</span><br><span class="line">foo.call(obj, <span class="number">2</span>);</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;div class=&quot;note info&quot;&gt;&lt;p&gt;与我们常见的很多语言不同，JavaScript 函数中的 this 指向并不是在函数定义的时候确定的，而是在调用的时候确定的。换句话说，函数的调用方式决定了 this 指向。&lt;/p&gt;
&lt;p&gt;JavaScript 中，普通的函数调用方式有三种：直接调用、方法调用和 new 调用。除此之外，还有一些特殊的调用方式，比如通过 bind() 将函数绑定到对象之后再进行调用、通过 call()、apply() 进行调用等。而 es6 引入了箭头函数之后，箭头函数调用时，其 this 指向又有所不同。下面就来分析这些情况下的 this 指向。&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="https://chongdee.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://chongdee.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript之声明提升（Hoisting）</title>
    <link href="https://chongdee.github.io/2018/07/11/JavaScript%E4%B9%8B%E5%A3%B0%E6%98%8E%E6%8F%90%E5%8D%87%EF%BC%88Hoisting%EF%BC%89/"/>
    <id>https://chongdee.github.io/2018/07/11/JavaScript之声明提升（Hoisting）/</id>
    <published>2018-07-10T22:58:07.000Z</published>
    <updated>2018-07-12T10:35:45.076Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2 id="浏览器解析JS脚本执行顺序问题"><a href="#浏览器解析JS脚本执行顺序问题" class="headerlink" title="浏览器解析JS脚本执行顺序问题"></a>浏览器解析JS脚本执行顺序问题</h2><p>有些朋友可能会觉得JavaScript的代码是从上到下，一行一行的解释执行的。如果按照这样的思路，在有些情况下阅读代码会得到错误的结果，考虑以下代码：<br><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">a</span> = <span class="number">2</span><span class="comment">;</span></span><br><span class="line">var a<span class="comment">;</span></span><br><span class="line">console.log(a)<span class="comment">;</span></span><br></pre></td></tr></table></figure></p><a id="more"></a><p><strong>console.log(a)</strong>应该输出什么呢？有些开发者觉得会输出<strong>undefined</strong>，因为<strong>var a</strong>在<strong>‘a = 2’</strong>之后，变量 <strong>a</strong> 被重复定义了，但是没有被赋值，所以是’undefined’。但是结果输出是 <strong>2</strong>。如下图所示：<br><img src="/img/javascript_series/hoist_1.png" alt="&quot;麻蛋，图片哪去啦~~~&quot;"><br>我们再来考虑另一段代码，如下所示：<br><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">console.log(a)<span class="comment">;</span></span><br><span class="line">var a = <span class="number">2</span><span class="comment">;</span></span><br></pre></td></tr></table></figure></p><p>这段代码会输出什么样的结果呢？有些人可能会觉得输出<strong>ReferenceError</strong>。因为变量a在没有声明的情况下就被使用了。真实结果呢，如下图所示：输出的是<strong>undefined</strong><br><img src="/img/javascript_series/hoist_2.png" alt="&quot;麻蛋，图片哪去啦~~~&quot;"><br><div class="note info"><p>为什么会这样呢？这就牵出了本文的主题：<strong>JavaScript</strong>声明提升 </p></div>## JavaScript代码的运行规则在JavaScript代码运行之前其实是有一个编译阶段的。编译之后才是从上到下，一行一行解释执行。**变量提升**就发生在编译阶段，它把变量和函数的声明提升至作用域的顶端。（编译阶段的工作之一就是将变量与其作用域进行关联）。所以对于代码var a =2;来说，编译器看到的是两行代码var a; a = 2;<div class="note info"><ul><li>第一个语句是声明语句，在编译阶段处理。// var a</li><li>第二个语句是赋值语句，在运行阶段处理。// a = 2</li></ul></div><br><strong>那么我们再回过头来看看JS脚本执行顺序问题中出现的代码：</strong><br><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">a</span> = <span class="number">2</span><span class="comment">;</span></span><br><span class="line">var a<span class="comment">;</span></span><br><span class="line">console.log(a)<span class="comment">;</span></span><br></pre></td></tr></table></figure></p><p><strong>应该这样来处理：</strong><br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var <span class="keyword">a</span>;           <span class="comment"> //编译阶段</span></span><br><span class="line"><span class="keyword">a</span> = <span class="number">2</span>;           <span class="comment"> //运行阶段</span></span><br><span class="line">console.<span class="built_in">log</span>(<span class="keyword">a</span>);  <span class="comment"> //运行阶段</span></span><br></pre></td></tr></table></figure></p><p><strong>第二段代码：</strong><br><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">console.log(a)<span class="comment">;</span></span><br><span class="line">var a = <span class="number">2</span><span class="comment">;</span></span><br></pre></td></tr></table></figure></p><p><strong>应该这样来处理：</strong><br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var <span class="keyword">a</span>;           <span class="comment"> //编译阶段</span></span><br><span class="line">console.<span class="built_in">log</span>(<span class="keyword">a</span>);  <span class="comment"> //运行阶段 </span></span><br><span class="line"><span class="keyword">a</span> = <span class="number">2</span>;           <span class="comment"> //运行阶段</span></span><br></pre></td></tr></table></figure></p><p>所以这段代码的最终输出结果是<strong>undefined</strong>。<br><div class="note info"><p><strong>变量提升需要注意两点：</strong></p><ol><li>提升的部分只是变量声明，赋值语句和可执行的代码逻辑还保持在原地不动</li><li>提升只是将变量声明提升到变量所在的变量范围的顶端，并不是提升到全局范围，说明如下：</li></ol></div><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">foo();</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a); <span class="comment">//会输出undefined</span></span><br><span class="line">    <span class="keyword">var</span> a = <span class="string">"2"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//变量提升之后的效果</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a;</span><br><span class="line">    <span class="built_in">console</span>.log(a);</span><br><span class="line">    a = <span class="string">"2"</span>;</span><br><span class="line">&#125;</span><br><span class="line">foo();</span><br></pre></td></tr></table></figure></p><div class="note info"><p>函数声明会提升，但是函数表达式就不了。</p></div><p>看如下代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">foo();</span><br><span class="line"><span class="keyword">var</span> foo = <span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>)</span>&#123;    <span class="comment">//这是一个函数表达式，不再是函数声明。</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"bar"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//以上代码会报错：</span></span><br><span class="line">Uncaught <span class="built_in">TypeError</span>: foo is not a <span class="function"><span class="keyword">function</span></span></span><br></pre></td></tr></table></figure></p><p>代码实质执行方式如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> foo;    </span><br><span class="line">foo();    <span class="comment">//TypeError，因为还没有赋值</span></span><br><span class="line">bar();    <span class="comment">//bar不可以在全局范围内引用</span></span><br><span class="line">foo = <span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>)</span>&#123;            </span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"bar"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="函数是一等公民"><a href="#函数是一等公民" class="headerlink" title="函数是一等公民"></a>函数是一等公民</h2><p><strong>变量声明</strong>和<strong>函数声明</strong>都会得到<strong>变量提升</strong>，但<strong>函数声明</strong>会最先得到提升，然后是变量声明。<br>考虑如下代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">foo();    <span class="comment">//输出的结果为1</span></span><br><span class="line"><span class="keyword">var</span> foo;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">foo = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>代码实质执行方式如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">&#125; </span><br><span class="line">foo();</span><br><span class="line">foo = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><blockquote><p><strong>注意：</strong>var foo;由于是重复声明变量，所以被编译优化去掉。</p></blockquote><p>对于函数声明来说，如果定义了<strong>相同的函数变量声明，后定义的声明会覆盖掉先前的声明</strong>，看如下代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">foo();    <span class="comment">//输出3</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> foo = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">2</span>);</span><br><span class="line">&#125;  </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">3</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>JavaScript中是没有块级作用域的概念（ps：ES6中有改进了），看如下代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">foo();    <span class="comment">//输出结果为2</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">if</span>(a)&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这段代码输出结果为2，if语句没有块级作用域的功能，所以函数声明都被提升到全局作用域中，<br>又因为定义了两个foo，后来的定义覆盖了前边的定义，所以输出结果为2。</p><h2 id="面试题解析"><a href="#面试题解析" class="headerlink" title="面试题解析"></a>面试题解析</h2><p>选择了网上三题‘较’难，迷惑的人较多的面试题：</p><h3 id="题1"><a href="#题1" class="headerlink" title="题1:"></a>题1:</h3><figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">console.log(foo);     // ?</span><br><span class="line">console.log(bar);     // ?</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> foo = function()<span class="meta">&#123;...&#125;</span>; </span><br><span class="line">function bar()<span class="meta">&#123;...&#125;</span></span><br></pre></td></tr></table></figure><p>答案 ： undefined ，function bar(){…}</p><p>解析：<br><figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> foo ;</span><br><span class="line">function bar()<span class="meta">&#123;...&#125;</span> </span><br><span class="line"></span><br><span class="line">console.log(foo);    // undefined </span><br><span class="line">console.log(bar);    // function bar()<span class="meta">&#123;...&#125;</span></span><br><span class="line"></span><br><span class="line">foo = function()<span class="meta">&#123;...&#125;</span>;</span><br></pre></td></tr></table></figure></p><blockquote><p>本题主要考的是函数和函数表达式的区别。<br>变量声明和函数先提升到顶部，赋值被留到原地，foo默认undefined。bar输出函数自己。</p></blockquote><h3 id="题2："><a href="#题2：" class="headerlink" title="题2："></a>题2：</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    a = <span class="number">5</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">window</span>.a);  <span class="comment">//  ?</span></span><br><span class="line">    <span class="built_in">console</span>.log(a);         <span class="comment">//  ?</span></span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(a);         <span class="comment">//  ?</span></span><br><span class="line">&#125;</span><br><span class="line">foo();</span><br></pre></td></tr></table></figure><p>答案 ：undefined ，5 ，10<br>解析：<br>下面是本题的详细解析，考点就是提升和全局污染<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a ;                   <span class="comment">// 因为下面有声明a变量,a的声明提前</span></span><br><span class="line">    a = <span class="number">5</span>;                    <span class="comment">//因为在自己的作用域内有a的声明存在,a并不会污染到全局,</span></span><br><span class="line">                              <span class="comment">//而是绑定到本作用域的a上，这也是比较忽悠人的地方</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">window</span>.a);    <span class="comment">// undefined </span></span><br><span class="line">                              <span class="comment">//a = 5 没有污染全局，所以window.a不存在,故输出undefined</span></span><br><span class="line">    <span class="built_in">console</span>.log(a);           <span class="comment">// 5 ,a 的声明提升，变量 a = 10 没有提升，a 现在还是 5</span></span><br><span class="line">    a = <span class="number">10</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(a);           <span class="comment">// 10</span></span><br><span class="line">&#125;</span><br><span class="line">foo();</span><br></pre></td></tr></table></figure></p><p>这里涉及到全局污染问题，即不使用 var 或 其他声明关键字 去声明时，在本作用域找不到声明时，<br>默认向上级找，直到最顶层绑定到全局window上（严格模式报 not defined ）。例如:<br><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span><span class="params">()</span><span class="comment">&#123;</span></span></span><br><span class="line"><span class="function"><span class="comment">    a = 1;</span></span></span><br><span class="line"><span class="function"><span class="comment">    console.log(window.a);    // 1   不使用 var定义变量a污染到了全局上</span></span></span><br><span class="line"><span class="function"><span class="comment">&#125;</span></span></span><br><span class="line"><span class="function"><span class="title">foo</span><span class="params">()</span>;</span></span><br></pre></td></tr></table></figure></p><h3 id="题3："><a href="#题3：" class="headerlink" title="题3："></a>题3：</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">   <span class="keyword">var</span> a = <span class="number">1</span>;        </span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>) </span>&#123;   </span><br><span class="line">      a = <span class="number">10</span>;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">''</span>;</span><br><span class="line">      <span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;...&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    b();</span><br><span class="line">    <span class="built_in">console</span>.log(a);         <span class="comment">// ?</span></span><br><span class="line">&#125;</span><br><span class="line">foo();</span><br></pre></td></tr></table></figure><p>答案 ：1<br>解析：<br>考点 1.污染 2.提升 3.作用域<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a ;                    <span class="comment">// a 和 b 一起提升到作用域顶部</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;...&#125;      <span class="comment">//b里的函数a也提升到b的顶部</span></span><br><span class="line">      a = <span class="number">10</span>;                 <span class="comment">//因为上面有变量a，所以a也不会污染到上一层，而是对函数a进行再次赋值</span></span><br><span class="line">                              <span class="comment">//如果函数执行，函数里的a的值是 10，且没有污染</span></span><br><span class="line">      <span class="keyword">return</span> <span class="string">''</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    a = <span class="number">1</span>;                    <span class="comment">//对本作用域的a赋值</span></span><br><span class="line">    </span><br><span class="line">    b();                      <span class="comment">//函数执行,b作用域内的a被赋值为10</span></span><br><span class="line">    <span class="built_in">console</span>.log(a);           <span class="comment">// 1</span></span><br><span class="line">                              <span class="comment">// 这个有两点要搞清楚 :</span></span><br><span class="line">                              <span class="comment">// 1. b的a没有污染到这个作用域</span></span><br><span class="line">                              <span class="comment">// 2. 就近原则，本函数的log(a)找离自己最近的a变量，</span></span><br><span class="line">                              <span class="comment">//如果log在函数b内，那么输出 离自己最近的 10</span></span><br><span class="line">&#125;</span><br><span class="line">foo();</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;浏览器解析JS脚本执行顺序问题&quot;&gt;&lt;a href=&quot;#浏览器解析JS脚本执行顺序问题&quot; class=&quot;headerlink&quot; title=&quot;浏览器解析JS脚本执行顺序问题&quot;&gt;&lt;/a&gt;浏览器解析JS脚本执行顺序问题&lt;/h2&gt;&lt;p&gt;有些朋友可能会觉得JavaScript的代码是从上到下，一行一行的解释执行的。如果按照这样的思路，在有些情况下阅读代码会得到错误的结果，考虑以下代码：&lt;br&gt;&lt;figure class=&quot;highlight abnf&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;a&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var a&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;console.log(a)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="https://chongdee.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://chongdee.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript知识思维导图</title>
    <link href="https://chongdee.github.io/2018/07/11/JavaScript%E7%9F%A5%E8%AF%86%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/"/>
    <id>https://chongdee.github.io/2018/07/11/JavaScript知识思维导图/</id>
    <published>2018-07-10T22:56:49.000Z</published>
    <updated>2018-07-11T15:25:40.336Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p><img src="/img/js_mind_map/1.png" alt="&quot;js数据类型&quot;"></p><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p><img src="/img/js_mind_map/2.png" alt="&quot;变量&quot;"></p><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><p><img src="/img/js_mind_map/3.png" alt="&quot;运算符&quot;"></p><h2 id="流程语句"><a href="#流程语句" class="headerlink" title="流程语句"></a>流程语句</h2><p><img src="/img/js_mind_map/4.png" alt="&quot;流程语句&quot;"></p><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p><img src="/img/js_mind_map/5.png" alt="&quot;数组&quot;"></p><h2 id="函数基础"><a href="#函数基础" class="headerlink" title="函数基础"></a>函数基础</h2><p><img src="/img/js_mind_map/6.png" alt="&quot;函数基础&quot;"></p><h2 id="字符串函数"><a href="#字符串函数" class="headerlink" title="字符串函数"></a>字符串函数</h2><p><img src="/img/js_mind_map/7.png" alt="&quot;字符串函数&quot;"></p><h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><p><img src="/img/js_mind_map/8.png" alt="&quot;正则表达式&quot;"></p><h2 id="DOM基础操作"><a href="#DOM基础操作" class="headerlink" title="DOM基础操作"></a>DOM基础操作</h2><p><img src="/img/js_mind_map/9.png" alt="&quot;DOM基础操作&quot;"></p><h2 id="window对象"><a href="#window对象" class="headerlink" title="window对象"></a>window对象</h2><p><img src="/img/js_mind_map/10.png" alt="&quot;window对象&quot;"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=&quot;\assets\js\APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;h2 id=&quot;数据类型&quot;&gt;&lt;a href=&quot;#数据类型&quot; class=&quot;headerlink&quot; title=&quot;数据类型&quot;&gt;&lt;/a&gt;数据类型&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/i
      
    
    </summary>
    
      <category term="JavaScript" scheme="https://chongdee.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://chongdee.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>深入理解JavaScript运行机制</title>
    <link href="https://chongdee.github.io/2018/07/11/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3JavaScript%E8%BF%90%E8%A1%8C%E6%9C%BA%E5%88%B6/"/>
    <id>https://chongdee.github.io/2018/07/11/深入理解JavaScript运行机制/</id>
    <published>2018-07-10T22:56:49.000Z</published>
    <updated>2018-07-11T15:22:05.815Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2 id="JS在浏览器运行情况："><a href="#JS在浏览器运行情况：" class="headerlink" title="JS在浏览器运行情况："></a>JS在浏览器运行情况：</h2><ol><li>JS是单线程，是单线程，是单线程<div class="note info"><p><strong>场景描述：</strong>现在有2个进程p1，p2,由于是多进程的JS,所以他们对同一个dom,同时进行操作<br>p1 删除了该dom,而p2 编辑了该dom,同时下达2个矛盾的命令,浏览器究竟该如何执行呢?</p></div>通过以上场景描述,知道JS为什么被设计成单线程应该就容易理解了吧。<a id="more"></a></li><li>JS异步骚操作<div class="note info"><p><strong>场景描述:</strong> 如果JS中不存在异步,只能自上而下执行,如果上一行解析时间很长,那么下面的代码就会被阻塞。<br>对于用户而言,阻塞就意味着”卡死”,这样就导致了很差的用户体验</p></div><div class="note primary"><p><strong>既然JS是单线程的,只能在一条线程上执行,又是如何实现的异步呢?<br>是通过的事件循环(event loop)实现异步，理解了event loop机制,就理解了JS的执行机制</strong></p></div></li></ol><h2 id="JS中的event-loop"><a href="#JS中的event-loop" class="headerlink" title="JS中的event loop"></a>JS中的event loop</h2><p>观察以下代码的执行顺序<br><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">console.<span class="built_in">log</span>(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">    console.<span class="built_in">log</span>(<span class="number">2</span>)</span><br><span class="line">&#125;,<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">console.<span class="built_in">log</span>(<span class="number">3</span>)</span><br></pre></td></tr></table></figure></p><blockquote><p>运行结果是: 1 3 2<br>也就是说,setTimeout里的函数并没有立即执行,而是延迟了一段时间,满足一定条件后,才去执行的,这类代码,我们叫异步代码。<br>所以,这里我们首先知道了JS里的一种分类方式,就是将任务分为: 同步任务和异步任务<br>按照这种分类方式:JS的执行机制是</p><ul><li>首先判断JS是同步还是异步,同步就进入主进程,异步就进入event table</li><li>异步任务在event table中注册函数,当满足触发条件后,被推入event queue</li><li>同步任务进入主线程后一直执行,直到主线程空闲时,才会去event queue中查看是否有可执行的异步任务,如果有就推入主进程中</li></ul></blockquote><p>所以上面的例子的执行顺序：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">console.log(<span class="number">1</span>) <span class="comment">//是同步任务,放入主线程里</span></span><br><span class="line">setTimeout() <span class="comment">//是异步任务,被放入event table, 0秒之后被推入event queue里</span></span><br><span class="line">console.log(<span class="number">3</span> <span class="comment">//是同步任务,放到主线程里</span></span><br><span class="line"></span><br><span class="line">当 <span class="number">1</span>、 <span class="number">3</span>主线程被打印后,主线程去event queue(事件队列)里查看是否有可执行的函数,执行setTimeout里的函数</span><br></pre></td></tr></table></figure></p><blockquote><p><strong>但是如果一个程序里存在多个异步函数，执行顺序又是如何，<br>接下来就要了解一下JS事件循环中的macro-task(宏任务)、micro-task(微任务)对事件执行顺序的影响</strong></p></blockquote><h2 id="JS事件循环中的macro-task-宏任务-、micro-task-微任务"><a href="#JS事件循环中的macro-task-宏任务-、micro-task-微任务" class="headerlink" title="JS事件循环中的macro-task(宏任务)、micro-task(微任务)"></a>JS事件循环中的macro-task(宏任务)、micro-task(微任务)</h2><p>通过对以上JS循环执行机制的理解,试试分析下面代码执行顺序<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'定时器开始啦'</span>)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'马上执行for循环啦'</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++)&#123;</span><br><span class="line">        i == <span class="number">99</span> &amp;&amp; resolve();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'执行then函数啦'</span>)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'代码执行结束'</span>);</span><br></pre></td></tr></table></figure></p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">setTimeout 是异步任务,被放到event <span class="built_in">table</span></span><br><span class="line"></span><br><span class="line">new Promise 是同步任务,被放到主进程里,直接执行打印 console.<span class="built_in">log</span>(<span class="string">'马上执行for循环啦'</span>)</span><br><span class="line"></span><br><span class="line">.<span class="keyword">then</span>里的函数是 异步任务,被放到event <span class="built_in">table</span></span><br><span class="line"></span><br><span class="line"> console.<span class="built_in">log</span>(<span class="string">'代码执行结束'</span>)是同步代码,被放到主进程里,直接执行</span><br></pre></td></tr></table></figure><p>所以,结果是 【马上执行for循环啦 — 代码执行结束 — 定时器开始啦 — 执行then函数啦】吗?<br>亲自执行后,结果居然不是这样,而是【马上执行for循环啦 — 代码执行结束 — 执行then函数啦 — 定时器开始啦】<br>那么,难道是异步任务的执行顺序,不是前后顺序,而是另有规定? 事实上,按照异步和同步的划分方式,并不准确。</p><p><strong>而准确的划分方式是: ——重点理解，重点理解，重点理解</strong></p><ul><li><strong>macro-task(宏任务)</strong>：包括整体代码script，setTimeout，setInterval</li><li><strong>micro-task(微任务)</strong>：Promise，process.nextTick</li></ul><p><strong>按照这种分类方式JS的执行机制是:</strong></p><ul><li>执行一个宏任务,过程中如果遇到微任务,就将其放到微任务的【事件队列】里</li><li>当前宏任务执行完成后,会查看微任务的【事件队列】,并将里面全部的微任务依次执行完</li></ul><blockquote><p><strong>通过了解event loop(macro-task(宏任务),micro-task(微任务)) ,就知道JS执行机制了。</strong></p></blockquote><p>尝试按照刚学的执行机制,去分析异步代码：<br><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">首先执行script下的宏任务,遇到setTimeout,将其放到宏任务的【队列】里</span><br><span class="line"></span><br><span class="line">遇到 <span class="keyword">new</span> Promise直接执行,打印<span class="string">"马上执行for循环啦"</span></span><br><span class="line"></span><br><span class="line">遇到<span class="keyword">then</span>方法,是微任务,将其放到微任务的【队列里】</span><br><span class="line"></span><br><span class="line">打印 <span class="string">"代码执行结束"</span></span><br><span class="line"></span><br><span class="line">本轮宏任务执行完毕,查看本轮的微任务,发现有一个<span class="keyword">then</span>方法里的函数, 打印<span class="string">"执行then函数啦"</span></span><br><span class="line"></span><br><span class="line">到此,本轮的<span class="keyword">event</span> <span class="keyword">loop</span> 全部完成。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">下一轮的循环里,先执行一个宏任务,发现宏任务的【队列】里有一个 setTimeout里的函数,执行打印<span class="string">"定时器开始啦"</span></span><br></pre></td></tr></table></figure></p><p>所以最后的执行顺序是【马上执行for循环啦 — 代码执行结束 — 执行then函数啦 — 定时器开始啦】</p><h2 id="setTimeout执行原理"><a href="#setTimeout执行原理" class="headerlink" title="setTimeout执行原理"></a>setTimeout执行原理</h2><p>以下代码我们一般说: 3秒后,会执行setTimeout里的那个函数<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'执行了'</span>)</span><br><span class="line">&#125;,<span class="number">3000</span>)</span><br></pre></td></tr></table></figure></p><p>但是这种说并不严谨,准确的解释是: 3秒后,setTimeout里的函数被会推入event queue,而event queue(事件队列)里的任务,只有在主线程空闲时才会执行。</p><blockquote><p><strong>所以只有条件：(1)3秒后 (2)主线程空闲同时满足时,才会3秒后执行该函数</strong></p></blockquote><p>如果主线程执行内容很多,执行时间超过3秒,比如执行了10秒,那么这个函数只能10秒后执行了</p><blockquote><p><strong>就算设置0秒，主线程执行了10秒才空闲，这个函数也是只能10秒后才执行</strong></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;JS在浏览器运行情况：&quot;&gt;&lt;a href=&quot;#JS在浏览器运行情况：&quot; class=&quot;headerlink&quot; title=&quot;JS在浏览器运行情况：&quot;&gt;&lt;/a&gt;JS在浏览器运行情况：&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;JS是单线程，是单线程，是单线程&lt;div class=&quot;note info&quot;&gt;&lt;p&gt;&lt;strong&gt;场景描述：&lt;/strong&gt;现在有2个进程p1，p2,由于是多进程的JS,所以他们对同一个dom,同时进行操作&lt;br&gt;p1 删除了该dom,而p2 编辑了该dom,同时下达2个矛盾的命令,浏览器究竟该如何执行呢?&lt;/p&gt;&lt;/div&gt;
通过以上场景描述,知道JS为什么被设计成单线程应该就容易理解了吧。
    
    </summary>
    
      <category term="JavaScript" scheme="https://chongdee.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://chongdee.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>hexo的next主题个性化配置教程</title>
    <link href="https://chongdee.github.io/2018/07/10/hexo%20next%E4%B8%BB%E9%A2%98%E4%B8%AA%E6%80%A7%E5%8C%96%E9%85%8D%E7%BD%AE/"/>
    <id>https://chongdee.github.io/2018/07/10/hexo next主题个性化配置/</id>
    <published>2018-07-10T13:22:15.000Z</published>
    <updated>2018-07-11T15:23:29.677Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2 id="在右上角或者左上角实现fork-me-on-github"><a href="#在右上角或者左上角实现fork-me-on-github" class="headerlink" title="在右上角或者左上角实现fork me on github"></a>在右上角或者左上角实现fork me on github</h2><p>具体实现方法<br>点击<a href="https://blog.github.com/2008-12-19-github-ribbons/" target="_blank" rel="noopener">这里</a>挑选自己喜欢的样式，并复制代码:<br><img src="/img/next_theme_set/fork_on_github.png" alt="&quot;fork me on github图标&quot;"><br><a id="more"></a><br>然后粘贴刚才复制的代码到themes/next/layout/_layout.swig文件中(放在&lt;div class=”headband”&gt;&lt;/div&gt;的下面)，并把href改为你的github地址，如下图：<br><img src="/img/next_theme_set/fork_git_1.png" alt="&quot;fork me on github 代码&quot;"></p><h2 id="添加RSS"><a href="#添加RSS" class="headerlink" title="添加RSS"></a>添加RSS</h2><p>实现效果图：<br><img src="/img/next_theme_set/add_rss.png" alt="&quot;add rss 图片&quot;"></p><p>具体实现方法：<br>切换到你的blog的路径，例如我是在E:\blog_hexo这个路径上，也就是在你的根目录下<br>然后git bash安装 Hexo 插件：(这个插件会放在node_modules这个文件夹里)<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm install --save hexo-generator-feed</span></span><br></pre></td></tr></table></figure></p><p>接下来在根目录打开<strong>_config.yml</strong>文件,在里面的末尾添加：(请注意在冒号后面要加一个空格，不然会发生错误！)<br><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># Extensions</span><br><span class="line">## Plugins: http:<span class="comment">//hexo.io/plugins/</span></span><br><span class="line">plugins: hexo-<span class="keyword">generate</span>-feed</span><br></pre></td></tr></table></figure></p><p>然后打开next主题文件夹里面的<strong>_config.yml</strong>,在里面配置为如下样子：(就是在rss:的后面加上/atom.xml,注意在冒号后面要加一个空格)<br><figure class="highlight vbscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># <span class="keyword">Set</span> rss <span class="keyword">to</span> <span class="literal">false</span> <span class="keyword">to</span> disable feed link.</span><br><span class="line"># Leave rss as <span class="literal">empty</span> <span class="keyword">to</span> use site<span class="comment">'s feed link.</span></span><br><span class="line"># <span class="keyword">Set</span> rss <span class="keyword">to</span> specific value <span class="keyword">if</span> you have burned your feed already.</span><br><span class="line">rss: /atom.xml</span><br></pre></td></tr></table></figure></p><p>配置完之后运行：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hexo g</span></span><br></pre></td></tr></table></figure></p><p>重新生成一次，你会在 ./public 文件夹中看到 atom.xml 文件。然后启动服务器查看是否有效，之后再部署到 Github 中。</p><h2 id="添加动态背景"><a href="#添加动态背景" class="headerlink" title="添加动态背景"></a>添加动态背景</h2><p>实现效果图:<br><img src="/img/next_theme_set/bg_gif.gif" alt="&quot;添加背景动态&quot;"></p><blockquote><p>注意：如果next主题在5.1.1以上的话就不用我这样设置，直接在主题配置文件中找到canvas_nest: false，把它改为canvas_nest: true就行了（注意分号后面要加一个空格）</p><h3 id="修改-layout-swig"><a href="#修改-layout-swig" class="headerlink" title="修改_layout.swig"></a>修改_layout.swig</h3><p>打开 next/layout/_layout.swig<br>在 &lt; /body&gt;之前添加代码(注意不要放在&lt; /head&gt;的后面)<br><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"></span><span class="template-tag">&#123;% <span class="name"><span class="name">if</span></span> theme.canvas_nest %&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"//cdn.bootcss.com/canvas-nest.js/1.0.0/canvas-nest.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span><span class="template-tag">&#123;% <span class="name"><span class="name">endif</span></span> %&#125;</span><span class="xml"></span></span><br></pre></td></tr></table></figure></p></blockquote><h3 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h3><p>打开 /next/_config.yml,在里面添加如下代码：(可以放在最后面)<br><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># --------------------------------------------------------------</span></span><br><span class="line"><span class="meta"># background settings</span></span><br><span class="line"><span class="meta"># --------------------------------------------------------------</span></span><br><span class="line"><span class="meta"># add canvas-nest effect</span></span><br><span class="line"><span class="meta"># see detail from https://github.com/hustcc/canvas-nest.js</span></span><br><span class="line">canvas_nest: <span class="literal">true</span></span><br></pre></td></tr></table></figure></p><p>到此就结束了，运行 hexo clean，然后运行 hexo g,然后运行 hexo s，最后打开浏览器在浏览器的地址栏输入 localhost:4000 就能看到效果了。<br><strong>如果你感觉默认的线条太多的话，可以这么设置</strong><br>在上一步修改 _layout.swig中，把刚才的这些代码：<br><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"></span><span class="template-tag">&#123;% <span class="name"><span class="name">if</span></span> theme.canvas_nest %&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"//cdn.bootcss.com/canvas-nest.js/1.0.0/canvas-nest.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span><span class="template-tag">&#123;% <span class="name"><span class="name">endif</span></span> %&#125;</span><span class="xml"></span></span><br></pre></td></tr></table></figure></p><p>改为：<br><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"></span><span class="template-tag">&#123;% <span class="name"><span class="name">if</span></span> theme.canvas_nest %&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span></span></span></span><br><span class="line"><span class="xml">color="0,0,255" opacity='0.7' zIndex="-2" count="99" src="//cdn.bootcss.com/canvas-nest.js/1.0.0/canvas-nest.min.js"&gt;<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span><span class="template-tag">&#123;% <span class="name"><span class="name">endif</span></span> %&#125;</span><span class="xml"></span></span><br></pre></td></tr></table></figure></p><h3 id="配置项说明"><a href="#配置项说明" class="headerlink" title="配置项说明"></a>配置项说明</h3><ol><li>color ：线条颜色, 默认: ‘0,0,0’；三个数字分别为(R,G,B)</li><li>opacity: 线条透明度（0~1）, 默认: 0.5</li><li>count: 线条的总数量, 默认: 150</li><li>zIndex: 背景的z-index属性，css属性用于控制所在层的位置, 默认: -1</li></ol><h2 id="实现点击出现桃心效果"><a href="#实现点击出现桃心效果" class="headerlink" title="实现点击出现桃心效果"></a>实现点击出现桃心效果</h2><p>实现效果图：<br><img src="/img/next_theme_set/love.gif" alt="&quot;添加背景动态&quot;"></p><p>具体实现方法<br>在网址输入如下:<br><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">http:</span><span class="comment">//7u2ss1.com1.z0.glb.clouddn.com/love.js</span></span><br></pre></td></tr></table></figure></p><p>然后将里面的代码copy一下，新建love.js文件并且将代码复制进去，然后保存。将love.js文件放到路径/themes/next/source/js/src里面，然后打开\themes\next\layout_layout.swig文件,在末尾（在前面引用会出现找不到的bug）添加以下代码：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 页面点击小红心 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"/js/src/love.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="修改文章内链接文本样式"><a href="#修改文章内链接文本样式" class="headerlink" title="修改文章内链接文本样式"></a>修改文章内链接文本样式</h2><p><img src="/img/next_theme_set/style.gif" alt="&quot;链接文本样式&quot;"></p><p>具体实现方法<br>修改文件 themes\next\source\css_common\components\post\post.styl ，在末尾添加如下css样式：<br><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 文章内链接文本样式</span></span><br><span class="line"><span class="selector-class">.post-body</span> <span class="selector-tag">p</span> <span class="selector-tag">a</span>&#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#0593d3</span>;</span><br><span class="line">  <span class="attribute">border-bottom</span>: none;</span><br><span class="line">  <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#0593d3</span>;</span><br><span class="line">  &amp;:hover &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#fc6423</span>;</span><br><span class="line">    <span class="attribute">border-bottom</span>: none;</span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#fc6423</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><blockquote><p>其中选择 .post-body 是为了不影响标题，选择 p 是为了不影响首页“阅读全文”的显示样式,颜色可以自己定义。</p></blockquote><h2 id="修改文章底部的那个带-号的标签"><a href="#修改文章底部的那个带-号的标签" class="headerlink" title="修改文章底部的那个带#号的标签"></a>修改文章底部的那个带#号的标签</h2><p>实现效果图:<br><img src="/img/next_theme_set/bot_icon.png" alt="&quot;链接文本样式&quot;"><br>具体实现方法<br>修改模板/themes/next/layout/_macro/post.swig，搜索 rel=”tag”&gt;#，将 # 换成 &lt;i class=”fa fa-tag”&gt;&lt;/i&gt;</p><h2 id="在每篇文章末尾统一添加“本文结束”标记"><a href="#在每篇文章末尾统一添加“本文结束”标记" class="headerlink" title="在每篇文章末尾统一添加“本文结束”标记"></a>在每篇文章末尾统一添加“本文结束”标记</h2><p>实现效果图:<br><img src="/img/next_theme_set/7.png" alt="&quot;添加“本文结束”标记&quot;"></p><p>具体实现方法：<br>在路径 \themes\next\layout_macro 中新建 passage-end-tag.swig 文件,并添加以下内容：<br><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    </span><span class="template-tag">&#123;% <span class="name"><span class="name">if</span></span> not is_index %&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"text-align:center;color: #ccc;font-size:14px;"</span>&gt;</span>-------------本文结束<span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-paw"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span>感谢您的阅读-------------<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    </span><span class="template-tag">&#123;% <span class="name"><span class="name">endif</span></span> %&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p><p>接着打开\themes\next\layout_macro\post.swig文件，在post-body 之后， post-footer 之前添加如下画红色部分代码（post-footer之前两个DIV）：<br><img src="/img/next_theme_set/7_1.png" alt="&quot;马丹，图片不见了~~~&quot;"></p><p>代码如下：<br><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">  </span><span class="template-tag">&#123;% <span class="name"><span class="name">if</span></span> not is_index %&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">    </span><span class="template-tag">&#123;% <span class="name"><span class="name">include</span></span> 'passage-end-tag.swig' %&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">  </span><span class="template-tag">&#123;% <span class="name"><span class="name">endif</span></span> %&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p><p>然后打开主题配置文件（_config.yml),在末尾添加：<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 文章末尾添加“本文结束”标记</span></span><br><span class="line"><span class="attr">passage_end_tag:</span></span><br><span class="line"><span class="attr">  enabled:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></p><p>完成以上设置之后，在每篇文章之后都会添加如上效果图的样子。</p><h2 id="修改作者头像并旋转"><a href="#修改作者头像并旋转" class="headerlink" title="修改作者头像并旋转"></a>修改作者头像并旋转</h2><p>具体实现方法<br>打开\themes\next\source\css_common\components\sidebar\sidebar-author.styl，在里面添加如下代码：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.site-author-image</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">  <span class="attribute">padding</span>: $site-author-image-padding;</span><br><span class="line">  <span class="attribute">max-width</span>: $site-author-image-width;</span><br><span class="line">  <span class="attribute">height</span>: $site-author-image-height;</span><br><span class="line">  <span class="attribute">border</span>: $site-author-image-border-width solid $site-author-image-border-color;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 头像圆形 */</span></span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">80px</span>;</span><br><span class="line">  <span class="attribute">-webkit-border-radius</span>: <span class="number">80px</span>;</span><br><span class="line">  <span class="attribute">-moz-border-radius</span>: <span class="number">80px</span>;</span><br><span class="line">  <span class="attribute">box-shadow</span>: inset <span class="number">0</span> -<span class="number">1px</span> <span class="number">0</span> <span class="number">#333</span>sf;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 设置循环动画 [animation: (play)动画名称 (2s)动画播放时长单位秒或微秒 (ase-out)动画播放的速度曲线为以低速结束 </span></span><br><span class="line"><span class="comment">    (1s)等待1秒然后开始动画 (1)动画播放次数(infinite为循环播放) ]*/</span></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 鼠标经过头像旋转360度 */</span></span><br><span class="line">  <span class="attribute">-webkit-transition</span>: -webkit-transform <span class="number">1.0s</span> ease-out;</span><br><span class="line">  <span class="attribute">-moz-transition</span>: -moz-transform <span class="number">1.0s</span> ease-out;</span><br><span class="line">  <span class="attribute">transition</span>: transform <span class="number">1.0s</span> ease-out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">img</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="comment">/* 鼠标经过停止头像旋转 </span></span><br><span class="line"><span class="comment">  -webkit-animation-play-state:paused;</span></span><br><span class="line"><span class="comment">  animation-play-state:paused;*/</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 鼠标经过头像旋转360度 */</span></span><br><span class="line">  <span class="attribute">-webkit-transform</span>: <span class="built_in">rotateZ</span>(360deg);</span><br><span class="line">  <span class="attribute">-moz-transform</span>: <span class="built_in">rotateZ</span>(360deg);</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">rotateZ</span>(360deg);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Z 轴旋转动画 */</span></span><br><span class="line">@-<span class="keyword">webkit</span>-<span class="keyword">keyframes</span> play &#123;</span><br><span class="line">  0% &#123;</span><br><span class="line">    <span class="attribute">-webkit-transform</span>: <span class="built_in">rotateZ</span>(0deg);</span><br><span class="line">  &#125;</span><br><span class="line">  100% &#123;</span><br><span class="line">    <span class="attribute">-webkit-transform</span>: <span class="built_in">rotateZ</span>(-360deg);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">@-<span class="keyword">moz</span>-<span class="keyword">keyframes</span> play &#123;</span><br><span class="line">  0% &#123;</span><br><span class="line">    <span class="attribute">-moz-transform</span>: <span class="built_in">rotateZ</span>(0deg);</span><br><span class="line">  &#125;</span><br><span class="line">  100% &#123;</span><br><span class="line">    <span class="attribute">-moz-transform</span>: <span class="built_in">rotateZ</span>(-360deg);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">@<span class="keyword">keyframes</span> play &#123;</span><br><span class="line">  0% &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotateZ</span>(0deg);</span><br><span class="line">  &#125;</span><br><span class="line">  100% &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotateZ</span>(-360deg);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="博文压缩"><a href="#博文压缩" class="headerlink" title="博文压缩"></a>博文压缩</h2><p>在站点的根目录下执行以下命令：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm install gulp -g</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> npm install gulp-minify-css gulp-uglify gulp-htmlmin gulp-htmlclean gulp --save</span></span><br></pre></td></tr></table></figure></p><p>在站点的根目录下新建 gulpfile.js ，并填入以下内容：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</span><br><span class="line"><span class="keyword">var</span> minifycss = <span class="built_in">require</span>(<span class="string">'gulp-minify-css'</span>);</span><br><span class="line"><span class="keyword">var</span> uglify = <span class="built_in">require</span>(<span class="string">'gulp-uglify'</span>);</span><br><span class="line"><span class="keyword">var</span> htmlmin = <span class="built_in">require</span>(<span class="string">'gulp-htmlmin'</span>);</span><br><span class="line"><span class="keyword">var</span> htmlclean = <span class="built_in">require</span>(<span class="string">'gulp-htmlclean'</span>);</span><br><span class="line"><span class="comment">// 压缩 public 目录 css</span></span><br><span class="line">gulp.task(<span class="string">'minify-css'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp.src(<span class="string">'./public/**/*.css'</span>)</span><br><span class="line">        .pipe(minifycss())</span><br><span class="line">        .pipe(gulp.dest(<span class="string">'./public'</span>));</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 压缩 public 目录 html</span></span><br><span class="line">gulp.task(<span class="string">'minify-html'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> gulp.src(<span class="string">'./public/**/*.html'</span>)</span><br><span class="line">    .pipe(htmlclean())</span><br><span class="line">    .pipe(htmlmin(&#123;</span><br><span class="line">         removeComments: <span class="literal">true</span>,</span><br><span class="line">         minifyJS: <span class="literal">true</span>,</span><br><span class="line">         minifyCSS: <span class="literal">true</span>,</span><br><span class="line">         minifyURLs: <span class="literal">true</span>,</span><br><span class="line">    &#125;))</span><br><span class="line">    .pipe(gulp.dest(<span class="string">'./public'</span>))</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 压缩 public/js 目录 js</span></span><br><span class="line">gulp.task(<span class="string">'minify-js'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp.src(<span class="string">'./public/**/*.js'</span>)</span><br><span class="line">        .pipe(uglify())</span><br><span class="line">        .pipe(gulp.dest(<span class="string">'./public'</span>));</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 执行 gulp 命令时执行的任务</span></span><br><span class="line">gulp.task(<span class="string">'default'</span>, [</span><br><span class="line">    <span class="string">'minify-html'</span>,<span class="string">'minify-css'</span>,<span class="string">'minify-js'</span></span><br><span class="line">]);</span><br></pre></td></tr></table></figure></p><p>生成博文是执行 hexo g &amp;&amp; gulp 就会根据 gulpfile.js 中的配置，对 public 目录中的静态资源文件进行压缩。</p><h2 id="修改代码块自定义样式"><a href="#修改代码块自定义样式" class="headerlink" title="修改代码块自定义样式"></a>修改代码块自定义样式</h2><p>具体实现方法:<br>打开\themes\next\source\css_custom\custom.styl,向里面加入：(颜色可以自己定义)<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Custom styles.</span></span><br><span class="line"><span class="selector-tag">code</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#ff7600</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#fbf7f8</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">2px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 大代码块的自定义样式</span></span><br><span class="line"><span class="selector-class">.highlight</span>, pre &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">5px</span> <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">3px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.highlight</span>, <span class="selector-tag">code</span>, pre &#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#d6d6d6</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="侧边栏社交小图标设置"><a href="#侧边栏社交小图标设置" class="headerlink" title="侧边栏社交小图标设置"></a>侧边栏社交小图标设置</h2><p>实现效果图:<br><img src="/img/next_theme_set/social_icon.png" alt="&quot;马丹，图片不见了~~~&quot;"></p><p>具体实现方法:<br>打开主题配置文件（_config.yml），搜索social_icons:,在<a href="https://fontawesome.com/icons?from=io" target="_blank" rel="noopener">图标库font awesome</a>找自己喜欢的小图标，并将名字复制在如下位置，保存即可<br><img src="/img/next_theme_set/11.png" alt="&quot;马丹，图片不见了~~~&quot;"></p><h2 id="主页文章添加阴影效果"><a href="#主页文章添加阴影效果" class="headerlink" title="主页文章添加阴影效果"></a>主页文章添加阴影效果</h2><p>具体实现方法:<br>打开\themes\next\source\css_custom\custom.styl,向里面加入：<br><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 主页文章添加阴影效果</span></span><br><span class="line"> <span class="selector-class">.post</span> &#123;</span><br><span class="line">   <span class="attribute">margin-top</span>: <span class="number">60px</span>;</span><br><span class="line">   <span class="attribute">margin-bottom</span>: <span class="number">60px</span>;</span><br><span class="line">   <span class="attribute">padding</span>: <span class="number">25px</span>;</span><br><span class="line">   -webkit-<span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">5px</span> rgba(<span class="number">202</span>, <span class="number">203</span>, <span class="number">203</span>, .<span class="number">5</span>);</span><br><span class="line">   -moz-<span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">5px</span> rgba(<span class="number">202</span>, <span class="number">203</span>, <span class="number">204</span>, .<span class="number">5</span>);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><h2 id="在网站底部加上访问量"><a href="#在网站底部加上访问量" class="headerlink" title="在网站底部加上访问量"></a>在网站底部加上访问量</h2><p><img src="/img/next_theme_set/13.png" alt="&quot;马丹，图片不见了~~~&quot;"><br>具体实现方法:<br>打开\themes\next\layout_partials\footer.swig文件,在copyright前加上画红线这句话：<br><img src="/img/next_theme_set/13_1.png" alt="&quot;马丹，图片不见了~~~&quot;"><br>代码如下：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">async</span> <span class="attr">src</span>=<span class="string">"https://dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>然后再合适的位置添加显示统计的代码，如图：<br><img src="/img/next_theme_set/13_2.png" alt="&quot;马丹，图片不见了~~~&quot;"></p><p>代码如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"powered-by"</span>&gt;</span><br><span class="line">&lt;i <span class="class"><span class="keyword">class</span></span>=<span class="string">"fa fa-user-md"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><span class="xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"busuanzi_container_site_uv"</span>&gt;</span></span></span><br><span class="line"><span class="xml">  本站访客数:<span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"busuanzi_value_site_uv"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br></pre></td></tr></table></figure></p><p>在这里有两中不同计算方式的统计代码：</p><ol><li><p><strong>pv</strong>的方式，单个用户连续点击n篇文章，记录n次访问量</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"busuanzi_container_site_pv"</span>&gt;</span></span><br><span class="line">    本站总访问量<span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"busuanzi_value_site_pv"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span>次</span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>uv</strong>的方式，单个用户连续点击n篇文章，只记录1次访客数</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"busuanzi_container_site_uv"</span>&gt;</span></span><br><span class="line">  本站总访问量<span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"busuanzi_value_site_uv"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span>次</span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><p>添加之后再执行hexo d -g，然后再刷新页面就能看到效果</p><h2 id="添加热度"><a href="#添加热度" class="headerlink" title="添加热度"></a>添加热度</h2><p>实现效果图:<br><img src="/img/next_theme_set/14.png" alt="&quot;马丹，图片不见了~~~&quot;"><br>具体实现方法:<br>next主题集成leanCloud，打开/themes/next/layout/_macro/post.swig,在画红线的区域添加℃：<br><img src="/img/next_theme_set/14_1.png" alt="&quot;马丹，图片不见了~~~&quot;"><br>然后打开，/themes/next/languages/zh-Hans.yml,将画红框的改为热度就可以了<br><img src="/img/next_theme_set/14_2.png" alt="&quot;马丹，图片不见了~~~&quot;"></p><h2 id="网站底部字数统计"><a href="#网站底部字数统计" class="headerlink" title="网站底部字数统计"></a>网站底部字数统计</h2><p>实现效果图:<br><img src="/img/next_theme_set/15.png" alt="&quot;马丹，图片不见了~~~&quot;"><br>具体方法实现:<br>切换到根目录下，然后运行如下代码<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm install hexo-wordcount --save</span></span><br></pre></td></tr></table></figure></p><p>然后在/themes/next/layout/_partials/footer.swig文件尾部加上：<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"theme-info"</span>&gt;</span><br><span class="line">  &lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"powered-by"</span>&gt;&lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">  &lt;span <span class="built_in">class</span>=<span class="string">"post-count"</span>&gt;博客全站共&#123;&#123; totalcount(site) &#125;&#125;字&lt;/span&gt;</span><br><span class="line">&lt;/<span class="keyword">div</span>&gt;</span><br></pre></td></tr></table></figure></p><h2 id="添加-README-md-文件"><a href="#添加-README-md-文件" class="headerlink" title="添加 README.md 文件"></a>添加 README.md 文件</h2><p>每个项目下一般都有一个 README.md 文件，但是使用 hexo 部署到仓库后，项目下是没有 README.md 文件的。<br>在 Hexo 目录下的 source 根目录下添加一个 README.md 文件，修改站点配置文件 _config.yml ，将 skip_render 参数的值设置为<br><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">skip_render:</span> README.md</span><br></pre></td></tr></table></figure></p><p>保存退出即可。再次使用 hexo d 命令部署博客的时候就不会在渲染 README.md 这个文件了。</p><h2 id="设置网站的图标Favicon"><a href="#设置网站的图标Favicon" class="headerlink" title="设置网站的图标Favicon"></a>设置网站的图标Favicon</h2><p>实现效果图<br><img src="/img/next_theme_set/favicon.png" alt="&quot;马丹，图片不见了~~~&quot;"><br>具体方法实现:<br>在<a href="https://www.easyicon.net/" target="_blank" rel="noopener">EasyIcon</a>中找一张（32*32）的ico图标,或者去别的网站下载或者制作，并将图标名称改为favicon.ico，然后把图标放在/themes/next/source/images里，并且修改主题配置文件_config.yml：<br><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># Put your favicon.ico into `hexo-site/source/` directory.</span><br><span class="line">favicon: /favicon.ico</span><br></pre></td></tr></table></figure></p><h2 id="添加顶部加载条"><a href="#添加顶部加载条" class="headerlink" title="添加顶部加载条"></a>添加顶部加载条</h2><p>具体实现方法:<br>打开/themes/next/layout/_partials/head.swig文件，添加红框上的代码<br><img src="/img/next_theme_set/19.png" alt="&quot;马丹，图片不见了~~~&quot;"><br>代码如下：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"//cdn.bootcss.com/pace/1.0.2/pace.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"//cdn.bootcss.com/pace/1.0.2/themes/pink/pace-theme-flash.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>但是，默认的是粉色的，要改变颜色可以在/themes/next/layout/_partials/head.swig文件中添加如下代码（接在刚才link的后面）<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.pace</span> <span class="selector-class">.pace-progress</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">background</span>: <span class="selector-id">#1E92FB</span>; <span class="comment">/*进度条颜色*/</span></span></span><br><span class="line"><span class="undefined">        height: 3px;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.pace</span> <span class="selector-class">.pace-progress-inner</span> &#123;</span></span><br><span class="line"><span class="css">         <span class="selector-tag">box-shadow</span>: 0 0 10<span class="selector-tag">px</span> <span class="selector-id">#1E92FB</span>, 0 0 5<span class="selector-tag">px</span>     <span class="selector-id">#1E92FB</span>; <span class="comment">/*阴影颜色*/</span></span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.pace</span> <span class="selector-class">.pace-activity</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">border-top-color</span>: <span class="selector-id">#1E92FB</span>;    <span class="comment">/*上边框颜色*/</span></span></span><br><span class="line"><span class="css">        <span class="selector-tag">border-left-color</span>: <span class="selector-id">#1E92FB</span>;    <span class="comment">/*左边框颜色*/</span></span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure></p><blockquote><p>目前，博主的增加顶部加载条的pull request 已被Merge?===&gt;详情<br>现在升级最新版的next主题，升级后只需修改主题配置文件(_config.yml)将pace: false改为pace: true就行了，你还可以换不同样式的加载条，如下图：</p></blockquote><p><img src="/img/next_theme_set/19_1.png" alt="&quot;马丹，图片不见了~~~&quot;"></p><h2 id="在文章底部增加版权信息"><a href="#在文章底部增加版权信息" class="headerlink" title="在文章底部增加版权信息"></a>在文章底部增加版权信息</h2><p>实现效果图:<br><img src="/img/next_theme_set/20.png" alt="&quot;马丹，图片不见了~~~&quot;"><br>在目录 next/layout/_macro/下添加 my-copyright.swig：<br><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"></span><span class="template-tag">&#123;% <span class="name"><span class="name">if</span></span> page.copyright %&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"my_post_copyright"</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"//cdn.bootcss.com/clipboard.js/1.5.10/clipboard.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml">  </span></span><br><span class="line"><span class="xml">  <span class="comment">&lt;!-- JS库 sweetalert 可修改路径 --&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/jquery/2.0.0/jquery.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://unpkg.com/sweetalert/dist/sweetalert.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>本文标题:<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"</span></span></span><span class="template-variable">&#123;&#123; url_for(page.path) &#125;&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span></span><span class="template-variable">&#123;&#123; page.title &#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>文章作者:<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/"</span> <span class="attr">title</span>=<span class="string">"访问 </span></span></span><span class="template-variable">&#123;&#123; theme.author &#125;&#125;</span><span class="xml"><span class="tag"><span class="string"> 的个人博客"</span>&gt;</span></span><span class="template-variable">&#123;&#123; theme.author &#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>发布时间:<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><span class="template-variable">&#123;&#123; page.date.format("YYYY年MM月DD日 - HH:MM") &#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>最后更新:<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><span class="template-variable">&#123;&#123; page.updated.format("YYYY年MM月DD日 - HH:MM") &#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>原始链接:<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"</span></span></span><span class="template-variable">&#123;&#123; url_for(page.path) &#125;&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> <span class="attr">title</span>=<span class="string">"</span></span></span><span class="template-variable">&#123;&#123; page.title &#125;&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span></span><span class="template-variable">&#123;&#123; page.permalink &#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"copy-path"</span>  <span class="attr">title</span>=<span class="string">"点击复制文章链接"</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-clipboard"</span> <span class="attr">data-clipboard-text</span>=<span class="string">"</span></span></span><span class="template-variable">&#123;&#123; page.permalink &#125;&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>  <span class="attr">aria-label</span>=<span class="string">"复制成功！"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>许可协议:<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-creative-commons"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> <span class="tag">&lt;<span class="name">a</span> <span class="attr">rel</span>=<span class="string">"license"</span> <span class="attr">href</span>=<span class="string">"https://creativecommons.org/licenses/by-nc-nd/4.0/"</span> <span class="attr">target</span>=<span class="string">"_blank"</span> <span class="attr">title</span>=<span class="string">"Attribution-NonCommercial-NoDerivatives 4.0 International (CC BY-NC-ND 4.0)"</span>&gt;</span>署名-非商业性使用-禁止演绎 4.0 国际<span class="tag">&lt;/<span class="name">a</span>&gt;</span> 转载请保留原文链接及作者。<span class="tag">&lt;/<span class="name">p</span>&gt;</span>  </span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"> </span></span></span><br><span class="line"><span class="xml">    var clipboard = new Clipboard('.fa-clipboard');</span></span><br><span class="line"><span class="xml">      $(".fa-clipboard").click(function()&#123;</span></span><br><span class="line"><span class="xml">      clipboard.on('success', function()&#123;</span></span><br><span class="line"><span class="xml">        swal(&#123;   </span></span><br><span class="line"><span class="xml">          title: "",   </span></span><br><span class="line"><span class="xml">          text: '复制成功',</span></span><br><span class="line"><span class="xml">          icon: "success", </span></span><br><span class="line"><span class="xml">          showConfirmButton: true</span></span><br><span class="line"><span class="xml">          &#125;);</span></span><br><span class="line"><span class="xml">        &#125;);</span></span><br><span class="line"><span class="xml">    &#125;);  </span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span><span class="template-tag">&#123;% <span class="name"><span class="name">endif</span></span> %&#125;</span><span class="xml"></span></span><br></pre></td></tr></table></figure></p><p>在目录next/source/css/_common/components/post/下添加my-post-copyright.styl：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.my_post_copyright</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">85%</span>;</span><br><span class="line">  <span class="attribute">max-width</span>: <span class="number">45em</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">2.8em</span> auto <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0.5em</span> <span class="number">1.0em</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#d3d3d3</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">0.93rem</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">1.6em</span>;</span><br><span class="line">  <span class="attribute">word-break</span>: break-all;</span><br><span class="line">  <span class="attribute">background</span>: rgba(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>,<span class="number">0.4</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.my_post_copyright</span> p&#123;<span class="attribute">margin</span>:<span class="number">0</span>;&#125;</span><br><span class="line"><span class="selector-class">.my_post_copyright</span> <span class="selector-tag">span</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">5.2em</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#b5b5b5</span>;</span><br><span class="line">  <span class="attribute">font-weight</span>: bold;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.my_post_copyright</span> <span class="selector-class">.raw</span> &#123;</span><br><span class="line">  <span class="attribute">margin-left</span>: <span class="number">1em</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">5em</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.my_post_copyright</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#808080</span>;</span><br><span class="line">  <span class="attribute">border-bottom</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.my_post_copyright</span> <span class="selector-tag">a</span>:hover &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#a3d2a3</span>;</span><br><span class="line">  <span class="attribute">text-decoration</span>: underline;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.my_post_copyright</span>:hover <span class="selector-class">.fa-clipboard</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#000</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.my_post_copyright</span> <span class="selector-class">.post-url</span>:hover &#123;</span><br><span class="line">  <span class="attribute">font-weight</span>: normal;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.my_post_copyright</span> <span class="selector-class">.copy-path</span> &#123;</span><br><span class="line">  <span class="attribute">margin-left</span>: <span class="number">1em</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">1em</span>;</span><br><span class="line">  +mobile()&#123;<span class="attribute">display</span>:none;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.my_post_copyright</span> <span class="selector-class">.copy-path</span>:hover &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#808080</span>;</span><br><span class="line">  <span class="attribute">cursor</span>: pointer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>修改next/layout/_macro/post.swig，在代码:</p><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">      </span><span class="template-tag">&#123;% <span class="name"><span class="name">if</span></span> not is_index %&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">        </span><span class="template-tag">&#123;% <span class="name"><span class="name">include</span></span> 'wechat-subscriber.swig' %&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">      </span><span class="template-tag">&#123;% <span class="name"><span class="name">endif</span></span> %&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>之前添加增加如下代码：<br><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">      </span><span class="template-tag">&#123;% <span class="name"><span class="name">if</span></span> not is_index %&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">        </span><span class="template-tag">&#123;% <span class="name"><span class="name">include</span></span> 'my-copyright.swig' %&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">      </span><span class="template-tag">&#123;% <span class="name"><span class="name">endif</span></span> %&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p><p>如下：<br><img src="/img/next_theme_set/20_1.png" alt="&quot;马丹，图片不见了~~~&quot;"><br>修改next/source/css/_common/components/post/post.styl文件，在最后一行增加代码：<br><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">import</span> <span class="string">"my-post-copyright"</span></span><br></pre></td></tr></table></figure></p><p>保存重新生成即可。<br>如果要在该博文下面增加版权信息的显示，需要在 Markdown 中增加copyright: true的设置，类似：</p><blockquote><p><strong>小技巧：</strong>如果你觉得每次都要输入copyright: true很麻烦的话,那么在/scaffolds/post.md文件中添加：</p></blockquote><p><img src="/img/next_theme_set/20_2.png" alt="&quot;马丹，图片不见了~~~&quot;"></p><p>这样每次hexo new “你的内容”之后，生成的md文件会自动把copyright: 加到里面去</p><h2 id="添加网易云跟帖-跟帖关闭，已失效，改为来必力"><a href="#添加网易云跟帖-跟帖关闭，已失效，改为来必力" class="headerlink" title="添加网易云跟帖(跟帖关闭，已失效，改为来必力)"></a>添加网易云跟帖(跟帖关闭，已失效，改为来必力)</h2><p>实现方法：<br>首先在主题_config.yml 文件中添加如下配置：<br><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># Support for LiveRe comments <span class="keyword">system</span>.</span><br><span class="line"># You can get your uid <span class="keyword">from</span> https:<span class="comment">//livere.com/insight/myCode (General web site)</span></span><br><span class="line">livere_uid: your uid <span class="comment">//自己注册的来比力 id</span></span><br></pre></td></tr></table></figure></p><p>然后在 layout/_scripts/third-party/comments/ 目录中添加 livere.swig，文件内容如下：<br><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"></span><span class="template-tag">&#123;% <span class="name"><span class="name">if</span></span> not (theme.duoshuo and theme.duoshuo.shortname) and not theme.duoshuo_shortname and not theme.disqus_shortname and not theme.hypercomments_id and not theme.gentie_productKey %&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">  </span><span class="template-tag">&#123;% <span class="name"><span class="name">if</span></span> theme.livere_uid %&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span></span><br><span class="line"><span class="xml">      (function(d, s) &#123;</span></span><br><span class="line"><span class="xml">        var j, e = d.getElementsByTagName(s)[0];</span></span><br><span class="line"><span class="xml">        if (typeof LivereTower === 'function') &#123; return; &#125;</span></span><br><span class="line"><span class="xml">        j = d.createElement(s);</span></span><br><span class="line"><span class="xml">        j.src = 'https://cdn-city.livere.com/js/embed.dist.js';</span></span><br><span class="line"><span class="xml">        j.async = true;</span></span><br><span class="line"><span class="xml">        e.parentNode.insertBefore(j, e);</span></span><br><span class="line"><span class="xml">      &#125;)(document, 'script');</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml">  </span><span class="template-tag">&#123;% <span class="name"><span class="name">endif</span></span> %&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml"></span><span class="template-tag">&#123;% <span class="name"><span class="name">endif</span></span> %&#125;</span><span class="xml"></span></span><br></pre></td></tr></table></figure></p><p>然后在 layout/_scripts/third-party/comments.swig 文件中追加：<br><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"></span><span class="template-tag">&#123;% <span class="name"><span class="name">include</span></span> './comments/livere.swig' %&#125;</span><span class="xml"></span></span><br></pre></td></tr></table></figure></p><p>最后，在 layout/_partials/comments.swig 文件中条件最后追加 LiveRe 插件是否引用的判断逻辑：<br><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"></span><span class="template-tag">&#123;% <span class="name">elseif</span> theme.livere_uid %&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"lv-container"</span> <span class="attr">data-id</span>=<span class="string">"city"</span> <span class="attr">data-uid</span>=<span class="string">"</span></span></span><span class="template-variable">&#123;&#123; theme.livere_uid &#125;&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span><span class="template-tag">&#123;% <span class="name"><span class="name">endif</span></span> %&#125;</span><span class="xml"></span></span><br></pre></td></tr></table></figure></p><h2 id="隐藏网页底部powered-By-Hexo-强力驱动"><a href="#隐藏网页底部powered-By-Hexo-强力驱动" class="headerlink" title="隐藏网页底部powered By Hexo / 强力驱动"></a>隐藏网页底部powered By Hexo / 强力驱动</h2><p>打开themes/next/layout/_partials/footer.swig,使用”<!-- -->”隐藏之间的代码即可，或者直接删除。位置如图：</p><p><img src="/img/next_theme_set/22.png" alt="&quot;马丹，图片不见了~~~&quot;"></p><h2 id="修改网页底部的桃心"><a href="#修改网页底部的桃心" class="headerlink" title="修改网页底部的桃心"></a>修改网页底部的桃心</h2><p>还是打开themes/next/layout/_partials/footer.swig，找到:<br><img src="/img/next_theme_set/23.png" alt="&quot;马丹，图片不见了~~~&quot;"><br>然后还是在<a href="https://fontawesome.com/icons?from=io" target="_blank" rel="noopener">图标库 font awesome</a>中找到你自己喜欢的图标，然后修改画红线的部分就可以了。</p><h2 id="文章加密访问"><a href="#文章加密访问" class="headerlink" title="文章加密访问"></a>文章加密访问</h2><p>实现效果图:<br><img src="/img/next_theme_set/24.gif" alt="&quot;马丹，图片不见了~~~&quot;"><br>具体实现方法:<br>打开themes-&gt;next-&gt;layout-&gt;_partials-&gt;head.swig文件,在以下位置插入这样一段代码：<br><img src="/img/next_theme_set/24_1.png" alt="&quot;马丹，图片不见了~~~&quot;"><br>代码如下：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript">    (<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">if</span>(<span class="string">'&#123;&#123; page.password &#125;&#125;'</span>)&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">if</span> (prompt(<span class="string">'请输入文章密码'</span>) !== <span class="string">'&#123;&#123; page.password &#125;&#125;'</span>)&#123;</span></span><br><span class="line"><span class="actionscript">                alert(<span class="string">'密码错误！'</span>);</span></span><br><span class="line"><span class="undefined">                history.back();</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;)();</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>然后在文章上写成类似这样：<br><img src="/img/next_theme_set/24_2.png" alt="&quot;马丹，图片不见了~~~&quot;"></p><h2 id="添加jiathis分享"><a href="#添加jiathis分享" class="headerlink" title="添加jiathis分享"></a>添加jiathis分享</h2><p>自定义分享，打开themes/next/layout/_partials/share/jiathis.swig修改画红线部分就可以了</p><p><img src="/img/next_theme_set/25.png" alt="&quot;马丹，图片不见了~~~&quot;"></p><h2 id="博文置顶"><a href="#博文置顶" class="headerlink" title="博文置顶"></a>博文置顶</h2><p>修改 hero-generator-index 插件，把文件：node_modules/hexo-generator-index/lib/generator.js 内的代码替换为：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"><span class="keyword">var</span> pagination = <span class="built_in">require</span>(<span class="string">'hexo-pagination'</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">locals</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> config = <span class="keyword">this</span>.config;</span><br><span class="line">  <span class="keyword">var</span> posts = locals.posts;</span><br><span class="line">    posts.data = posts.data.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(a.top &amp;&amp; b.top) &#123; <span class="comment">// 两篇文章top都有定义</span></span><br><span class="line">            <span class="keyword">if</span>(a.top == b.top) <span class="keyword">return</span> b.date - a.date; <span class="comment">// 若top值一样则按照文章日期降序排</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">return</span> b.top - a.top; <span class="comment">// 否则按照top值降序排</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(a.top &amp;&amp; !b.top) &#123; <span class="comment">// 以下是只有一篇文章top有定义，那么将有top的排在前面（这里用异或操作居然不行233）</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(!a.top &amp;&amp; b.top) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> b.date - a.date; <span class="comment">// 都没定义按照文章日期降序排</span></span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="keyword">var</span> paginationDir = config.pagination_dir || <span class="string">'page'</span>;</span><br><span class="line">  <span class="keyword">return</span> pagination(<span class="string">''</span>, posts, &#123;</span><br><span class="line">    perPage: config.index_generator.per_page,</span><br><span class="line">    layout: [<span class="string">'index'</span>, <span class="string">'archive'</span>],</span><br><span class="line">    format: paginationDir + <span class="string">'/%d/'</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">      __index: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>在文章中添加 top 值，数值越大文章越靠前，如:<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">hexo</span> <span class="string">awesome!</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2017</span><span class="bullet">-11</span><span class="bullet">-22</span> <span class="number">22</span><span class="string">:45:48</span></span><br><span class="line"><span class="attr">tags:</span> <span class="string">技巧</span></span><br><span class="line"><span class="attr">categories:</span> <span class="string">技巧</span></span><br><span class="line"><span class="attr">copyright:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">top:</span> <span class="number">100</span>   </span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure></p><h2 id="修改字体大小"><a href="#修改字体大小" class="headerlink" title="修改字体大小"></a>修改字体大小</h2><p>打开\themes\next\source\css\ _variables\base.styl文件，将$font-size-base改成16px，如下所示：<br><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"><span class="meta-keyword">$font</span>-size-base =16px</span></span><br></pre></td></tr></table></figure></p><h2 id="打赏设置"><a href="#打赏设置" class="headerlink" title="打赏设置"></a>打赏设置</h2><h3 id="修改打赏字体为不闪动"><a href="#修改打赏字体为不闪动" class="headerlink" title="修改打赏字体为不闪动"></a>修改打赏字体为不闪动</h3><p>修改文件next/source/css/_common/components/post/post-reward.styl，然后注释其中的函数wechat:hover和alipay:hover，如下：<br><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 注释文字闪动函数</span></span><br><span class="line"> #wechat:hover p&#123;</span><br><span class="line">    animation: roll 0.1s infinite linear;</span><br><span class="line">    -<span class="ruby">webkit-<span class="symbol">animation:</span> roll <span class="number">0</span>.<span class="number">1</span>s infinite linear;</span></span><br><span class="line"><span class="ruby">    -moz-<span class="symbol">animation:</span> roll <span class="number">0</span>.<span class="number">1</span>s infinite linear;</span></span><br><span class="line"><span class="ruby">&#125;</span></span><br><span class="line"><span class="ruby"> <span class="comment">#alipay:hover p&#123;</span></span></span><br><span class="line"><span class="ruby">   <span class="symbol">animation:</span> roll <span class="number">0</span>.<span class="number">1</span>s infinite linear;</span></span><br><span class="line"><span class="ruby">    -webkit-<span class="symbol">animation:</span> roll <span class="number">0</span>.<span class="number">1</span>s infinite linear;</span></span><br><span class="line"><span class="ruby">    -moz-<span class="symbol">animation:</span> roll <span class="number">0</span>.<span class="number">1</span>s infinite linear;</span></span><br><span class="line"><span class="ruby">&#125;</span></span><br><span class="line"><span class="ruby">*<span class="regexp">/</span></span></span><br></pre></td></tr></table></figure></p><h3 id="增加打赏配置"><a href="#增加打赏配置" class="headerlink" title="增加打赏配置"></a>增加打赏配置</h3><p>找到主题_config.yml配置文件：<br><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">reward_comment:</span> 坚持原创技术分享，您的支持将鼓励我继续创作！</span><br><span class="line"><span class="symbol">wechatpay:</span> 图片链接或图片相对路径</span><br><span class="line"><span class="symbol">alipay:</span> 图片链接或图片相对路径</span><br></pre></td></tr></table></figure></p><p>其信息如下图所示：<br><img src="/img/next_theme_set/donate_set.png" alt="&quot;马丹，图片不见了~~~&quot;"></p><h2 id="侧边栏推荐阅读"><a href="#侧边栏推荐阅读" class="headerlink" title="侧边栏推荐阅读"></a>侧边栏推荐阅读</h2><p>打开主题配置文件_config.yml修改成这样就行了(links里面写你想要的链接):<br><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># Blogrolls</span></span><br><span class="line"><span class="symbol">links_title:</span> 推荐阅读</span><br><span class="line"><span class="meta">#links_layout: block</span></span><br><span class="line"><span class="symbol">links_layout:</span> inline</span><br><span class="line"><span class="symbol">links:</span></span><br><span class="line">  优设: http:<span class="comment">//www.uisdc.com/</span></span><br><span class="line">  张鑫旭: http:<span class="comment">//www.zhangxinxu.com/</span></span><br><span class="line">  Web前端导航: http:<span class="comment">//www.alloyteam.com/nav/</span></span><br><span class="line">  前端书籍资料: http:<span class="comment">//www.36zhen.com/t?id=3448</span></span><br><span class="line">  百度前端技术学院: http:<span class="comment">//ife.baidu.com/</span></span><br><span class="line">  google前端开发基础: http:<span class="comment">//wf.uisdc.com/cn/</span></span><br></pre></td></tr></table></figure></p><h2 id="自定义鼠标样式"><a href="#自定义鼠标样式" class="headerlink" title="自定义鼠标样式"></a>自定义鼠标样式</h2><p>打开themes/next/source/css/_custom/custom.styl,在里面写下如下代码<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 鼠标样式</span></span><br><span class="line">* &#123;</span><br><span class="line">    <span class="attribute">cursor</span>: url(<span class="string">"http://om8u46rmb.bkt.clouddn.com/sword2.ico"</span>),auto<span class="meta">!important</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-pseudo">:active</span> &#123;</span><br><span class="line">    <span class="attribute">cursor</span>: url(<span class="string">"http://om8u46rmb.bkt.clouddn.com/sword1.ico"</span>),auto<span class="meta">!important</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><blockquote><p>其中 url 里面必须是 ico 图片，ico 图片可以上传到网上（我是使用七牛云图床），然后获取外链，复制到 url 里就行了</p></blockquote><h2 id="为博客加上萌萌的宠物"><a href="#为博客加上萌萌的宠物" class="headerlink" title="为博客加上萌萌的宠物"></a>为博客加上萌萌的宠物</h2><p>实现效果图:<br><img src="/img/next_theme_set/31.png" alt="&quot;马丹，图片不见了~~~&quot;"></p><p>具体实现方法:<br>在终端切换到你的博客根路径，然后输入如下代码：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">install</span> -<span class="keyword">save</span> hexo-helper-live2d</span><br></pre></td></tr></table></figure></p><p>然后打开Hexo/blog/themes/next/layout<br>的_layout.swig,将下面代码放到&lt;/body&gt;之前：<br><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; live2d() &#125;&#125;</span><br></pre></td></tr></table></figure></p><p>然后在在 hexo 的 _config.yml 中添加参数：<br><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">live2d:</span></span><br><span class="line"><span class="symbol">  model:</span> wanko</span><br><span class="line"><span class="symbol">  bottom:</span> <span class="number">-30</span></span><br></pre></td></tr></table></figure></p><p>然后hexo clean ，hexo g ，hexo d 就可以看到了。<br><strong>下面是一些model，可以换不同的宠物</strong></p><ol><li>model 模型名称 默认值: z16<ul><li>Gantzert_Felixander</li><li>Epsilon2.1</li><li>haru</li><li>miku</li><li>ni-j</li><li>nico</li><li>nito</li><li>nipsilon</li><li>nietzsche</li><li>shizuku</li><li>tsumiki</li><li>wanko</li><li>z16</li><li>hibiki</li><li>koharu</li><li>haruto</li><li>Unitychan</li><li>tororo</li><li>hijiki</li></ul></li><li>width 宽度 默认值: 150</li><li>height 高度 默认值： 300</li><li>className &lt;canvas&gt;元素的类名 默认值： live2d</li><li>id &lt;canvas&gt; 元素的id 默认值： live2dcanvas</li><li>bottom &lt;canvas&gt; 元素的底部偏移 默认值： -20 如果嫌模型位置不正确 可以调整这个参数</li></ol><blockquote><p><strong>注意：</strong> 由于手机端宠物会遮挡住底部文字，如果不想在手机上显示宠物的话，修改主题配置_config.yml文件，改为如下：</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">live2d:</span></span><br><span class="line"><span class="attr">  model:</span> <span class="string">wanko</span></span><br><span class="line"><span class="attr">  bottom:</span> <span class="bullet">-30</span></span><br><span class="line"><span class="attr">  mobileShow:</span> <span class="literal">false</span> <span class="string">//添加这条表达式</span></span><br></pre></td></tr></table></figure><h2 id="DaoVoice-在线联系"><a href="#DaoVoice-在线联系" class="headerlink" title="DaoVoice 在线联系"></a>DaoVoice 在线联系</h2><p>实现效果图：<br><img src="/img/next_theme_set/32.png" alt="&quot;马丹，图片不见了~~~&quot;"><br>具体实现方法：<br>首先在<a href="https://account.daocloud.io/signin" target="_blank" rel="noopener">daovoice</a>注册账号,注册完成后会得到一个 app_id :<br><img src="/img/next_theme_set/32_1.png" alt="&quot;马丹，图片不见了~~~&quot;"></p><p>记下这个 app_id的值，然后打开/themes/next/layout/_partials/head.swig,写下如下代码：<br><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"></span><span class="template-tag">&#123;% <span class="name"><span class="name">if</span></span> theme.daovoice %&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span></span><br><span class="line"><span class="xml">  (function(i,s,o,g,r,a,m)&#123;i["DaoVoiceObject"]=r;i[r]=i[r]||function()&#123;(i[r].q=i[r].q||[]).push(arguments)&#125;,i[r].l=1*new Date();a=s.createElement(o),m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;a.charset="utf-8";m.parentNode.insertBefore(a,m)&#125;)(window,document,"script",('https:' == document.location.protocol ? 'https:' : 'http:') + "//widget.daovoice.io/widget/0f81ff2f.js","daovoice")</span></span><br><span class="line"><span class="xml">  daovoice('init', &#123;</span></span><br><span class="line"><span class="xml">      app_id: "</span><span class="template-variable">&#123;&#123;theme.daovoice_app_id&#125;&#125;</span><span class="xml">"</span></span><br><span class="line"><span class="xml">    &#125;);</span></span><br><span class="line"><span class="xml">  daovoice('update');</span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span><span class="template-tag">&#123;% <span class="name"><span class="name">endif</span></span> %&#125;</span><span class="xml"></span></span><br></pre></td></tr></table></figure></p><p><img src="/img/next_theme_set/32_2.png" alt="&quot;马丹，图片不见了~~~&quot;"><br>接着打开主题配置文件，在最后写下如下代码：<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Online contact </span></span><br><span class="line"><span class="attr">daovoice:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="attr">daovoice_app_id:</span> <span class="string">这里填你的刚才获得的</span> <span class="string">app_id</span></span><br></pre></td></tr></table></figure></p><p>重新 hexo g ，hexo s 就能看到效果了。</p><blockquote><p>安装成功后可以在DaoVoice 控制台上的聊天设置里设置聊天窗口样式，附上我的设置</p></blockquote><p><img src="/img/next_theme_set/32_3.png" alt="&quot;马丹，图片不见了~~~&quot;"></p><h2 id="点击爆炸效果"><a href="#点击爆炸效果" class="headerlink" title="点击爆炸效果"></a>点击爆炸效果</h2><p>实现效果图：<br><img src="/img/next_theme_set/33.png" alt="&quot;马丹，图片不见了~~~&quot;"><br>实现方法：<br>跟那个红心是差不多的，首先在themes/next/source/js/src里面建一个叫fireworks.js的文件，代码如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">"use strict"</span>;<span class="function"><span class="keyword">function</span> <span class="title">updateCoords</span>(<span class="params">e</span>)</span>&#123;pointerX=(e.clientX||e.touches[<span class="number">0</span>].clientX)-canvasEl.getBoundingClientRect().left,pointerY=e.clientY||e.touches[<span class="number">0</span>].clientY-canvasEl.getBoundingClientRect().top&#125;<span class="function"><span class="keyword">function</span> <span class="title">setParticuleDirection</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">var</span> t=anime.random(<span class="number">0</span>,<span class="number">360</span>)*<span class="built_in">Math</span>.PI/<span class="number">180</span>,a=anime.random(<span class="number">50</span>,<span class="number">180</span>),n=[<span class="number">-1</span>,<span class="number">1</span>][anime.random(<span class="number">0</span>,<span class="number">1</span>)]*a;<span class="keyword">return</span>&#123;<span class="attr">x</span>:e.x+n*<span class="built_in">Math</span>.cos(t),<span class="attr">y</span>:e.y+n*<span class="built_in">Math</span>.sin(t)&#125;&#125;<span class="function"><span class="keyword">function</span> <span class="title">createParticule</span>(<span class="params">e,t</span>)</span>&#123;<span class="keyword">var</span> a=&#123;&#125;;<span class="keyword">return</span> a.x=e,a.y=t,a.color=colors[anime.random(<span class="number">0</span>,colors.length<span class="number">-1</span>)],a.radius=anime.random(<span class="number">16</span>,<span class="number">32</span>),a.endPos=setParticuleDirection(a),a.draw=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;ctx.beginPath(),ctx.arc(a.x,a.y,a.radius,<span class="number">0</span>,<span class="number">2</span>*<span class="built_in">Math</span>.PI,!<span class="number">0</span>),ctx.fillStyle=a.color,ctx.fill()&#125;,a&#125;<span class="function"><span class="keyword">function</span> <span class="title">createCircle</span>(<span class="params">e,t</span>)</span>&#123;<span class="keyword">var</span> a=&#123;&#125;;<span class="keyword">return</span> a.x=e,a.y=t,a.color=<span class="string">"#F00"</span>,a.radius=<span class="number">0.1</span>,a.alpha=<span class="number">0.5</span>,a.lineWidth=<span class="number">6</span>,a.draw=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;ctx.globalAlpha=a.alpha,ctx.beginPath(),ctx.arc(a.x,a.y,a.radius,<span class="number">0</span>,<span class="number">2</span>*<span class="built_in">Math</span>.PI,!<span class="number">0</span>),ctx.lineWidth=a.lineWidth,ctx.strokeStyle=a.color,ctx.stroke(),ctx.globalAlpha=<span class="number">1</span>&#125;,a&#125;<span class="function"><span class="keyword">function</span> <span class="title">renderParticule</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">for</span>(<span class="keyword">var</span> t=<span class="number">0</span>;t&lt;e.animatables.length;t++)&#123;e.animatables[t].target.draw()&#125;&#125;<span class="function"><span class="keyword">function</span> <span class="title">animateParticules</span>(<span class="params">e,t</span>)</span>&#123;<span class="keyword">for</span>(<span class="keyword">var</span> a=createCircle(e,t),n=[],i=<span class="number">0</span>;i&lt;numberOfParticules;i++)&#123;n.push(createParticule(e,t))&#125;anime.timeline().add(&#123;<span class="attr">targets</span>:n,<span class="attr">x</span>:<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">return</span> e.endPos.x&#125;,<span class="attr">y</span>:<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">return</span> e.endPos.y&#125;,<span class="attr">radius</span>:<span class="number">0.1</span>,<span class="attr">duration</span>:anime.random(<span class="number">1200</span>,<span class="number">1800</span>),<span class="attr">easing</span>:<span class="string">"easeOutExpo"</span>,<span class="attr">update</span>:renderParticule&#125;).add(&#123;<span class="attr">targets</span>:a,<span class="attr">radius</span>:anime.random(<span class="number">80</span>,<span class="number">160</span>),<span class="attr">lineWidth</span>:<span class="number">0</span>,<span class="attr">alpha</span>:&#123;<span class="attr">value</span>:<span class="number">0</span>,<span class="attr">easing</span>:<span class="string">"linear"</span>,<span class="attr">duration</span>:anime.random(<span class="number">600</span>,<span class="number">800</span>)&#125;,<span class="attr">duration</span>:anime.random(<span class="number">1200</span>,<span class="number">1800</span>),<span class="attr">easing</span>:<span class="string">"easeOutExpo"</span>,<span class="attr">update</span>:renderParticule,<span class="attr">offset</span>:<span class="number">0</span>&#125;)&#125;<span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">e,t</span>)</span>&#123;<span class="keyword">var</span> a;<span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">var</span> n=<span class="keyword">this</span>,i=<span class="built_in">arguments</span>;clearTimeout(a),a=setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;e.apply(n,i)&#125;,t)&#125;&#125;<span class="keyword">var</span> canvasEl=<span class="built_in">document</span>.querySelector(<span class="string">".fireworks"</span>);<span class="keyword">if</span>(canvasEl)&#123;<span class="keyword">var</span> ctx=canvasEl.getContext(<span class="string">"2d"</span>),numberOfParticules=<span class="number">30</span>,pointerX=<span class="number">0</span>,pointerY=<span class="number">0</span>,tap=<span class="string">"mousedown"</span>,colors=[<span class="string">"#FF1461"</span>,<span class="string">"#18FF92"</span>,<span class="string">"#5A87FF"</span>,<span class="string">"#FBF38C"</span>],setCanvasSize=debounce(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;canvasEl.width=<span class="number">2</span>*<span class="built_in">window</span>.innerWidth,canvasEl.height=<span class="number">2</span>*<span class="built_in">window</span>.innerHeight,canvasEl.style.width=<span class="built_in">window</span>.innerWidth+<span class="string">"px"</span>,canvasEl.style.height=<span class="built_in">window</span>.innerHeight+<span class="string">"px"</span>,canvasEl.getContext(<span class="string">"2d"</span>).scale(<span class="number">2</span>,<span class="number">2</span>)&#125;,<span class="number">500</span>),render=anime(&#123;<span class="attr">duration</span>:<span class="number">1</span>/<span class="number">0</span>,<span class="attr">update</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;ctx.clearRect(<span class="number">0</span>,<span class="number">0</span>,canvasEl.width,canvasEl.height)&#125;&#125;);<span class="built_in">document</span>.addEventListener(tap,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;<span class="string">"sidebar"</span>!==e.target.id&amp;&amp;<span class="string">"toggle-sidebar"</span>!==e.target.id&amp;&amp;<span class="string">"A"</span>!==e.target.nodeName&amp;&amp;<span class="string">"IMG"</span>!==e.target.nodeName&amp;&amp;(render.play(),updateCoords(e),animateParticules(pointerX,pointerY))&#125;,!<span class="number">1</span>),setCanvasSize(),<span class="built_in">window</span>.addEventListener(<span class="string">"resize"</span>,setCanvasSize,!<span class="number">1</span>)&#125;<span class="string">"use strict"</span>;<span class="function"><span class="keyword">function</span> <span class="title">updateCoords</span>(<span class="params">e</span>)</span>&#123;pointerX=(e.clientX||e.touches[<span class="number">0</span>].clientX)-canvasEl.getBoundingClientRect().left,pointerY=e.clientY||e.touches[<span class="number">0</span>].clientY-canvasEl.getBoundingClientRect().top&#125;<span class="function"><span class="keyword">function</span> <span class="title">setParticuleDirection</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">var</span> t=anime.random(<span class="number">0</span>,<span class="number">360</span>)*<span class="built_in">Math</span>.PI/<span class="number">180</span>,a=anime.random(<span class="number">50</span>,<span class="number">180</span>),n=[<span class="number">-1</span>,<span class="number">1</span>][anime.random(<span class="number">0</span>,<span class="number">1</span>)]*a;<span class="keyword">return</span>&#123;<span class="attr">x</span>:e.x+n*<span class="built_in">Math</span>.cos(t),<span class="attr">y</span>:e.y+n*<span class="built_in">Math</span>.sin(t)&#125;&#125;<span class="function"><span class="keyword">function</span> <span class="title">createParticule</span>(<span class="params">e,t</span>)</span>&#123;<span class="keyword">var</span> a=&#123;&#125;;<span class="keyword">return</span> a.x=e,a.y=t,a.color=colors[anime.random(<span class="number">0</span>,colors.length<span class="number">-1</span>)],a.radius=anime.random(<span class="number">16</span>,<span class="number">32</span>),a.endPos=setParticuleDirection(a),a.draw=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;ctx.beginPath(),ctx.arc(a.x,a.y,a.radius,<span class="number">0</span>,<span class="number">2</span>*<span class="built_in">Math</span>.PI,!<span class="number">0</span>),ctx.fillStyle=a.color,ctx.fill()&#125;,a&#125;<span class="function"><span class="keyword">function</span> <span class="title">createCircle</span>(<span class="params">e,t</span>)</span>&#123;<span class="keyword">var</span> a=&#123;&#125;;<span class="keyword">return</span> a.x=e,a.y=t,a.color=<span class="string">"#F00"</span>,a.radius=<span class="number">0.1</span>,a.alpha=<span class="number">0.5</span>,a.lineWidth=<span class="number">6</span>,a.draw=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;ctx.globalAlpha=a.alpha,ctx.beginPath(),ctx.arc(a.x,a.y,a.radius,<span class="number">0</span>,<span class="number">2</span>*<span class="built_in">Math</span>.PI,!<span class="number">0</span>),ctx.lineWidth=a.lineWidth,ctx.strokeStyle=a.color,ctx.stroke(),ctx.globalAlpha=<span class="number">1</span>&#125;,a&#125;<span class="function"><span class="keyword">function</span> <span class="title">renderParticule</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">for</span>(<span class="keyword">var</span> t=<span class="number">0</span>;t&lt;e.animatables.length;t++)&#123;e.animatables[t].target.draw()&#125;&#125;<span class="function"><span class="keyword">function</span> <span class="title">animateParticules</span>(<span class="params">e,t</span>)</span>&#123;<span class="keyword">for</span>(<span class="keyword">var</span> a=createCircle(e,t),n=[],i=<span class="number">0</span>;i&lt;numberOfParticules;i++)&#123;n.push(createParticule(e,t))&#125;anime.timeline().add(&#123;<span class="attr">targets</span>:n,<span class="attr">x</span>:<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">return</span> e.endPos.x&#125;,<span class="attr">y</span>:<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">return</span> e.endPos.y&#125;,<span class="attr">radius</span>:<span class="number">0.1</span>,<span class="attr">duration</span>:anime.random(<span class="number">1200</span>,<span class="number">1800</span>),<span class="attr">easing</span>:<span class="string">"easeOutExpo"</span>,<span class="attr">update</span>:renderParticule&#125;).add(&#123;<span class="attr">targets</span>:a,<span class="attr">radius</span>:anime.random(<span class="number">80</span>,<span class="number">160</span>),<span class="attr">lineWidth</span>:<span class="number">0</span>,<span class="attr">alpha</span>:&#123;<span class="attr">value</span>:<span class="number">0</span>,<span class="attr">easing</span>:<span class="string">"linear"</span>,<span class="attr">duration</span>:anime.random(<span class="number">600</span>,<span class="number">800</span>)&#125;,<span class="attr">duration</span>:anime.random(<span class="number">1200</span>,<span class="number">1800</span>),<span class="attr">easing</span>:<span class="string">"easeOutExpo"</span>,<span class="attr">update</span>:renderParticule,<span class="attr">offset</span>:<span class="number">0</span>&#125;)&#125;<span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">e,t</span>)</span>&#123;<span class="keyword">var</span> a;<span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">var</span> n=<span class="keyword">this</span>,i=<span class="built_in">arguments</span>;clearTimeout(a),a=setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;e.apply(n,i)&#125;,t)&#125;&#125;<span class="keyword">var</span> canvasEl=<span class="built_in">document</span>.querySelector(<span class="string">".fireworks"</span>);<span class="keyword">if</span>(canvasEl)&#123;<span class="keyword">var</span> ctx=canvasEl.getContext(<span class="string">"2d"</span>),numberOfParticules=<span class="number">30</span>,pointerX=<span class="number">0</span>,pointerY=<span class="number">0</span>,tap=<span class="string">"mousedown"</span>,colors=[<span class="string">"#FF1461"</span>,<span class="string">"#18FF92"</span>,<span class="string">"#5A87FF"</span>,<span class="string">"#FBF38C"</span>],setCanvasSize=debounce(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;canvasEl.width=<span class="number">2</span>*<span class="built_in">window</span>.innerWidth,canvasEl.height=<span class="number">2</span>*<span class="built_in">window</span>.innerHeight,canvasEl.style.width=<span class="built_in">window</span>.innerWidth+<span class="string">"px"</span>,canvasEl.style.height=<span class="built_in">window</span>.innerHeight+<span class="string">"px"</span>,canvasEl.getContext(<span class="string">"2d"</span>).scale(<span class="number">2</span>,<span class="number">2</span>)&#125;,<span class="number">500</span>),render=anime(&#123;<span class="attr">duration</span>:<span class="number">1</span>/<span class="number">0</span>,<span class="attr">update</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;ctx.clearRect(<span class="number">0</span>,<span class="number">0</span>,canvasEl.width,canvasEl.height)&#125;&#125;);<span class="built_in">document</span>.addEventListener(tap,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;<span class="string">"sidebar"</span>!==e.target.id&amp;&amp;<span class="string">"toggle-sidebar"</span>!==e.target.id&amp;&amp;<span class="string">"A"</span>!==e.target.nodeName&amp;&amp;<span class="string">"IMG"</span>!==e.target.nodeName&amp;&amp;(render.play(),updateCoords(e),animateParticules(pointerX,pointerY))&#125;,!<span class="number">1</span>),setCanvasSize(),<span class="built_in">window</span>.addEventListener(<span class="string">"resize"</span>,setCanvasSize,!<span class="number">1</span>)&#125;;</span><br></pre></td></tr></table></figure></p><p>打开themes/next/layout/_layout.swig,在&lt;/body&gt;上面写下如下代码：<br><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"></span><span class="template-tag">&#123;% <span class="name"><span class="name">if</span></span> theme.fireworks %&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">   <span class="tag">&lt;<span class="name">canvas</span> <span class="attr">class</span>=<span class="string">"fireworks"</span> <span class="attr">style</span>=<span class="string">"position: fixed;left: 0;top: 0;z-index: 1; pointer-events: none;"</span> &gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span> </span></span><br><span class="line"><span class="xml">   <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"//cdn.bootcss.com/animejs/2.2.0/anime.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> </span></span><br><span class="line"><span class="xml">   <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"/js/src/fireworks.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span><span class="template-tag">&#123;% <span class="name"><span class="name">endif</span></span> %&#125;</span><span class="xml"></span></span><br></pre></td></tr></table></figure></p><p>打开主题配置文件，在里面最后写下：<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Fireworks</span></span><br><span class="line"><span class="attr">fireworks:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></p><h2 id="参考的文章："><a href="#参考的文章：" class="headerlink" title="参考的文章："></a>参考的文章：</h2><ol><li><a href="https://segmentfault.com/a/1190000009544924#articleHeader17" target="_blank" rel="noopener">https://segmentfault.com/a/1190000009544924#articleHeader17</a></li><li><a href="https://blog.csdn.net/MasterAnt_D/article/details/56839222" target="_blank" rel="noopener">https://blog.csdn.net/MasterAnt_D/article/details/56839222</a></li><li><a href="http://www.vitah.net/posts/20f300cc/" target="_blank" rel="noopener">http://www.vitah.net/posts/20f300cc/</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;在右上角或者左上角实现fork-me-on-github&quot;&gt;&lt;a href=&quot;#在右上角或者左上角实现fork-me-on-github&quot; class=&quot;headerlink&quot; title=&quot;在右上角或者左上角实现fork me on github&quot;&gt;&lt;/a&gt;在右上角或者左上角实现fork me on github&lt;/h2&gt;&lt;p&gt;具体实现方法&lt;br&gt;点击&lt;a href=&quot;https://blog.github.com/2008-12-19-github-ribbons/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;这里&lt;/a&gt;挑选自己喜欢的样式，并复制代码:&lt;br&gt;&lt;img src=&quot;/img/next_theme_set/fork_on_github.png&quot; alt=&quot;&amp;quot;fork me on github图标&amp;quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="hexo" scheme="https://chongdee.github.io/categories/hexo/"/>
    
    
      <category term="hexo" scheme="https://chongdee.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>vue</title>
    <link href="https://chongdee.github.io/2018/07/10/vue/"/>
    <id>https://chongdee.github.io/2018/07/10/vue/</id>
    <published>2018-07-10T07:40:55.000Z</published>
    <updated>2018-07-10T23:45:16.938Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><div class="note primary"><p>Content (md partial supported) </p></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=&quot;\assets\js\APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;div class=&quot;note primary&quot;&gt;&lt;p&gt;Content (md partial supported) &lt;/p&gt;&lt;/div&gt;

      
    
    </summary>
    
      <category term="Vue" scheme="https://chongdee.github.io/categories/Vue/"/>
    
    
      <category term="Vue" scheme="https://chongdee.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Markdown快速入门</title>
    <link href="https://chongdee.github.io/2017/12/05/Markdown/"/>
    <id>https://chongdee.github.io/2017/12/05/Markdown/</id>
    <published>2017-12-05T09:46:36.000Z</published>
    <updated>2018-07-11T15:22:38.217Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h1 id="Markdown快速入门"><a href="#Markdown快速入门" class="headerlink" title="Markdown快速入门"></a>Markdown快速入门</h1><h2 id="一、认识Markdown"><a href="#一、认识Markdown" class="headerlink" title="一、认识Markdown"></a>一、认识Markdown</h2><blockquote><p>Markdown是一种轻量级标记语言，创始人为约翰·格鲁伯（John Gruber）。它允许人们“使用易读易写的纯文本格式编写文档，然后转换成有效的XHTML（或者HTML）文档”。这种语言吸收了很多在电子邮件中已有的纯文本标记的特性。<br>Markdown的语法全由一些符号所组成，这些符号经过精挑细选，其作用一目了然。<br><a id="more"></a></p><h2 id="二、入门语法"><a href="#二、入门语法" class="headerlink" title="二、入门语法"></a>二、入门语法</h2><ol><li>标题 <figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 一级标题</span><br><span class="line">## 二级标题</span><br><span class="line">### 三级标题</span><br><span class="line">#### 四级标题</span><br><span class="line">##### 五级标题</span><br><span class="line">###### 六级标题</span><br></pre></td></tr></table></figure></li></ol></blockquote><ol><li><p>列表<br> 分为有序列表和无序列表。<br> <strong>有序列表</strong></p> <figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>  #<span class="number">1.</span> 点后面留一个空格</span><br><span class="line"><span class="number">2.</span>  #<span class="number">2.</span> 点后面留一个空格</span><br><span class="line"><span class="number">3.</span>  #<span class="number">3.</span> 点后面留一个空格</span><br></pre></td></tr></table></figure><p> <strong>无序列表</strong></p><blockquote><p>-或*  浏览器显示实心或空心圆</p></blockquote></li><li><p>引用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> 这是引用</span></span><br></pre></td></tr></table></figure></li><li><p>图片和链接<br>两者格式区别在于“ ! ”。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">![<span class="string">图片描述</span>](<span class="link">图片链接</span>)</span><br><span class="line">[<span class="string">链接描述</span>](<span class="link">链接地址</span>)</span><br></pre></td></tr></table></figure></li><li><p>粗体和斜体</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">*<span class="strong">*这是粗体*</span><span class="strong">*</span></span><br><span class="line"><span class="strong">*</span>这是斜体<span class="strong">*</span></span><br></pre></td></tr></table></figure></li><li><p>表格</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="params">| Tables |</span> Are <span class="params">| Cool |</span></span><br><span class="line"><span class="params">| ------------ |</span><span class="symbol">:------------</span><span class="symbol">:|</span> -----<span class="symbol">:|</span></span><br><span class="line"><span class="params">| col 3 is |</span> right-aligned<span class="params">| $1600 |</span></span><br><span class="line"><span class="params">| col 2 is |</span> centered <span class="params">| $12 |</span></span><br><span class="line"><span class="params">| zebra stripes|</span> are neat <span class="params">| &amp;1 |</span></span><br></pre></td></tr></table></figure></li><li><p>代码框</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">用 上 ```，下```` 符号把代码包裹起来</span><br></pre></td></tr></table></figure></li><li><p>分割线</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">输入 <span class="emphasis">***</span> 即可。</span><br></pre></td></tr></table></figure></li><li><p>下划线</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">输入</span> <span class="meta">---</span> <span class="string">即可</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="Markdown命令图"><a href="#Markdown命令图" class="headerlink" title="Markdown命令图"></a>Markdown命令图</h2><p><img src="/img/command.png" alt="&quot;markdown命令图&quot;"></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Markdown快速入门&quot;&gt;&lt;a href=&quot;#Markdown快速入门&quot; class=&quot;headerlink&quot; title=&quot;Markdown快速入门&quot;&gt;&lt;/a&gt;Markdown快速入门&lt;/h1&gt;&lt;h2 id=&quot;一、认识Markdown&quot;&gt;&lt;a href=&quot;#一、认识Markdown&quot; class=&quot;headerlink&quot; title=&quot;一、认识Markdown&quot;&gt;&lt;/a&gt;一、认识Markdown&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Markdown是一种轻量级标记语言，创始人为约翰·格鲁伯（John Gruber）。它允许人们“使用易读易写的纯文本格式编写文档，然后转换成有效的XHTML（或者HTML）文档”。这种语言吸收了很多在电子邮件中已有的纯文本标记的特性。&lt;br&gt;Markdown的语法全由一些符号所组成，这些符号经过精挑细选，其作用一目了然。&lt;br&gt;
    
    </summary>
    
      <category term="tutorial" scheme="https://chongdee.github.io/categories/tutorial/"/>
    
    
      <category term="Markdown教程" scheme="https://chongdee.github.io/tags/Markdown%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Hexo + Github Pages搭建个人博客教程</title>
    <link href="https://chongdee.github.io/2017/12/05/hexoTutorial/"/>
    <id>https://chongdee.github.io/2017/12/05/hexoTutorial/</id>
    <published>2017-12-05T09:31:55.000Z</published>
    <updated>2018-07-11T15:25:06.841Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这是一篇有关如何使用Github Pages和Hexo搭建自己独立博客的详尽教程，里面介绍了如何使用和配置Hexo框架，如何将Hexo部署到自己的Github项目中，域名注册，以及域名的绑定，还有我在搭建自己博客过程中所遇到的各种困难。<br><a id="more"></a></p><h2 id="关于Github"><a href="#关于Github" class="headerlink" title="关于Github"></a>关于Github</h2><h3 id="一、Github的优点"><a href="#一、Github的优点" class="headerlink" title="一、Github的优点"></a>一、Github的优点</h3><ul><li>GitHub是基于git实现的代码托管。git可能是目前最好用的版本控制系统了，非常受欢迎。</li><li>GitHub可以免费使用，并且快速稳定。</li><li>Github上面的世界很精彩，用久了你的眼界会开阔很多。</li></ul><h3 id="二、什么是Github-Pages"><a href="#二、什么是Github-Pages" class="headerlink" title="二、什么是Github Pages"></a>二、什么是Github Pages</h3><p>Github Pages可以被认为是用户编写的、托管在github上的静态网页。</p><h3 id="三、为什么要使用Github-Pages"><a href="#三、为什么要使用Github-Pages" class="headerlink" title="三、为什么要使用Github Pages"></a>三、为什么要使用Github Pages</h3><ul><li>可以绑定你的域名(但暂时貌似只能绑定一个)。</li><li>简单快捷，使用Github Pages可以为你提供一个免费的服务器，免去了自己搭建服务器和写数据库的麻烦。</li></ul><h2 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h2><p>在 Windows 环境下安装 Node.js 非常简单，仅须到<a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">官网下载</a>安装文件并执行即可完成安装。ps:根据自己的Windows位数选择下载安装，无脑的下一步就行，不需要配置环境变量。</p><h2 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h2><ol><li>去<a href="https://git-scm.com/downloads" target="_blank" rel="noopener">Git官网</a>根据你的电脑系统，下载对应版本。</li><li>下载完成，通过在命令行输入 git version 查看是否安装成功，有输出版本号说明安装成功。</li><li>鼠标邮件菜单里就多了Git GUI Here和Git Bash Here两个按钮，一个是图形界面的Git操作，一个是命令行，我们选择Git Bash Here。<ul><li>安装教程：<a href="https://jingyan.baidu.com/article/90895e0fb3495f64ed6b0b50.html" target="_blank" rel="noopener">如何在windows下安装Git</a></li><li>Git入门教程：<a href="https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="noopener">廖雪峰的git教程</a></li></ul></li></ol><p><strong>Git基本操作</strong></p><ul><li>git clone：#将远程仓库复制到本地：git clone #项目地址</li><li>git init：#新建一个仓库</li><li>git pull：#抓取远程仓库所有分支更新并合并到本地</li><li>git add：#跟踪新文件（把目标文件放入暂存区域）git add #文件名/文件夹,如果是跟踪全部修改过的文件：git add –all</li><li>git commit：#提交你的修改：git commit –m “写你提交的文件备注”</li><li>git push：#推送你本地仓库的更新到远程仓库，语法：git push [远程名] [本地分支]:[远程分支]</li></ul><h2 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h2><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p><h3 id="一、Hexo安装"><a href="#一、Hexo安装" class="headerlink" title="一、Hexo安装"></a>一、Hexo安装</h3><p>桌面右键鼠标，点击Git Bash Here，输入npm命令即可安装<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-<span class="keyword">cli</span> -<span class="keyword">g</span>  <span class="comment">//安装hexo</span></span><br><span class="line">npm install hexo-deployer-git --<span class="keyword">save</span>  <span class="comment">//安装hexo部署到git page的deployer</span></span><br></pre></td></tr></table></figure></p><h3 id="二、Hexo初始化配置"><a href="#二、Hexo初始化配置" class="headerlink" title="二、Hexo初始化配置"></a>二、Hexo初始化配置</h3><ol><li><p>创建Hexo文件夹<br>安装完成后，根据自己喜好建立目录（如E:\Blog\Hexo），直接进入E:\Blog\Hexo文件夹下右键鼠标，点击Git Bash Here，进入Git命令框，执行以下操作。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hexo init</span></span><br></pre></td></tr></table></figure></li><li><p>本地查看效果<br>执行下面语句，执行完即可登录localhost:4000查看效果</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo <span class="keyword">generate</span></span><br><span class="line">hexo server</span><br></pre></td></tr></table></figure></li></ol><h2 id="将博客部署到Github-Pages上"><a href="#将博客部署到Github-Pages上" class="headerlink" title="将博客部署到Github Pages上"></a>将博客部署到Github Pages上</h2><p>那么现在本地的博客已经搭建起来了，但是我们只可以通过本地连接查看我们的博客。那么我们现在需要做的就是把本地的博客发布到服务器上，让别人也可以连接我们的博客，而Github Pages就帮我完成了这件事情。但是Github Pages的代码就是寄存在Github上面的。那么接下来我们需要在Github上面创建一个新的项目。</p><h3 id="一、注册Github账户"><a href="#一、注册Github账户" class="headerlink" title="一、注册Github账户"></a>一、注册Github账户</h3><ol><li>访问<a href="https://github.com/" target="_blank" rel="noopener">Github首页</a></li><li>点击Sign up，注册自己的账户</li></ol><h3 id="二、创建项目代码库"><a href="#二、创建项目代码库" class="headerlink" title="二、创建项目代码库"></a>二、创建项目代码库</h3><ol><li>注册完登陆后，我们就创建一个我们自己的Github Pages项目。点击New repository。如下图：<br><img src="/img/how-to-create-reposity.png" alt="&quot;GitHub page配置图&quot;"></li></ol><h3 id="三、配置SSH密钥"><a href="#三、配置SSH密钥" class="headerlink" title="三、配置SSH密钥"></a>三、配置SSH密钥</h3><p>配置Github的SSH密钥可以让本地git项目与远程的github建立联系，让我们在本地写了代码之后直接通过git操作就可以实现本地代码库与Github代码库同步。操作如下：</p><h4 id="第一步、看看是否存在SSH密钥-keys"><a href="#第一步、看看是否存在SSH密钥-keys" class="headerlink" title="第一步、看看是否存在SSH密钥(keys)"></a>第一步、看看是否存在SSH密钥(keys)</h4><p>首先，我们需要看看是否看看本机是否存在SSH keys,打开Git Bash,并运行:<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> ~/. ssh</span></span><br></pre></td></tr></table></figure></p><p>检查你本机用户home目录下是否存在.ssh目录</p><p>如果，不存在此目录，则进行第二步操作，否则，你本机已经存在ssh公钥和私钥，可以略过第二步，直接进入第三步操作。</p><h4 id="第二步、创建一对新的SSH密钥-keys"><a href="#第二步、创建一对新的SSH密钥-keys" class="headerlink" title="第二步、创建一对新的SSH密钥(keys)"></a>第二步、创建一对新的SSH密钥(keys)</h4><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ssh-keygen -t rsa -C <span class="string">"your_email@example.com"</span></span><br><span class="line"><span class="meta">#这将按照你提供的邮箱地址，创建一对密钥</span></span><br><span class="line">Generating <span class="keyword">public</span>/<span class="keyword">private</span> rsa <span class="keyword">key</span> pair.</span><br><span class="line">Enter file <span class="keyword">in</span> which <span class="keyword">to</span> save the <span class="keyword">key</span> (/c/Users/you/.ssh/id_rsa): [Press enter]</span><br></pre></td></tr></table></figure><p>直接回车，则将密钥按默认文件进行存储。此时也可以输入特定的文件名，比如/c/Users/you/.ssh/github_rsa</p><p>接着，根据提示，你需要输入密码和确认密码（说到这里，如果你很放心，其实可以不用密码，就是到输密码的地方，都直接回车，所以每次push就只管回车就行了。所谓的最安全的密码，就是没有密码 哈哈）。相关提示如下：<br><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Enter passphrase (empty <span class="keyword">for</span> no passphrase): [<span class="keyword">Type</span> <span class="type">a </span>passphrase]</span><br><span class="line">Enter same passphrase again: [<span class="keyword">Type</span> <span class="type">passphrase </span>again]</span><br></pre></td></tr></table></figure></p><p>输入完成之后，屏幕会显示如下信息：<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Your identification has been saved <span class="keyword">in</span> <span class="regexp">/c/</span>Users<span class="regexp">/you/</span>.ssh/id_rsa.</span><br><span class="line">Your <span class="keyword">public</span> key has been saved <span class="keyword">in</span> <span class="regexp">/c/</span>Users<span class="regexp">/you/</span>.ssh/id_rsa.pub.</span><br><span class="line">The key fingerprint <span class="string">is:</span></span><br><span class="line"><span class="number">01</span>:<span class="number">0</span><span class="string">f:</span><span class="string">f4:</span><span class="number">3</span><span class="string">b:</span><span class="string">ca:</span><span class="number">85</span>:<span class="string">d6:</span><span class="number">17</span>:<span class="string">a1:</span><span class="number">7</span><span class="string">d:</span><span class="string">f0:</span><span class="number">68</span>:<span class="number">9</span><span class="string">d:</span><span class="string">f0:</span><span class="string">a2:</span>db your_email<span class="meta">@example</span>.com</span><br></pre></td></tr></table></figure></p><h4 id="第三步、在GitHub账户中添加你的公钥"><a href="#第三步、在GitHub账户中添加你的公钥" class="headerlink" title="第三步、在GitHub账户中添加你的公钥"></a>第三步、在GitHub账户中添加你的公钥</h4><p>运行如下命令，将公钥的内容复制到系统粘贴板(clipboard)中。<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">clip &lt; ~<span class="regexp">/.ssh/i</span>d_rsa.pub</span><br></pre></td></tr></table></figure></p><p>上面操作完后：</p><ol><li>登陆GitHub,进入你的Account Settings:<br><img src="/img/SSH-github-setting.png" alt="&quot;Account Settings&quot;"></li><li>选择SSH Keys:<br><img src="/img/SSH-github-setting-SSH.png" alt="&quot;SSH Keys&quot;"></li><li>粘贴密钥，添加即可:<br><img src="/img/SSH-github-SSH-OK.png" alt="&quot;SSH Keys&quot;"></li></ol><h4 id="第四步、测试"><a href="#第四步、测试" class="headerlink" title="第四步、测试"></a>第四步、测试</h4><p>可以输入下面的命令，看看设置是否成功，git@github.com的部分不要修改：<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>ssh -T git<span class="variable">@github</span>.com</span><br></pre></td></tr></table></figure></p><p>如果是下面的反馈：<br><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">The authenticity <span class="keyword">of</span> host <span class="comment">'github.com (207.97.227.239)' can't be established.</span></span><br><span class="line">RSA <span class="keyword">key</span> fingerprint <span class="keyword">is</span> <span class="number">16</span>:<span class="number">27</span>:ac:a5:<span class="number">76</span>:<span class="number">28</span>:<span class="number">2</span>d:<span class="number">36</span>:<span class="number">63</span>:<span class="number">1</span>b:<span class="number">56</span>:<span class="number">4</span>d:eb:df:a6:<span class="number">48.</span></span><br><span class="line">Are you sure you want <span class="keyword">to</span> <span class="keyword">continue</span> connecting (yes/no)?</span><br></pre></td></tr></table></figure></p><p>不要紧张，输入yes就设置好了</p><h4 id="第五步、设置用户信息-SSH-Key配置成功"><a href="#第五步、设置用户信息-SSH-Key配置成功" class="headerlink" title="第五步、设置用户信息,SSH Key配置成功"></a>第五步、设置用户信息,SSH Key配置成功</h4><p>现在你已经可以通过SSH链接到GitHub了，还有一些个人信息需要完善的。 Git会根据用户的名字和邮箱来记录提交。GitHub也是用这些信息来做权限的处理，输入下面的代码进行个人信息的设置，把名称和邮箱替换成你自己的，名字根据自己的喜好自己取，而不是GitHub的昵称。<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user<span class="selector-class">.name</span> <span class="string">"ryanlijianchang"</span><span class="comment">//用户名</span></span><br><span class="line">$ git config --global user<span class="selector-class">.email</span>  <span class="string">"liji.anchang@163.com"</span><span class="comment">//填写自己的邮箱</span></span><br></pre></td></tr></table></figure></p><h4 id="第六步、本地的Hexo文件更新到Github库中"><a href="#第六步、本地的Hexo文件更新到Github库中" class="headerlink" title="第六步、本地的Hexo文件更新到Github库中"></a>第六步、本地的Hexo文件更新到Github库中</h4><p>本机已成功连接到github。<br>第一步、登录Github打开自己的项目 username.github.io<br>第二步、打开之后，点击SSH，选择SSH类型地址<br>第三步、复制地址<br>第四步、打开你一开始创建的Hexo文件夹（如E:\Blog\Hexo），用记事本打开刚文件夹下的_config.yml文件<br>第五步、在配置文件里作如下修改，保存<br> <img src="/img/hexo_config.jpg" alt="&quot;SSH Keys&quot;"><br>第六步、在Hexo文件夹下执行：<br><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">hexo g</span></span><br><span class="line"><span class="attribute">hexo d</span></span><br></pre></td></tr></table></figure></p><p>或者直接执行<br><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g -d  <span class="comment">//同上命令一样功能</span></span><br></pre></td></tr></table></figure></p><p>执行完之后会让你输入github的账号和密码，输入完后就可以登录我们自己的部署在Github Pages服务器上的博客了。对应的地址是 username.github.io(我的是：ryanlijianchang.github.io)。</p><p>假如这时候，报错 ERROR Deployer not found: git，那么就是你的deployer没有安装成功，你需要执行如下命令再安装一次：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">install</span> hexo-deployer-git <span class="comment">--save</span></span><br></pre></td></tr></table></figure></p><p>这样，你再执行hexo g -d，你的博客就部署到Github上了。</p><p>第七步、在浏览器上输入自己的主页地址</p><p>在浏览器上输入Github Pager为我们生成的外链（例如我的是：<strong><a href="https://chongdee.github.io/">https://chongdee.github.io</a></strong>，而你的只需要把你的github用户名替换掉这个链接中的chongdee，因为我的用户名是这个，那么你自己的专属博客地址就是：<strong><a href="https://[您的用户名].github.io/" target="_blank" rel="noopener">https://[您的用户名].github.io/</a></strong>）即可看到自己的博客了。</p><p>当然，每一个人都可以通过这个地址访问到你的博客了。</p><h2 id="美化自己博客"><a href="#美化自己博客" class="headerlink" title="美化自己博客"></a>美化自己博客</h2><p>那么现在我们的博客已经挂在了Github服务器上面，别人已经可以通过地址来登陆我们的博客了，但是我们这时就有了新的需求，就是自己的博客并不好看，那怎么办的？这很简单，要知道很多前端开发者在Hexo框架下开发了很多的主题给我们使用，我们只需要把他们的主题克隆过来，然后通过修改配置文件即可达到我们所需要的效果。</p><p>那么我们应该怎么修改呢？<br><strong>一、进入<a href="https://hexo.io/themes/" target="_blank" rel="noopener">Hexo的官网主题专栏</a></strong><br><strong>二、挑选我们喜欢的主题</strong><br>可以看到有很多主题给我们选，我们只要选择喜欢的主题点击进去，然后进入到它的github地址，我们只要把这个地址复制下来(例如我是选择：hexo-theme-next这个主题)<br><strong>三、克隆主题</strong><br>再打开Hexo文件夹下的themes目录（E:\Blog\hexo\themes），右键Git Bash，在命令行输入:<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https:<span class="regexp">//gi</span>thub.com<span class="regexp">/iissnan/</span>hexo-theme-<span class="keyword">next</span>(此处地址替换成你需要使用的主题的地址)</span><br></pre></td></tr></table></figure></p><p>下载中，等待下载完成<br><strong>四、修改Hexo配置文件</strong><br>下载完成后，打开Hexo文件夹下的配置文件_config.yml<br>修改参数为：theme: hexo-theme-next<br><strong>五、部署主题，本地查看效果</strong><br>返回Hexo目录，右键Git Bash，输入<br><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">hexo g</span></span><br><span class="line"><span class="attribute">hexo s</span></span><br></pre></td></tr></table></figure></p><p>打开浏览器，输入 <a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a> 即可看见我们的主题已经更换了。<br><strong>六、如果效果满意，将它部署到Github上</strong><br>打开Hexo文件夹，右键Git Bash，输入<br><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo <span class="built_in">clean</span>   (必须要，不然有时因为缓存问题，服务器更新不了主题)</span><br><span class="line">hexo g -d</span><br></pre></td></tr></table></figure></p><p><strong>七、打开自己的主页输入 <a href="http://localhost:4000/，" target="_blank" rel="noopener">http://localhost:4000/，</a> 即可看到修改后的效果</strong></p><h2 id="hexo博客添加图片，音乐，视频"><a href="#hexo博客添加图片，音乐，视频" class="headerlink" title="hexo博客添加图片，音乐，视频"></a>hexo博客添加图片，音乐，视频</h2><ol><li><p>插入外部链接图片</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![<span class="string">“图片描述”</span>](<span class="link">“图片地址”</span>)</span><br></pre></td></tr></table></figure></li><li><p>添加本地图片<br>在\hexo\source目录下新建文件夹，命名为img或者其他你喜欢的名字，然后编辑你的md博文，插入下面的代码样式：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![<span class="string">“图片描述”</span>](<span class="link">/img/你的图片名字.[图片扩展名]</span>)</span><br></pre></td></tr></table></figure></li><li><p>添加音乐</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">frameborder</span>=<span class="string">"no"</span> <span class="attr">border</span>=<span class="string">"0"</span> <span class="attr">marginwidth</span>=<span class="string">"0"</span> <span class="attr">marginheight</span>=<span class="string">"0"</span> <span class="attr">width</span>=<span class="string">330</span> <span class="attr">height</span>=<span class="string">86</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">src</span>=<span class="string">"http://music.163.com/outchain/player?type=2&amp;id=25706282&amp;auto=0&amp;height=66"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><blockquote><p><strong>侧边栏音乐播放器:</strong> 插入音乐(next主题侧边栏插入网易音乐播放器)<br>比如网易云音乐，找到喜欢的歌曲，点击分享按钮，把里面的代码复制下来，直接粘贴到博文中即可–ps:以next主题为例<a href="http://weqeo.com/2016/10/11/Hexo%E4%B8%AD%E6%92%AD%E6%94%BE%E7%BD%91%E6%98%93%E4%BA%91%E9%9F%B3%E4%B9%90%E7%9A%84%E5%AE%9E%E8%B7%B5/" target="_blank" rel="noopener">在主题中侧边栏插入网易音乐教程</a></p><ol><li>插入视频<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Idina Menze和Caleb Hyles激情对唱Let It Go：</span><br><span class="line"><span class="tag">&lt;<span class="name">iframe</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">height</span>=<span class="string">498</span> <span class="attr">width</span>=<span class="string">510</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">src</span>=<span class="string">"http://player.youku.com/embed/XNjcyMDU4Njg0"</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">frameborder</span>=<span class="string">0</span> <span class="attr">allowfullscreen</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol></blockquote><h2 id="在博客写文章"><a href="#在博客写文章" class="headerlink" title="在博客写文章"></a>在博客写文章</h2><p>一、用hexo发表新文章<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hexo n <span class="string">"文章标题"</span></span></span><br></pre></td></tr></table></figure></p><p>其中 我的家 为文章标题，执行命令 hexo n “hello hexo” 后，会在项目 \Hexo\source_posts 中生成 hello hexo.md文件，用编辑器打开编写即可。</p><p>当然，也可以直接在\Hexo\source_posts中新建一个md文件，我就是这么做的。 写完后，推送到服务器上，执行以下命令即可在我们的站点看到新的文章。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hexo g <span class="comment">#生成</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> hexo d <span class="comment">#部署 # 可与hexo g合并为 hexo d -g</span></span></span><br></pre></td></tr></table></figure></p><p>二、用Markdown写文章<br>我们注意到在 \Hexo\source_posts 文件夹下存放着我们的文章，它们的格式都是以.md格式结尾的，没错，Hexo也是支持Markdown语法的，所以当我们需要写具有格式化的文章时，我们可以使用支持Markdown语法的编辑器进行文章编译，然后保存文件到 \Hexo\source_posts 文件夹下即可。<br>复制进去之后，只要执行<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hexo d -g</span></span><br></pre></td></tr></table></figure></p><p>推送到我们的Github仓库即可。</p><h2 id="markdown介绍"><a href="#markdown介绍" class="headerlink" title="markdown介绍"></a>markdown介绍</h2><ol><li>那么什么是Markdown？<br> Markdown 是一种轻量级的「标记语言」，它的优点很多，目前也被越来越多的写作爱好者，撰稿者广泛使用。看到这里请不要被「标记」、「语言」所迷惑，Markdown 的语法十分简单。常用的标记符号也不超过十个，这种相对于更为复杂的HTML 标记语言来说，Markdown 可谓是十分轻量的，学习成本也不需要太多，且一旦熟悉这种语法规则，会有一劳永逸的效果。</li><li>Markdown有什么优点？<ul><li>专注你的文字内容而不是排版样式。</li><li>轻松的导出 HTML、PDF 和本身的 .md 文件。</li><li>纯文本内容，兼容所有的文本编辑器与字处理软件。</li><li>可读，直观。适合所有人的写作语言。</li></ul></li></ol><p><strong>markdown在线工具</strong><br><a href="http://note.youdao.com/iyoudao/?p=2411&amp;vendor=unsilent14" target="_blank" rel="noopener">有道云markdown指南</a><br><a href="https://maxiang.io/" target="_blank" rel="noopener">马克飞象，专为印象笔记打造的 Markdown 编辑器，非常推荐</a></p><h2 id="Hexo常用命令"><a href="#Hexo常用命令" class="headerlink" title="Hexo常用命令"></a>Hexo常用命令</h2><p><strong><a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">hexo官方文档</a></strong><br><strong>hexo</strong><br><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">npm</span> install hexo -g <span class="comment">#安装</span></span><br><span class="line"><span class="built_in">npm</span> update hexo -g <span class="comment">#更新</span></span><br><span class="line">hexo init <span class="comment">#初始化</span></span><br></pre></td></tr></table></figure></p><p><strong>草稿</strong><br><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo publish [layout] <span class="params">&lt;title&gt;</span> <span class="meta">#发表草稿。</span></span><br></pre></td></tr></table></figure></p><p><strong>写作</strong><br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">hexo</span> n <span class="string">"name"</span> <span class="comment">#新建文章</span></span><br><span class="line">hexo g <span class="comment">#生成静态网页</span></span><br><span class="line">hexo p <span class="comment">#发表草稿。</span></span><br><span class="line">hexo s <span class="comment">#启动服务</span></span><br><span class="line">hexo d <span class="comment">#部署网站 参数：-g 部署之前先生成静态文件。</span></span><br></pre></td></tr></table></figure></p><p><strong>服务器</strong><br>Hexo 3.0 把服务器独立成了个别模块，您必须先安装才能使用。<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-server --save #安装服务</span><br><span class="line">    </span><br><span class="line">hexo s #启动服务</span><br><span class="line">hexo<span class="built_in"> server </span>-p 5000 #更改端口</span><br><span class="line">hexo s -s #静态模式</span><br><span class="line">hexo s -i 192.168.1.1 #自定义ip</span><br><span class="line">    </span><br><span class="line">hexo clean #清除缓存</span><br></pre></td></tr></table></figure></p><p><strong>部署</strong><br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">hexo</span> d -g</span><br><span class="line">hexo g -d <span class="comment">#同上</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;这是一篇有关如何使用Github Pages和Hexo搭建自己独立博客的详尽教程，里面介绍了如何使用和配置Hexo框架，如何将Hexo部署到自己的Github项目中，域名注册，以及域名的绑定，还有我在搭建自己博客过程中所遇到的各种困难。&lt;br&gt;
    
    </summary>
    
      <category term="tutorial" scheme="https://chongdee.github.io/categories/tutorial/"/>
    
    
      <category term="hexo" scheme="https://chongdee.github.io/tags/hexo/"/>
    
      <category term="Hexo教程" scheme="https://chongdee.github.io/tags/Hexo%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>ES6手册</title>
    <link href="https://chongdee.github.io/2017/12/05/ES6%E6%89%8B%E5%86%8C/"/>
    <id>https://chongdee.github.io/2017/12/05/ES6手册/</id>
    <published>2017-12-05T07:05:56.546Z</published>
    <updated>2018-07-11T15:27:03.107Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2 id="var-和-let-const-的比较"><a href="#var-和-let-const-的比较" class="headerlink" title="var 和 let/const 的比较"></a>var 和 let/const 的比较</h2><div class="note info"><p> 除了 var ，我们现在还可以使用两个新的标识符来定义一个变量 — let 和 const。<br>和 var 不一样的是，let 和 const 不存在变量提升。 </p></div><a id="more"></a><p>使用var的栗子：<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">'global'</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFood</span><span class="params">(food)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (food) &#123;</span><br><span class="line">        <span class="keyword">var</span> name = <span class="string">'local'</span>;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line">getFood(<span class="literal">false</span>); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure></p><p>当我们用 let 代替 var 的时候，观察会发生什么：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">'global'</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFood</span>(<span class="params">food</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (food) &#123;</span><br><span class="line">        <span class="keyword">let</span> name = <span class="string">'local'</span>;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line">getFood(<span class="literal">false</span>); <span class="comment">// 'global'</span></span><br></pre></td></tr></table></figure></p><p>当我们重构使用 var 的老代码的时候应该注意上面的变化。盲目地使用 let 替换 var 可能会出现出乎意料的情况。</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(x); <span class="regexp">//</span> ReferenceError: x <span class="keyword">is</span> <span class="keyword">not</span> defined</span><br><span class="line">let x = <span class="string">'hi'</span>;</span><br></pre></td></tr></table></figure><div class="note warning"><p><strong>注意：</strong> let 和 const 是块级作用域，因此在变量未被定义之前使用它会产生一个 ReferenceError。 </p></div><div class="note info"><p><strong>最佳实践：</strong> 在早前代码中使用 var 声明意味着需要很小心地编写代码；而当在新的项目编写代码，使用 let 声明一个可以改变的变量，用 const(常量)声明一个不能被重新赋值的变量。 </p></div><h2 id="用块级作用域代替-IIFES"><a href="#用块级作用域代替-IIFES" class="headerlink" title="用块级作用域代替 IIFES"></a>用块级作用域代替 IIFES</h2><div class="note info"><p><strong>函数立即执行表达式</strong>的常见用法是创造一个闭包作用域的函数，在 ES6 中，我们能够创造一个块级作用域<br>而不单单限于函数作用域。 </p></div><p>IIFES：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> name = <span class="string">'ChaChaHui'</span>;</span><br><span class="line">&#125;());</span><br><span class="line"><span class="built_in">console</span>.log(name); <span class="comment">// Reference Error</span></span><br></pre></td></tr></table></figure></p><p>使用 ES6 的块级作用域：<br><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    let <span class="built_in">name</span> = <span class="string">'ChaChaHui'</span>;</span><br><span class="line">&#125;</span><br><span class="line">console.<span class="built_in">log</span>(<span class="built_in">name</span>); <span class="comment">// Reference Error</span></span><br></pre></td></tr></table></figure></p><h2 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h2><p>我们经常需要给嵌套函数维护一个作用域的上下文 <strong>this</strong>。<br>看看这个栗子：<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span><span class="params">(name)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line">Person.prototype.prefixName = <span class="function"><span class="keyword">function</span> <span class="params">(arr)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> arr.map(<span class="function"><span class="keyword">function</span> <span class="params">(character)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name + character; <span class="comment">// Cannot read property 'name' of undefined</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>一个常用的解决办法是把 <strong>this</strong> 存在一个变量中：<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span><span class="params">(name)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line">Person.prototype.prefixName = <span class="function"><span class="keyword">function</span> <span class="params">(arr)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> that = <span class="keyword">this</span>; <span class="comment">// Store the context of this</span></span><br><span class="line">    <span class="keyword">return</span> arr.map(<span class="function"><span class="keyword">function</span> <span class="params">(character)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> that.name + character;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>我们也可以传递一个合适的 <strong>this</strong> 上下文：<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span><span class="params">(name)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line">Person.prototype.prefixName = <span class="function"><span class="keyword">function</span> <span class="params">(arr)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> arr.map(<span class="function"><span class="keyword">function</span> <span class="params">(character)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name + character;</span><br><span class="line">    &#125;, <span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>我们还可以绑定上下文：<br><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span></span> Person(<span class="keyword">name</span>) &#123;</span><br><span class="line">    this.<span class="keyword">name</span> = <span class="keyword">name</span>;</span><br><span class="line">&#125;</span><br><span class="line">Person.prototype.prefixName = <span class="function"><span class="keyword">function</span></span> (arr) &#123;</span><br><span class="line">    <span class="keyword">return</span> arr.map(<span class="function"><span class="keyword">function</span></span> (<span class="keyword">character</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> this.<span class="keyword">name</span> + <span class="keyword">character</span>;</span><br><span class="line">    &#125;.<span class="keyword">bind</span>(this));</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>使用 <strong>箭头函数</strong>，<strong>this</strong> 将不会受到影响，并且我们可以重写上面的函数：</p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span></span> Person(<span class="keyword">name</span>) &#123;</span><br><span class="line">    this.<span class="keyword">name</span> = <span class="keyword">name</span>;</span><br><span class="line">&#125;</span><br><span class="line">Person.prototype.prefixName = <span class="function"><span class="keyword">function</span></span> (arr) &#123;</span><br><span class="line">    <span class="keyword">return</span> arr.map(<span class="keyword">character</span> =&gt; this.<span class="keyword">name</span> + <span class="keyword">character</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><div class="note info"><p><strong>最佳实践:</strong>当你需要维护一个 <strong>this</strong> 上下文的时候，如在回调函数中推荐使用箭头函数，这样就可以绑定上下文 <strong>this</strong></p></div><p>在我们写一个函数的时候，箭头函数更加简洁并且可以很简单地返回一个值：<br><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var squares = arr.map(<span class="keyword">function</span> <span class="title"></span>(x) &#123; <span class="keyword">return</span> <span class="type">x</span> * x &#125;); // <span class="keyword">Function</span> <span class="title">Expression</span></span><br></pre></td></tr></table></figure></p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">const arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line">const squares = arr.map(x =&gt; x * x); <span class="comment">// Arrow Function for terser implementation</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>最佳实践:</strong>尽可能的使用箭头函数代替原来的写法。</p></blockquote><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><p>在 ES6 中，标准库升级了很多，在这些变化中有许多新的字符串方法，比如 .includes( ) 和 .repeat( )。<br><strong>.includes()</strong><br><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">var</span> <span class="built_in">string</span> = <span class="string">'food'</span>;</span><br><span class="line"><span class="built_in">var</span> substring = <span class="string">'foo'</span>;</span><br><span class="line">console.<span class="keyword">log</span>(<span class="built_in">string</span>.indexOf(substring) &gt; <span class="number">-1</span>);</span><br></pre></td></tr></table></figure></p><p>之前我们使用 <strong>.indexOf( )</strong> 函数的返回值是否 &gt;-1 来判断字符串是否包含某些字符串，现在我们更简单地使用 <strong>.includes ( )</strong>来返回一个布尔值来判断：<br><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">const <span class="keyword">string</span> = <span class="string">'food'</span>;</span><br><span class="line">const <span class="keyword">substring</span> = <span class="string">'foo'</span>;</span><br><span class="line">console.<span class="keyword">log</span>(<span class="keyword">string</span>.includes(<span class="keyword">substring</span>)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure></p><p><strong>.repeat( )</strong><br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">function <span class="keyword">repeat</span>(<span class="built_in">string</span>, <span class="built_in">count</span>) &#123;</span><br><span class="line">    var strings = [];</span><br><span class="line">    <span class="keyword">while</span>(strings.<span class="built_in">length</span> &lt; <span class="built_in">count</span>) &#123;</span><br><span class="line">        strings.push(<span class="built_in">string</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="built_in">    return</span> strings.join('');</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在 ES6 中，可以更简便地实现：<br><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// String.repeat(numberOfRepetitions)</span></span><br><span class="line"><span class="string">'meow'</span>.<span class="keyword">repeat</span><span class="comment">(3)</span>; <span class="comment">// 'meowmeowmeow'</span></span><br></pre></td></tr></table></figure></p><h3 id="模板字符串"><a href="#模板字符串" class="headerlink" title="模板字符串"></a>模板字符串</h3><p>使用<strong>模版字符串</strong>我们就可以不用对某些特殊字符进行转义处理了：<br><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var <span class="keyword">text</span> = <span class="string">"This string contains \"</span><span class="built_in">double</span> quotes\<span class="string">" which are escaped."</span>;</span><br></pre></td></tr></table></figure></p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">let <span class="built_in">text</span> = `This <span class="built_in">string</span> <span class="keyword">contains</span> <span class="string">"double quotes"</span> which don't need <span class="keyword">to</span> be escaped anymore.`;</span><br></pre></td></tr></table></figure><p><strong>模板字符串</strong>还支持插入，可以把变量值和字符串连接起来。<br><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="keyword">name</span> = <span class="string">'Tiger'</span>;</span><br><span class="line"><span class="keyword">var</span> age = <span class="number">13</span>;</span><br><span class="line">console.log(<span class="string">'My cat is named '</span> + <span class="keyword">name</span> + <span class="string">' and is '</span> + age + <span class="string">' years old.'</span>);</span><br></pre></td></tr></table></figure></p><p>ES6语法更简单：<br><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">name</span> = <span class="string">'Tiger'</span>;</span><br><span class="line"><span class="keyword">const</span> age = <span class="number">13</span>;</span><br><span class="line">console.log(`My cat <span class="keyword">is</span> named $<span class="comment">&#123;name&#125;</span> <span class="keyword">and</span> <span class="keyword">is</span> $<span class="comment">&#123;age&#125;</span> years old.`);</span><br></pre></td></tr></table></figure></p><p>在 ES5 中，需要换行时，需要这样：<br><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">var text</span> = (</span><br><span class="line">    <span class="string">'cat\n'</span> +</span><br><span class="line">    <span class="string">'dog\n'</span> +</span><br><span class="line">    <span class="string">'nickelodeon'</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure></p><p>或者这样：<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> text = [</span><br><span class="line">    <span class="string">'cat'</span>,</span><br><span class="line">    <span class="string">'dog'</span>,</span><br><span class="line">    <span class="string">'nickelodeon'</span></span><br><span class="line">].<span class="keyword">join</span>(<span class="string">'\n'</span>);</span><br></pre></td></tr></table></figure></p><p><strong>模板字符串</strong>可以支持换行并且不需要额外的处理：<br><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> text = ( `cat</span><br><span class="line">dog</span><br><span class="line">nickelodeon`</span><br><span class="line">);</span><br></pre></td></tr></table></figure></p><p><strong>模板字符串</strong>还支持表达式：<br><figure class="highlight vbscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> today = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="keyword">let</span> text = `The <span class="built_in">time</span> <span class="keyword">and</span> <span class="built_in">date</span> <span class="keyword">is</span> $&#123;today.toLocaleString()&#125;`;</span><br></pre></td></tr></table></figure></p><h2 id="解构"><a href="#解构" class="headerlink" title="解构"></a>解构</h2><p>解构可以让我们用一个更简便的语法从一个数组或者对象（即使是深层的）中分离出来值，并存储他们。</p><h3 id="解构数组"><a href="#解构数组" class="headerlink" title="解构数组"></a>解构数组</h3><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">var arr</span> = [1, 2, 3, 4];</span><br><span class="line"><span class="attribute">var a</span> = arr[0];</span><br><span class="line"><span class="attribute">var b</span> = arr[1];</span><br><span class="line"><span class="attribute">var c</span> = arr[2];</span><br><span class="line"><span class="attribute">var d</span> = arr[3];</span><br></pre></td></tr></table></figure><p>数组解构赋值：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let [a, b, c, d] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line">console.log(a); <span class="comment">// 1</span></span><br><span class="line">console.log(b); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure></p><h3 id="解构对象"><a href="#解构对象" class="headerlink" title="解构对象"></a>解构对象</h3><h4 id="最基本的解构"><a href="#最基本的解构" class="headerlink" title="最基本的解构"></a>最基本的解构</h4><p>ES5:<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> luke = &#123; occupation: <span class="string">'jedi'</span>, father: <span class="string">'anakin'</span> &#125;;</span><br><span class="line"><span class="keyword">var</span> occupation = luke.occupation; <span class="comment">// 'jedi'</span></span><br><span class="line"><span class="keyword">var</span> father = luke.father; <span class="comment">// 'anakin'</span></span><br></pre></td></tr></table></figure></p><p>对象解构赋值：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> luke = &#123; <span class="attr">occupation</span>: <span class="string">'jedi'</span>, <span class="attr">father</span>: <span class="string">'anakin'</span> &#125;;</span><br><span class="line"><span class="keyword">let</span> &#123;occupation, father&#125; = luke;</span><br><span class="line"><span class="built_in">console</span>.log(occupation); <span class="comment">// 'jedi'</span></span><br><span class="line"><span class="built_in">console</span>.log(father); <span class="comment">// 'anakin'</span></span><br></pre></td></tr></table></figure></p><h4 id="解构并使用别名"><a href="#解构并使用别名" class="headerlink" title="解构并使用别名"></a>解构并使用别名</h4><p>有时接口定义的字段往往带有下划线，但我们的前端更便好于驼峰式命名，那么可以使用别名(rename)：<br><figure class="highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> user = &#123;</span><br><span class="line">  <span class="attribute">id:</span><span class="string"> 123,</span></span><br><span class="line"><span class="string">  nick_name</span>: <span class="string">'hehe'</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="title">const</span> &#123;<span class="attribute">nick_name</span>: nickName&#125; = user;</span><br><span class="line"><span class="built_in">console</span>.log(nickName); <span class="comment">//prints: hehe</span></span><br></pre></td></tr></table></figure></p><h4 id="解构嵌套对象"><a href="#解构嵌套对象" class="headerlink" title="解构嵌套对象"></a>解构嵌套对象</h4><p>有时我们会遇到嵌套对象，如果我们了解未足够多时，会写出这种解构：<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> user = &#123;</span><br><span class="line">  id: <span class="number">123</span>,</span><br><span class="line">  name: <span class="string">'hehe'</span>,</span><br><span class="line">  education: &#123;</span><br><span class="line">    degree: <span class="string">'Masters'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 假设我们要提取degree</span></span><br><span class="line"><span class="keyword">const</span> &#123;education&#125; = user;</span><br><span class="line"><span class="keyword">const</span> &#123;degree&#125; = education;</span><br></pre></td></tr></table></figure></p><p>我们会写两行，一层层的剥开，明显繁琐，如果这个对象有三四层结构那简直无法入目。其实可以用解构一步到位的：<br><figure class="highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> user = &#123;</span><br><span class="line">  <span class="attribute">id:</span><span class="string"> 123,</span></span><br><span class="line"><span class="string">  name</span>: <span class="string">'hehe'</span>,</span><br><span class="line">  <span class="attribute">education</span>: &#123;</span><br><span class="line">    <span class="attribute">degree</span>: <span class="string">'Masters'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title">const</span> &#123;<span class="attribute">education</span>: &#123;degree&#125;&#125; = user;</span><br><span class="line"><span class="built_in">console</span>.log(degree); <span class="comment">//prints: Masters</span></span><br></pre></td></tr></table></figure></p><p>没错，就是比别名方法多了一个{ }</p><blockquote><p><strong>如果没有外层怎么办</strong></p></blockquote><p>假设要解构的数据是由接口返回的，由于某种原因会导致某个字段丢失。我们会往往遇到这种意外：<br><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">const user = &#123;</span><br><span class="line">  id: <span class="number">123</span>,</span><br><span class="line">  name: <span class="string">'hehe'</span></span><br><span class="line">&#125;;</span><br><span class="line">const &#123;education: &#123;degree&#125;&#125; = user;  // TypeError: Cannot match against <span class="string">'undefined'</span> or <span class="string">'null'</span>.</span><br></pre></td></tr></table></figure></p><p>这时你是否会觉得还是我们原始的方法好使：<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">const education =<span class="built_in"> user </span>|| &#123;&#125;;</span><br><span class="line">const degree = education.degree;</span><br></pre></td></tr></table></figure></p><p>其实，神奇的解构可以让你定义一个缺省值，这样，我们不仅可以达到数据防御的目的，而且告别啰嗦的写法了：<br><figure class="highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> user = &#123;</span><br><span class="line">  <span class="attribute">id:</span><span class="string"> 123,</span></span><br><span class="line"><span class="string">  name</span>: <span class="string">'hehe'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title">const</span> &#123;</span><br><span class="line">    <span class="attribute">education</span>: &#123;</span><br><span class="line">        degree</span><br><span class="line">    &#125; = &#123;&#125;</span><br><span class="line">&#125; = user;</span><br><span class="line"><span class="built_in">console</span>.log(degree); <span class="comment">//prints: undefined</span></span><br></pre></td></tr></table></figure></p><p>这明显是一股清流啊。</p><blockquote><p><strong>更深层次的对象怎么办？</strong></p></blockquote><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">const user = &#123;</span><br><span class="line">  id: <span class="number">123</span>,</span><br><span class="line">  <span class="built_in">name</span>: <span class="string">'hehe'</span></span><br><span class="line">&#125;;</span><br><span class="line">const &#123;</span><br><span class="line">    education: &#123;</span><br><span class="line">        school: &#123;</span><br><span class="line">            <span class="built_in">name</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125; = &#123;</span><br><span class="line">        school: &#123;</span><br><span class="line">            <span class="built_in">name</span>: <span class="string">'NB'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; = user;</span><br><span class="line">console.<span class="built_in">log</span>(<span class="built_in">name</span>); <span class="comment">//prints: NB</span></span><br></pre></td></tr></table></figure><p>这样整体给education设置一个缺省值，可读性更强，这又是一股清流。<br>在代码中灵活使用解构不仅可以使代码简洁可读，而且逼格大大提升。</p><h2 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h2><p>在 ES6 之前，我们使用<strong>Browserify</strong>这样的库来创建客户端的模块化，在<strong>node.js</strong>中使用<strong>require</strong>。<br>在 ES6 中，我们可以直接使用所有类型的模块化（AMD 和 CommonJS）。</p><h3 id="使用CommonJS的导出"><a href="#使用CommonJS的导出" class="headerlink" title="使用CommonJS的导出"></a>使用CommonJS的导出</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">module</span>.<span class="keyword">exports</span> = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">module</span>.<span class="keyword">exports</span> = &#123; foo: <span class="string">'bar'</span> &#125;;</span><br><span class="line"><span class="keyword">module</span>.<span class="keyword">exports</span> = [<span class="string">'foo'</span>, <span class="string">'bar'</span>];</span><br><span class="line"><span class="keyword">module</span>.<span class="keyword">exports</span> = <span class="function">function <span class="title">bar</span> <span class="params">()</span> </span>&#123;&#125;;</span><br></pre></td></tr></table></figure><h3 id="使用ES6的导出"><a href="#使用ES6的导出" class="headerlink" title="使用ES6的导出"></a>使用ES6的导出</h3><p>在ES6中我们可以暴露多个值，使用<strong>exports</strong>：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> <span class="built_in">let</span> name = <span class="string">'David'</span>;</span><br><span class="line"><span class="built_in">export</span> <span class="built_in">let</span> age  = 25;​​</span><br></pre></td></tr></table></figure></p><p>或者暴露一个对象列表：<br><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title">sumTwo</span>(a, b) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="type">a</span> + b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title">sumThree</span>(a, b, c) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="type">a</span> + b + c;</span><br><span class="line">&#125;</span><br><span class="line">export &#123; sumTwo, sumThree &#125;;</span><br></pre></td></tr></table></figure></p><p>我们还可以暴露函数、对象和其他的值，通过简单地使用 export 这个关键字：<br><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">export <span class="keyword">function</span> <span class="title">sumTwo</span>(a, b) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="type">a</span> + b;</span><br><span class="line">&#125;</span><br><span class="line">export <span class="keyword">function</span> <span class="title">sumThree</span>(a, b, c) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="type">a</span> + b + c;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>最后，我们还可以绑定一个默认的输出：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sumTwo</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sumThree</span>(<span class="params">a, b, c</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b + c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> api = &#123;</span><br><span class="line">    sumTwo,</span><br><span class="line">    sumThree</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> api;</span><br><span class="line"><span class="comment">/* Which is the same as</span></span><br><span class="line"><span class="comment"> * export &#123; api as default &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure></p><blockquote><p><strong>最佳实践</strong>：总是在模块的最后面使用 export default 方法，可以让暴露的东西更加清晰并且可以节省时间去找出暴露出来值的名字。尤其是在 CommonJS 中，常见做法就是暴露一个简单的值或者对象。通过这种模式，可以让我们的代码更加易读，并且允许我们在 ES6 和 CommonJS 模块之间插值。</p></blockquote><h3 id="ES6-中的导入"><a href="#ES6-中的导入" class="headerlink" title="ES6 中的导入"></a>ES6 中的导入</h3><p>在 ES6 中同样提供了多样的导入方式，我们可以这么导入一个整个文件：<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"><span class="meta-keyword">import</span> 'underscore';</span></span><br></pre></td></tr></table></figure></p><blockquote><p>需要着重注意的一点是简单的导入整个文件会在那个文件的顶部执行所有的代码</p></blockquote><p>和 Python 中类似，我们可以命名导入的值：<br><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; sumTwo, sumThree &#125; <span class="keyword">from</span> <span class="string">'math/addition'</span>;</span><br></pre></td></tr></table></figure></p><p>我们还可以重命名导入：<br><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">    sumTwo <span class="keyword">as</span> addTwoNumbers,</span><br><span class="line">    sumThree <span class="keyword">as</span> sumThreeNumbers</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">'math/addition'</span>;</span><br></pre></td></tr></table></figure></p><p>另外，我们可以导入所有的东西（整体加载）：<br><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> util <span class="keyword">from</span> <span class="string">'math/addition'</span>;</span><br></pre></td></tr></table></figure></p><p>最后，我们可以从一个模块中导入一个值的列表：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> additionUtil <span class="keyword">from</span> <span class="string">'math/addition'</span>;</span><br><span class="line"><span class="keyword">const</span> &#123; sumTwo, sumThree &#125; = additionUtil;</span><br></pre></td></tr></table></figure></p><p>可以像这样导入默认绑定的输出：<br><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> api <span class="keyword">from</span> <span class="string">'math/addition'</span>;</span><br><span class="line"><span class="regexp">//</span> Same as: <span class="keyword">import</span> &#123; <span class="keyword">default</span> <span class="keyword">as</span> api &#125; <span class="keyword">from</span> <span class="string">'math/addition'</span>;</span><br></pre></td></tr></table></figure></p><p>虽然最好保持导出的简单，但如果需要的话我们有时可以混合默认的导入和混合导入。当我们这样导出的时候：<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// foos.js</span></span><br><span class="line"><span class="keyword">export</span> &#123; foo <span class="keyword">as</span> <span class="keyword">default</span>, foo1, foo2 &#125;;</span><br></pre></td></tr></table></figure></p><p>我们可以这样导入它们：<br><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> foo, &#123; foo1, foo2 &#125; <span class="keyword">from</span> <span class="string">'foos'</span>;</span><br></pre></td></tr></table></figure></p><p>当我们用<strong>Commonjs</strong>的语法导入一个模块的暴露出口时（比如 React），我们可以这样做：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">const</span> &#123; Component, PropTypes &#125; = React;</span><br></pre></td></tr></table></figure></p><p>还有更精简的写法：<br><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component, PropTypes &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br></pre></td></tr></table></figure></p><blockquote><p><strong>注意：</strong>导出的值是动态引用的，而不是拷贝。因此，在一个模块中改变一个变量的绑定将影响输出模块中的值。应该避免改变这些导出值的公共接口。</p></blockquote><h2 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h2><p>在 ES5 中，在函数中我们需要各种操作去处理<strong>默认参数</strong>、<strong>不定参数</strong>和<strong>重命名参数</strong>等需求，在 ES6 中我们可以使用更简洁的语法完成这些需求：</p><h3 id="默认参数"><a href="#默认参数" class="headerlink" title="默认参数"></a>默认参数</h3><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title">addTwoNumbers</span>(x, y) &#123;</span><br><span class="line">    x = x || 0;</span><br><span class="line">    y = y || 0;</span><br><span class="line">    <span class="keyword">return</span> <span class="type">x</span> + y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ES6 中，函数的参数可以支持设置默认值：<br><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title">addTwoNumbers</span>(x=0, y=0) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="type">x</span> + y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">addTwoNumbers</span>(<span class="number">2</span>, <span class="number">4</span>); <span class="comment">// 6</span></span><br><span class="line"><span class="selector-tag">addTwoNumbers</span>(<span class="number">2</span>); <span class="comment">// 2</span></span><br><span class="line"><span class="selector-tag">addTwoNumbers</span>(); <span class="comment">// 0</span></span><br></pre></td></tr></table></figure><h3 id="rest-参数"><a href="#rest-参数" class="headerlink" title="rest 参数"></a>rest 参数</h3><p>在 ES5 中，我们需要这么处理不定参数：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">logArguments</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i &lt; <span class="built_in">arguments</span>.length; i++) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">arguments</span>[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>使用<strong>rest</strong>，我们就可以处理不确定数目的参数：<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">logArguments</span><span class="params">(<span class="rest_arg">...args</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (let arg of args) &#123;</span><br><span class="line">        console.log(arg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="命名参数"><a href="#命名参数" class="headerlink" title="命名参数"></a>命名参数</h3><p>在 ES5 中是使用配置对象的模式来处理命名参数，jQuery 中的使用：<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initializeCanvas</span><span class="params">(options)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> height = options.height || <span class="number">600</span>;</span><br><span class="line">    <span class="keyword">var</span> width  = options.width  || <span class="number">400</span>;</span><br><span class="line">    <span class="keyword">var</span> lineStroke = options.lineStroke || <span class="string">'black'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>我们可以利用解构的一个函数的形参实现相同的功能：<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initializeCanvas</span><span class="params">(&#123; height=600, width=400, lineStroke=<span class="string">'black'</span>&#125;)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Use variables height, width, lineStroke here</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>如果我们想使整个值可选择，我们可以解构赋值一个空的对象：<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initializeCanvas</span><span class="params">(&#123; height=600, width=400, lineStroke=<span class="string">'black'</span>&#125; = &#123;&#125;)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="展开操作"><a href="#展开操作" class="headerlink" title="展开操作"></a>展开操作</h3><p>在 ES5 中，我们可以 apply Math.max 方法来获得一个数组中的最大值：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Math.max.apply(null, [<span class="number">-1</span>, <span class="number">100</span>, <span class="number">9001</span>, <span class="number">-32</span>]); <span class="comment">// 9001</span></span><br></pre></td></tr></table></figure></p><p>在 ES6 中，我们可以通过展开操作把一个数组的值作为参数传递给一个函数：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Math.max(...[<span class="number">-1</span>, <span class="number">100</span>, <span class="number">9001</span>, <span class="number">-32</span>]); <span class="comment">// 9001</span></span><br></pre></td></tr></table></figure></p><p>我们可以更简洁地使用这个语法来合并数组：<br><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">let cities = [<span class="string">'San Francisco'</span>, <span class="string">'Los Angeles'</span>];</span><br><span class="line">let places = [<span class="string">'Miami'</span>, ...cities, <span class="string">'Chicago'</span>]; // [<span class="string">'Miami'</span>, <span class="string">'San Francisco'</span>, <span class="string">'Los Angeles'</span>, <span class="string">'Chicago'</span>]</span><br></pre></td></tr></table></figure></p><h2 id="类Classes"><a href="#类Classes" class="headerlink" title="类Classes"></a>类Classes</h2><p>在 ES6 之前，我们通过构造函数来创造一个类，并且通过原型来扩展属性：<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span><span class="params">(name, age, gender)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name   = name;</span><br><span class="line">    <span class="keyword">this</span>.age    = age;</span><br><span class="line">    <span class="keyword">this</span>.gender = gender;</span><br><span class="line">&#125;</span><br><span class="line">Person.prototype.incrementAge = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.age += <span class="number">1</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>然后可以这样继承类：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Personal</span>(<span class="params">name, age, gender, occupation, hobby</span>) </span>&#123;</span><br><span class="line">    Person.call(<span class="keyword">this</span>, name, age, gender);</span><br><span class="line">    <span class="keyword">this</span>.occupation = occupation;</span><br><span class="line">    <span class="keyword">this</span>.hobby = hobby;</span><br><span class="line">&#125;</span><br><span class="line">Personal.prototype = <span class="built_in">Object</span>.create(Person.prototype);</span><br><span class="line">Personal.prototype.constructor = Personal;</span><br><span class="line">Personal.prototype.incrementAge = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    Person.prototype.incrementAge.call(<span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">this</span>.age += <span class="number">20</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.age);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>在 ES6 中，提供了更多的语法糖，可以直接创造一个类：<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(name, age, gender) &#123;</span><br><span class="line">        <span class="keyword">this</span>.name   = name;</span><br><span class="line">        <span class="keyword">this</span>.age    = age;</span><br><span class="line">        <span class="keyword">this</span>.gender = gender;</span><br><span class="line">    &#125;</span><br><span class="line">    incrementAge() &#123;</span><br><span class="line">      <span class="keyword">this</span>.age += <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>使用 extends 关键字来继承一个类：<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Personal</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    constructor(name, age, gender, occupation, hobby) &#123;</span><br><span class="line">        <span class="keyword">super</span>(name, age, gender);</span><br><span class="line">        <span class="keyword">this</span>.occupation = occupation;</span><br><span class="line">        <span class="keyword">this</span>.hobby = hobby;</span><br><span class="line">    &#125;</span><br><span class="line">    incrementAge() &#123;</span><br><span class="line">        <span class="keyword">super</span>.incrementAge();</span><br><span class="line">        <span class="keyword">this</span>.age += <span class="number">20</span>;</span><br><span class="line">        console.log(<span class="keyword">this</span>.age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><blockquote><p><strong>最佳实践：</strong>虽然使用 ES6 的语法创造类的时候，js引擎是如何实现类以及如何操作原型是令人费解的，但是未来对初学者来说这是一个好的开始，同时也可以让我们写更简洁的代码。</p></blockquote><h2 id="Symbols"><a href="#Symbols" class="headerlink" title="Symbols"></a>Symbols</h2><p><strong>Symbols</strong>在 ES6 之前就已经存在，但是我们现在可以直接使用一个开发的接口了。Symbols 是不可改变并且是独一无二的，可以在任意哈希中作一个key。<br><strong>Symbol()</strong><br>调用 Symbol() 或者 Symbol(description) 可以创造一个独一无二的符号，但是在全局是看不到的。Symbol() 的一个使用情况是给一个类或者命名空间打上补丁，但是可以确定的是你不会去更新它。比如，你想给 React.Component 类添加一个 refreshComponent 方法，但是可以确定的是你不会在之后更新这个方法：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> refreshComponent = <span class="built_in">Symbol</span>();</span><br><span class="line">React.Component.prototype[refreshComponent] = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// do something</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Symbol.for(key)<br>Symbol.for(key) 同样会创造一个独一无二并且不可改变的 Symbol，但是它可以全局看到，两个相同的调用 Symbol.for(key) 会返回同一个 Symbol 类：<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Symbol</span>(<span class="string">'foo'</span>) === <span class="built_in">Symbol</span>(<span class="string">'foo'</span>) <span class="comment">// false</span></span><br><span class="line"><span class="built_in">Symbol</span>.<span class="keyword">for</span>(<span class="string">'foo'</span>) === <span class="built_in">Symbol</span>(<span class="string">'foo'</span>) <span class="comment">// false</span></span><br><span class="line"><span class="built_in">Symbol</span>.<span class="keyword">for</span>(<span class="string">'foo'</span>) === <span class="built_in">Symbol</span>.<span class="keyword">for</span>(<span class="string">'foo'</span>) <span class="comment">// true</span></span><br></pre></td></tr></table></figure></p><p>对于 Symbols 的普遍用法（尤其是Symbol.for(key)）是为了协同性。它可以通过在一个第三方插件中已知的接口中对象中的参数中寻找用 Symbol 成员来实现，比如：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reader</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> specialRead = <span class="built_in">Symbol</span>.for(<span class="string">'specialRead'</span>);</span><br><span class="line">    <span class="keyword">if</span> (obj[specialRead]) &#123;</span><br><span class="line">        <span class="keyword">const</span> reader = obj[specialRead]();</span><br><span class="line">        <span class="comment">// do something with reader</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">'object cannot be read'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在另一个库中：<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> specialRead = Symbol.<span class="keyword">for</span>(<span class="string">'specialRead'</span>);</span><br><span class="line"><span class="keyword">class</span> <span class="title">SomeReadableType</span> &#123;</span><br><span class="line">    [<span class="meta">specialRead</span>]() &#123;</span><br><span class="line">        <span class="keyword">const</span> reader = createSomeReaderFrom(<span class="keyword">this</span>);</span><br><span class="line">        <span class="keyword">return</span> reader;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="Maps"><a href="#Maps" class="headerlink" title="Maps"></a>Maps</h2><p>Maps 在 JavaScript 中是一个非常必需的数据结构，在 ES6 之前，我们通过对象来创建哈希映射：<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="keyword">map</span> = <span class="built_in">new</span> Object();</span><br><span class="line"><span class="keyword">map</span>[key1] = <span class="string">'value1'</span>;</span><br><span class="line"><span class="keyword">map</span>[key2] = <span class="string">'value2'</span>;</span><br></pre></td></tr></table></figure></p><p>然而有时我们用特殊的方法去修改对象属性时会报错<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> getOwnProperty(&#123; hasOwnProperty: <span class="string">'Hah, overwritten'</span>&#125;, <span class="string">'Pwned'</span>);</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> TypeError: Property <span class="string">'hasOwnProperty'</span> is not a <span class="keyword">function</span></span></span><br></pre></td></tr></table></figure></p><p>实际上<strong>Maps</strong>允许我们对值进行 set、get 和 search 操作：<br><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="built_in">map</span> = <span class="literal">new</span> <span class="built_in">Map</span>();</span><br><span class="line">&gt; <span class="built_in">map</span>.<span class="built_in">set</span>(<span class="string">'name'</span>, <span class="string">'david'</span>);</span><br><span class="line">&gt; <span class="built_in">map</span>.get(<span class="string">'name'</span>); <span class="comment">// david</span></span><br><span class="line">&gt; <span class="built_in">map</span>.has(<span class="string">'name'</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure></p><p><strong>Maps</strong>更令人惊奇的部分就是它不仅限于使用字符串作为 key，还可以用其他任何类型的数据作为 key：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>([</span><br><span class="line">    [<span class="string">'name'</span>, <span class="string">'david'</span>],</span><br><span class="line">    [<span class="literal">true</span>, <span class="string">'false'</span>],</span><br><span class="line">    [<span class="number">1</span>, <span class="string">'one'</span>],</span><br><span class="line">    [&#123;&#125;, <span class="string">'object'</span>],</span><br><span class="line">    [<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;, <span class="string">'function'</span>]</span><br><span class="line">]);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">of</span> map.keys()) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">typeof</span> key);</span><br><span class="line">    <span class="comment">// &gt; string, boolean, number, object, function</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><blockquote><p><strong>注意：</strong>但我们使用 map.get() 方法去测试相等时，如果在 Maps 中使用 函数 或者 对象 等非原始类型值的时候测试将不起作用，所以我们应该使用 Strings, Booleans 和 Numbers 这样的原始类型的值。</p></blockquote><p>我们还可以使用 .entries() 来遍历迭代：<br><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="built_in">let</span> [<span class="built_in">key</span>, value] of <span class="built_in">map</span>.entries()) &#123;</span><br><span class="line">    console.<span class="built_in">log</span>(<span class="built_in">key</span>, value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>WeakMaps<br>在 ES6 之前，为了存储私有变量，我们有各种各样的方法去实现，其中一种方法就是用命名约定：<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(age) &#123;</span><br><span class="line">        <span class="keyword">this</span>._age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    _incrementAge() &#123;</span><br><span class="line">        <span class="keyword">this</span>._age += <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>但是命名约定在代码中仍然会令人混淆并且并不会真正的保持私有变量不被访问。现在，我们可以使用<strong>WeakMaps</strong>来存储变量：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> _age = <span class="keyword">new</span> <span class="built_in">WeakMap</span>();</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(age) &#123;</span><br><span class="line">        _age.set(<span class="keyword">this</span>, age);</span><br><span class="line">    &#125;</span><br><span class="line">    incrementAge() &#123;</span><br><span class="line">        <span class="keyword">let</span> age = _age.get(<span class="keyword">this</span>) + <span class="number">1</span>;</span><br><span class="line">        _age.set(<span class="keyword">this</span>, age);</span><br><span class="line">        <span class="keyword">if</span> (age &gt; <span class="number">50</span>) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'Midlife crisis'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在 WeakMaps 存储变量很酷的一件事是它的 key 他不需要属性名称，可以使用 Reflect.ownKeys() 来查看这一点：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> const person = new Person(50);</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> person.incrementAge(); // <span class="string">'Midlife crisis'</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> Reflect.ownKeys(person); // []</span></span><br></pre></td></tr></table></figure></p><p>一个更实际的实践就是可以 WeakMaps 储存 DOM 元素，而不会污染元素本身：<br><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="built_in">map</span> = <span class="literal">new</span> WeakMap();</span><br><span class="line"><span class="keyword">let</span> el  = document.getElementById(<span class="string">'someElement'</span>);</span><br><span class="line"><span class="comment">// Store a weak reference to the element with a key</span></span><br><span class="line"><span class="built_in">map</span>.<span class="built_in">set</span>(el, <span class="string">'reference'</span>);</span><br><span class="line"><span class="comment">// Access the value of the element</span></span><br><span class="line"><span class="keyword">let</span> value = <span class="built_in">map</span>.get(el); <span class="comment">// 'reference'</span></span><br><span class="line"><span class="comment">// Remove the reference</span></span><br><span class="line">el.parentNode.removeChild(el);</span><br><span class="line">el = <span class="built_in">null</span>;</span><br><span class="line"><span class="comment">// map is empty, since the element is destroyed</span></span><br></pre></td></tr></table></figure></p><p>如上所示，当一个对象被垃圾回收机制销毁的时候， WeakMap 将会自动地删除关于这个对象的键值对。</p><blockquote><p><strong>注意：</strong>为了进一步说明这个例子的可行性，请参考jQuery如何存储与具有引用的DOM元素相对应的对象缓存。使用<strong>WeakMap</strong>，一旦它从文档中删除,jQuery可以自动释放与特定DOM元素相关联的任何内存。一般来说，<strong>WeakMap</strong>对于包装DOM元素的任何库都非常有用。</p></blockquote><h2 id="Promises"><a href="#Promises" class="headerlink" title="Promises"></a>Promises</h2><p>Promises 可以让我们远离平行的代码（回调地狱）：<br><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">func1(<span class="name">function</span> (<span class="name">value1</span>) &#123;</span><br><span class="line">    func2(<span class="name">value1</span>, function (<span class="name">value2</span>) &#123;</span><br><span class="line">        func3(<span class="name">value2</span>, function (<span class="name">value3</span>) &#123;</span><br><span class="line">            func4(<span class="name">value3</span>, function (<span class="name">value4</span>) &#123;</span><br><span class="line">                func5(<span class="name">value4</span>, function (<span class="name">value5</span>) &#123;</span><br><span class="line">                    // Do something with value <span class="number">5</span></span><br><span class="line">                &#125;)<span class="comment">;</span></span><br><span class="line">            &#125;)<span class="comment">;</span></span><br><span class="line">        &#125;)<span class="comment">;</span></span><br><span class="line">    &#125;)<span class="comment">;</span></span><br><span class="line">&#125;)<span class="comment">;</span></span><br></pre></td></tr></table></figure></p><p>转变成垂直代码：<br><figure class="highlight ceylon"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">func<span class="number">1</span>(<span class="keyword">value</span><span class="number">1</span>)</span><br><span class="line">    .<span class="keyword">then</span>(func<span class="number">2</span>)</span><br><span class="line">    .<span class="keyword">then</span>(func<span class="number">3</span>)</span><br><span class="line">    .<span class="keyword">then</span>(func<span class="number">4</span>)</span><br><span class="line">    .<span class="keyword">then</span>(func<span class="number">5</span>, <span class="keyword">value</span><span class="number">5</span> =&gt; &#123;</span><br><span class="line">        <span class="comment">// Do something with value 5</span></span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure></p><p>在 ES6 之前，我们使用<a href="https://github.com/petkaantonov/bluebird" target="_blank" rel="noopener">bluebird</a>或者<a href="https://github.com/kriskowal/q" target="_blank" rel="noopener">Q</a>，现在我们可以使用原生的<strong>Promise</strong>了。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span></span><br><span class="line">    reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Failed to fulfill Promise'</span>)))</span><br><span class="line">        .catch(<span class="function"><span class="params">reason</span> =&gt;</span> <span class="built_in">console</span>.log(reason));</span><br></pre></td></tr></table></figure></p><p>我们有两个处理器，<strong>resolve</strong>（当Promise是 <strong>fulfilled</strong> 时的回调）和 reject（当Promise是<strong>rejected</strong>时的回调）：</p><blockquote><p><strong>Promises的好处：</strong>对错误的处理使用一些嵌套回调错误提示会使代码很混乱，使用Promise ，我们有一个清晰的路径来处理冒泡的错误并适当地处理它们，在Promis 确定了resolved/rejected之后，他的值是不可改变的－－它永远不会改变。</p></blockquote><p>这是使用 Promise 的一个实际的栗子：<br><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">var request = require('request')<span class="comment">;</span></span><br><span class="line">return new Promise((<span class="name">resolve</span>, reject) =&gt; &#123;</span><br><span class="line">  request.get(<span class="name">url</span>, (<span class="name">error</span>, response, body) =&gt; &#123;</span><br><span class="line">    if (<span class="name">body</span>) &#123;</span><br><span class="line">        resolve(<span class="name">JSON</span>.parse(<span class="name">body</span>))<span class="comment">;</span></span><br><span class="line">      &#125; else &#123;</span><br><span class="line">        resolve(&#123;&#125;)<span class="comment">;</span></span><br><span class="line">      &#125;</span><br><span class="line">  &#125;)<span class="comment">;</span></span><br><span class="line">&#125;)<span class="comment">;</span></span><br></pre></td></tr></table></figure></p><p>我们还可以使用 Promise.all() 来 并行 处理多个异步函数：<br><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">let urls = [</span><br><span class="line">  <span class="string">'/api/commits'</span>,</span><br><span class="line">  <span class="string">'/api/issues/opened'</span>,</span><br><span class="line">  <span class="string">'/api/issues/assigned'</span>,</span><br><span class="line">  <span class="string">'/api/issues/completed'</span>,</span><br><span class="line">  <span class="string">'/api/issues/comments'</span>,</span><br><span class="line">  <span class="string">'/api/pullrequests'</span></span><br><span class="line">];</span><br><span class="line">let promises = urls.map(<span class="function"><span class="params">(url)</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> Promise(<span class="function"><span class="params">(resolve, reject)</span> =&gt;</span> &#123;</span><br><span class="line">    $.ajax(&#123; url: url &#125;)</span><br><span class="line">      .done(<span class="function"><span class="params">(data)</span> =&gt;</span> &#123;</span><br><span class="line">        resolve(data);</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">Promise.all(promises)</span><br><span class="line">  .<span class="keyword">then</span>(<span class="function"><span class="params">(results)</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="regexp">//</span> Do something with results <span class="keyword">of</span> all our promises</span><br><span class="line"> &#125;);</span><br></pre></td></tr></table></figure></p><h2 id="Generators-生成器"><a href="#Generators-生成器" class="headerlink" title="Generators 生成器"></a>Generators 生成器</h2><p> 就像 Promises 可以帮我们避免回调地狱，Generators 可以帮助我们让代码风格更整洁－－用同步的代码风格来写异步代码，它本质上是一个可以暂停计算并且可以随后返回表达式的值的函数。<br> 一个简单的栗子使用 generators：<br> <figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">function</span>* <span class="title">sillyGenerator</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="built_in">yield</span> <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">yield</span> <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">yield</span> <span class="number">3</span>;</span><br><span class="line">    <span class="built_in">yield</span> <span class="number">4</span>;</span><br><span class="line">&#125;</span><br><span class="line">var generator = sillyGenerator();</span><br><span class="line">&gt; console.<span class="built_in">log</span>(generator.<span class="built_in">next</span>()); // &#123; value: <span class="number">1</span>, done: <span class="literal">false</span> &#125;</span><br><span class="line">&gt; console.<span class="built_in">log</span>(generator.<span class="built_in">next</span>()); // &#123; value: <span class="number">2</span>, done: <span class="literal">false</span> &#125;</span><br><span class="line">&gt; console.<span class="built_in">log</span>(generator.<span class="built_in">next</span>()); // &#123; value: <span class="number">3</span>, done: <span class="literal">false</span> &#125;</span><br><span class="line">&gt; console.<span class="built_in">log</span>(generator.<span class="built_in">next</span>()); // &#123; value: <span class="number">4</span>, done: <span class="literal">false</span> &#125;</span><br></pre></td></tr></table></figure></p><p>next 可以回去到下一个 yield 返回的值，当然上面的代码是非常不自然的，我们可以利用 Generators 来用同步的方式来写异步操作：<br><figure class="highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Hiding asynchronousity with Generators</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">request</span>(<span class="params">url</span>) </span>&#123;</span><br><span class="line">    getJSON(<span class="built_in">url</span>, <span class="function"><span class="keyword">function</span>(<span class="params">response</span>) </span>&#123;</span><br><span class="line">        generator.next(response);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这里的 generator 函数将会返回需要的数据：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">getData</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> entry1 = <span class="keyword">yield</span> request(<span class="string">'http://some_api/item1'</span>);</span><br><span class="line">    <span class="keyword">var</span> data1  = <span class="built_in">JSON</span>.parse(entry1);</span><br><span class="line">    <span class="keyword">var</span> entry2 = <span class="keyword">yield</span> request(<span class="string">'http://some_api/item2'</span>);</span><br><span class="line">    <span class="keyword">var</span> data2  = <span class="built_in">JSON</span>.parse(entry2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>通过 yield，我们可以保证 entry1 有 data1 中我们需要解析并储存的数据。<br>虽然我们可以利用 Generators 来用同步的方式来写异步操作，但是确认错误的传播变得不再清晰，我们可以在 Generators 中加上 Promise：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">request</span>(<span class="params">url</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        getJSON(url, resolve);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>然后我们写一个函数逐步调用 next 并且利用 request 方法产生一个 Promise：<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">iterateGenerator</span><span class="params">(gen)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> generator = gen();</span><br><span class="line">    (<span class="function"><span class="keyword">function</span> <span class="title">iterate</span><span class="params">(val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> ret = generator.next();</span><br><span class="line">        <span class="keyword">if</span>(!ret.done) &#123;</span><br><span class="line">            ret.value.then(iterate);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在 Generators 中加上 Promise 之后我们可以更清晰的使用 Promise 中的 .catch 和 reject来捕捉错误，让我们使用新的 Generator，和之前的还是蛮相似的：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">iterateGenerator(<span class="function"><span class="keyword">function</span>* <span class="title">getData</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> entry1 = <span class="keyword">yield</span> request(<span class="string">'http://some_api/item1'</span>);</span><br><span class="line">    <span class="keyword">var</span> data1  = <span class="built_in">JSON</span>.parse(entry1);</span><br><span class="line">    <span class="keyword">var</span> entry2 = <span class="keyword">yield</span> request(<span class="string">'http://some_api/item2'</span>);</span><br><span class="line">    <span class="keyword">var</span> data2  = <span class="built_in">JSON</span>.parse(entry2);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><h2 id="Async-Await"><a href="#Async-Await" class="headerlink" title="Async Await"></a>Async Await</h2><p>当 ES6 真正到来的时候，async await 可以用更少的处理实现 Promise 和 Generators 所实现的异步处理：</p><blockquote><p>async await 是Generators的语法糖</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> request = <span class="built_in">require</span>(<span class="string">'request'</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getJSON</span>(<span class="params">url</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    request(url, <span class="function"><span class="keyword">function</span>(<span class="params">error, response, body</span>) </span>&#123;</span><br><span class="line">      resolve(body);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> data = <span class="keyword">await</span> getJSON();</span><br><span class="line">  <span class="built_in">console</span>.log(data); <span class="comment">// NOT undefined!</span></span><br><span class="line">&#125;</span><br><span class="line">main();</span><br></pre></td></tr></table></figure><blockquote><p>在 js 引擎中，它所实现的和 Generators 其实是一样的，我更推荐使用 async await + Promises，更多的资源和使用 ES7 和 用 babel 转化可以<a href="http://masnun.com/2015/11/11/using-es7-asyncawait-today-with-babel.html" target="_blank" rel="noopener">看这里</a>。</p></blockquote><h2 id="Getter-Setter-函数"><a href="#Getter-Setter-函数" class="headerlink" title="Getter/Setter 函数"></a>Getter/Setter 函数</h2><p>ES6 已经开始实现了 getter 和 setter 函数，比如下面这个栗子：<br><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Employee</span> </span>&#123;</span><br><span class="line">    constructor(name) &#123;</span><br><span class="line">        <span class="built_in">this</span>._name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">get</span> name() &#123;</span><br><span class="line">      <span class="keyword">if</span>(<span class="built_in">this</span>._name) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'Mr. '</span> + <span class="built_in">this</span>._name.toUpperCase();  </span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> undefined;</span><br><span class="line">      &#125;  </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">set</span> name(<span class="keyword">new</span><span class="type">Name</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">new</span><span class="type">Name</span> == <span class="built_in">this</span>._name) &#123;</span><br><span class="line">        console.log(<span class="string">'I already have this name.'</span>);</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">new</span><span class="type">Name</span>) &#123;</span><br><span class="line">        <span class="built_in">this</span>._name = <span class="keyword">new</span><span class="type">Name</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> emp = <span class="keyword">new</span> <span class="type">Employee</span>(<span class="string">"James Bond"</span>);</span><br><span class="line"><span class="comment">// uses the get method in the background</span></span><br><span class="line"><span class="keyword">if</span> (emp.name) &#123;</span><br><span class="line">  console.log(emp.name);  <span class="comment">// Mr. JAMES BOND</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// uses the setter in the background</span></span><br><span class="line">emp.name = <span class="string">"Bond 007"</span>;</span><br><span class="line">console.log(emp.name);  <span class="comment">// Mr. BOND 007</span></span><br></pre></td></tr></table></figure></p><p>最新版本的浏览器也支持对象中的 getter 和 setter 函数，我们可以使用它们来实现 计算属性，对对象属性添加监听和预处理。<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">  firstName: <span class="string">'James'</span>,</span><br><span class="line">  lastName: <span class="string">'Bond'</span>,</span><br><span class="line">  <span class="keyword">get</span> fullName() &#123;</span><br><span class="line">      console.log(<span class="string">'Getting FullName'</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.firstName + <span class="string">' '</span> + <span class="keyword">this</span>.lastName;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="keyword">set</span> fullName (name) &#123;</span><br><span class="line">      console.log(<span class="string">'Setting FullName'</span>);</span><br><span class="line">      <span class="keyword">var</span> words = name.toString().split(<span class="string">' '</span>);</span><br><span class="line">      <span class="keyword">this</span>.firstName = words[<span class="number">0</span>] || <span class="string">''</span>;</span><br><span class="line">      <span class="keyword">this</span>.lastName = words[<span class="number">1</span>] || <span class="string">''</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">person.fullName; <span class="comment">// James Bond</span></span><br><span class="line">person.fullName = <span class="string">'Bond 007'</span>;</span><br><span class="line">person.fullName; <span class="comment">// Bond 007</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;var-和-let-const-的比较&quot;&gt;&lt;a href=&quot;#var-和-let-const-的比较&quot; class=&quot;headerlink&quot; title=&quot;var 和 let/const 的比较&quot;&gt;&lt;/a&gt;var 和 let/const 的比较&lt;/h2&gt;&lt;div class=&quot;note info&quot;&gt;&lt;p&gt; 除了 var ，我们现在还可以使用两个新的标识符来定义一个变量 — let 和 const。&lt;br&gt;和 var 不一样的是，let 和 const 不存在变量提升。 &lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="https://chongdee.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://chongdee.github.io/tags/JavaScript/"/>
    
  </entry>
  
</feed>
