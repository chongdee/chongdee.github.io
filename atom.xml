<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>andy Wong&#39;s Blog</title>
  
  <subtitle>知道的越多，不知道的越多</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://chongdee.github.io/"/>
  <updated>2021-05-08T19:35:17.294Z</updated>
  <id>https://chongdee.github.io/</id>
  
  <author>
    <name>andy Wong</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>条件语句优雅写法</title>
    <link href="https://chongdee.github.io/2021/05/09/JavaScript/%E6%9D%A1%E4%BB%B6%E8%AF%AD%E5%8F%A5%E4%BC%98%E9%9B%85%E5%86%99%E6%B3%95/"/>
    <id>https://chongdee.github.io/2021/05/09/JavaScript/条件语句优雅写法/</id>
    <published>2021-05-08T19:32:15.040Z</published>
    <updated>2021-05-08T19:35:17.294Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在任何编程语言中，代码需要根据不同的条件在给定的输入中做不同的决定和执行相应的动作。</p><p>例如，在一个游戏中，如果玩家生命点为0，游戏结束。在天气应用中，如果在早上被查看，显示一个日出图片，如果是晚上，则显示星星和月亮。在这篇文章中，我们将探索JavaScript中所谓的条件语句如何工作。<br><a id="more"></a><br>如果你使用JavaScript工作，你将写很多包含条件调用的代码。条件调用可能初学很简单，但是还有比写一对对if/else更多的东西。这里有些编写更好更清晰的条件代码的有用提示。</p><ol><li>数组方法 Array.includes</li><li>提前退出 / 提前返回</li><li>用对象字面量或Map替代Switch语句</li><li>默认参数和解构</li><li>用 Array.every &amp; Array.some 匹配全部/部分内容</li><li>使用可选链和空值（null）合并</li></ol><h2 id="1-数组方法-Array-includes"><a href="#1-数组方法-Array-includes" class="headerlink" title="1. 数组方法 Array.includes"></a>1. 数组方法 Array.includes</h2><p>使用 Array.includes 进行多条件选择<br>例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printAnimals</span>(<span class="params">animal</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (animal === <span class="string">'dog'</span> || animal === <span class="string">'cat'</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(I have a $&#123;animal&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(printAnimals(<span class="string">'dog'</span>)); <span class="comment">// I have a dog</span></span><br></pre></td></tr></table></figure><p>上面的代码看起来很好因为我们只检查了两个动物。然而，我们不确定用户输入。如果我们要检查任何其他动物呢？如果我们通过添加更多“或”语句来扩展，代码将变得难以维护和不清晰。</p><p><strong>解决方案:</strong></p><p>我们可以通过使用 Array.includes 来重写上面的条件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printAnimals</span>(<span class="params">animal</span>) </span>&#123;</span><br><span class="line">   <span class="keyword">const</span> animals = [<span class="string">'dog'</span>, <span class="string">'cat'</span>, <span class="string">'hamster'</span>, <span class="string">'turtle'</span>]; </span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> (animals.includes(animal)) &#123;</span><br><span class="line">     <span class="built_in">console</span>.log(I have a $&#123;animal&#125;);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(printAnimals(<span class="string">'hamster'</span>)); <span class="comment">// I have a hamster</span></span><br></pre></td></tr></table></figure><p>这里，我们创建来一个动物数组，所以条件语句可以和代码的其余部分抽象分离出来。现在，如果我们想要检查任何其他动物，我们只需要添加一个新的数组项。<br>我们也能在这个函数作用域外部使用这个动物数组变量来在代码中的其他任意地方重用它。这是一个编写更清晰、易理解和维护的代码的方法，不是吗？</p><h2 id="2-提前退出-提前返回"><a href="#2-提前退出-提前返回" class="headerlink" title="2. 提前退出 / 提前返回"></a>2. 提前退出 / 提前返回</h2><p>这是一个精简你的代码的非常酷的技巧。我记得当我开始专业工作时，我在第一天学习使用提前退出来编写条件。</p><p>让我们在之前的例子上添加更多的条件。用包含确定属性的对象替代简单字符串的动物。</p><p>现在的需求是：</p><ul><li>如果没有动物，抛出一个异常</li><li>打印动物类型</li><li>打印动物名字</li><li>打印动物性别</li></ul><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> printAnimalDetails = animal =&gt; &#123;</span><br><span class="line">  let result; <span class="comment">// declare a variable to store the final value</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// condition 1: check if animal has a value</span></span><br><span class="line">  <span class="keyword">if</span> (animal) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// condition 2: check if animal has a type property</span></span><br><span class="line">    <span class="keyword">if</span> (animal.<span class="keyword">type</span>) &#123;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// condition 3: check if animal has a name property</span></span><br><span class="line">      <span class="keyword">if</span> (animal.name) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// condition 4: check if animal has a gender property</span></span><br><span class="line">        <span class="keyword">if</span> (animal.gender) &#123;</span><br><span class="line">          result = <span class="variable">$&#123;animal</span>.name&#125; is a <span class="variable">$&#123;animal</span>.gender&#125; <span class="variable">$&#123;animal</span>.<span class="keyword">type</span>&#125;;;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          result = <span class="string">"No animal gender"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        result = <span class="string">"No animal name"</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      result = <span class="string">"No animal type"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    result = <span class="string">"No animal"</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">console.<span class="built_in">log</span>(printAnimalDetails()); <span class="comment">// 'No animal'</span></span><br><span class="line"></span><br><span class="line">console.<span class="built_in">log</span>(printAnimalDetails(&#123; <span class="keyword">type</span>: <span class="string">"dog"</span>, gender: <span class="string">"female"</span> &#125;)); <span class="comment">// 'No animal name'</span></span><br><span class="line"></span><br><span class="line">console.<span class="built_in">log</span>(printAnimalDetails(&#123; <span class="keyword">type</span>: <span class="string">"dog"</span>, name: <span class="string">"Lucy"</span> &#125;)); <span class="comment">// 'No animal gender'</span></span><br><span class="line"></span><br><span class="line">console.<span class="built_in">log</span>(</span><br><span class="line">  printAnimalDetails(&#123; <span class="keyword">type</span>: <span class="string">"dog"</span>, name: <span class="string">"Lucy"</span>, gender: <span class="string">"female"</span> &#125;)</span><br><span class="line">); <span class="comment">// 'Lucy is a female dog'</span></span><br></pre></td></tr></table></figure><p>你觉得上面的代码怎么样？</p><p>它工作得很好，但是代码很长并且维护困难。如果不使用lint工具，找出闭合花括号在哪都会浪费很多时间。😄 想象如果代码有更复杂的逻辑会怎么样？大量的if..else语句。</p><p>我们能用三元运算符、&amp;&amp;条件等语法重构上面的功能，但让我们用多个返回语句编写更清晰的代码。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> printAnimalDetails = <span class="function">(<span class="params">&#123;<span class="keyword">type</span>, name, gender &#125; = &#123;&#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span>(!<span class="keyword">type</span>) <span class="keyword">return</span> <span class="string">'No animal type'</span>;</span><br><span class="line">  <span class="keyword">if</span>(!name) <span class="keyword">return</span> <span class="string">'No animal name'</span>;</span><br><span class="line">  <span class="keyword">if</span>(!gender) <span class="keyword">return</span> <span class="string">'No animal gender'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Now in this line of code, we're sure that we have an animal with all //the three properties here.</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> $&#123;name&#125; is a $&#123;gender&#125; $&#123;<span class="keyword">type</span>&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(printAnimalDetails()); <span class="comment">// 'No animal type'</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(printAnimalDetails(&#123; <span class="keyword">type</span>: dog &#125;)); <span class="comment">// 'No animal name'</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(printAnimalDetails(&#123; <span class="keyword">type</span>: dog, gender: female &#125;)); <span class="comment">// 'No animal name'</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(printAnimalDetails(&#123; <span class="keyword">type</span>: dog, name: <span class="string">'Lucy'</span>, gender: <span class="string">'female'</span> &#125;)); <span class="comment">// 'Lucy is a female dog'</span></span><br></pre></td></tr></table></figure><p>在这个重构过的版本中，也包含了解构和默认参数。默认参数确保如果我们传递undefined作为一个方法的参数，我们仍然有值可以解构，在这里它是一个空对象{}。</p><p>通常，在专业领域，代码被写在这两种方法之间。</p><p>另一个例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printVegetablesWithQuantity</span>(<span class="params">vegetable, quantity</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> vegetables = [<span class="string">'potato'</span>, <span class="string">'cabbage'</span>, <span class="string">'cauliflower'</span>, <span class="string">'asparagus'</span>];</span><br><span class="line"></span><br><span class="line">  <span class="comment">// condition 1: vegetable should be present</span></span><br><span class="line">   <span class="keyword">if</span> (vegetable) &#123;</span><br><span class="line">     <span class="comment">// condition 2: must be one of the item from the list</span></span><br><span class="line">     <span class="keyword">if</span> (vegetables.includes(vegetable)) &#123;</span><br><span class="line">       <span class="built_in">console</span>.log(I like $&#123;vegetable&#125;);</span><br><span class="line"></span><br><span class="line">       <span class="comment">// condition 3: must be large quantity</span></span><br><span class="line">       <span class="keyword">if</span> (quantity &gt;= <span class="number">10</span>) &#123;</span><br><span class="line">         <span class="built_in">console</span>.log(<span class="string">'I have bought a large quantity'</span>);</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;</span><br><span class="line">   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">     <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'No vegetable from the list!'</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">printVegetablesWithQuantity(<span class="literal">null</span>); <span class="comment">//  No vegetable from the list!</span></span><br><span class="line">printVegetablesWithQuantity(<span class="string">'cabbage'</span>); <span class="comment">// I like cabbage</span></span><br><span class="line">printVegetablesWithQuantity(<span class="string">'cabbage'</span>, <span class="number">20</span>); </span><br><span class="line"><span class="comment">// 'I like cabbage</span></span><br><span class="line"><span class="comment">// 'I have bought a large quantity'</span></span><br></pre></td></tr></table></figure><p>现在，我们有：</p><ul><li>1 if/else 语句过滤非法条件</li><li>3 级嵌套if语句 (条件 1, 2, &amp; 3)</li></ul><p>一个普遍遵循的规则是：在非法条件匹配时提前退出。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printVegetablesWithQuantity</span>(<span class="params">vegetable, quantity</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> vegetables = [<span class="string">'potato'</span>, <span class="string">'cabbage'</span>, <span class="string">'cauliflower'</span>, <span class="string">'asparagus'</span>];</span><br><span class="line"></span><br><span class="line">   <span class="comment">// condition 1: throw error early</span></span><br><span class="line">   <span class="keyword">if</span> (!vegetable) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'No vegetable from the list!'</span>);</span><br><span class="line"></span><br><span class="line">   <span class="comment">// condition 2: must be in the list</span></span><br><span class="line">   <span class="keyword">if</span> (vegetables.includes(vegetable)) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(I like $&#123;vegetable&#125;);</span><br><span class="line"></span><br><span class="line">     <span class="comment">// condition 3: must be a large quantity</span></span><br><span class="line">      <span class="keyword">if</span> (quantity &gt;= <span class="number">10</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'I have bought a large quantity'</span>);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过这么做，我们少了一个嵌套层级。当你有一个长的if语句时，这种代码风格特别好。</p><p>我们能通过条件倒置和提前返回，进一步减少嵌套的if语句。查看下面的条件2，观察我们是怎么做的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printVegetablesWithQuantity</span>(<span class="params">vegetable, quantity</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> vegetables = [<span class="string">'potato'</span>, <span class="string">'cabbage'</span>, <span class="string">'cauliflower'</span>, <span class="string">'asparagus'</span>];</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> (!vegetable) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'No vegetable from the list!'</span>); </span><br><span class="line">   <span class="comment">// condition 1: throw error early</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> (!vegetables.includes(vegetable)) <span class="keyword">return</span>; </span><br><span class="line">   <span class="comment">// condition 2: return from the function is the vegetable is not in </span></span><br><span class="line">  <span class="comment">//  the list </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(I like $&#123;vegetable&#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// condition 3: must be a large quantity</span></span><br><span class="line">  <span class="keyword">if</span> (quantity &gt;= <span class="number">10</span>) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'I have bought a large quantity'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过倒置条件2，代码没有嵌套语句了。这种技术在我们有很多条件并且当任何特定条件不匹配时，我们想停止进一步处理的时候特别有用。<br>所以，总是关注更少的嵌套和提前返回，但也不要过度地使用。</p><h2 id="3-用对象字面量或Map替代Switch语句"><a href="#3-用对象字面量或Map替代Switch语句" class="headerlink" title="3. 用对象字面量或Map替代Switch语句"></a>3. 用对象字面量或Map替代Switch语句</h2><p>让我们来看看下面的例子，我们想要基于颜色打印水果：</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printFruits</span><span class="params">(color)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// use switch case to find fruits by color</span></span><br><span class="line">  <span class="keyword">switch</span> (color) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'red'</span>:</span><br><span class="line">      <span class="keyword">return</span> [<span class="string">'apple'</span>, <span class="string">'strawberry'</span>];</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'yellow'</span>:</span><br><span class="line">      <span class="keyword">return</span> [<span class="string">'banana'</span>, <span class="string">'pineapple'</span>];</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'purple'</span>:</span><br><span class="line">      <span class="keyword">return</span> [<span class="string">'grape'</span>, <span class="string">'plum'</span>];</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">return</span> [];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">printFruits(<span class="literal">null</span>); <span class="comment">// []</span></span><br><span class="line">printFruits(<span class="string">'yellow'</span>); <span class="comment">// ['banana', 'pineapple']</span></span><br></pre></td></tr></table></figure><p>上面的代码没有错误，但是它仍然有些冗长。相同的功能能用对象字面量以更清晰的语法实现：</p><figure class="highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// use object literal to find fruits by color</span></span><br><span class="line">  <span class="keyword">const</span> fruitColor = &#123;</span><br><span class="line">    <span class="attribute">red</span>: [<span class="string">'apple'</span>, <span class="string">'strawberry'</span>],</span><br><span class="line">    <span class="attribute">yellow</span>: [<span class="string">'banana'</span>, <span class="string">'pineapple'</span>],</span><br><span class="line">    <span class="attribute">purple</span>: [<span class="string">'grape'</span>, <span class="string">'plum'</span>]</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printFruits</span>(<span class="params">color</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> fruitColor[<span class="built_in">color</span>] || [];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另外，你也能用 Map 来实现相同的功能：</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// use Map to find fruits by color</span></span><br><span class="line">  const fruitColor = <span class="keyword">new</span> <span class="type">Map</span>()</span><br><span class="line">    .<span class="keyword">set</span>(<span class="string">'red'</span>, [<span class="string">'apple'</span>, <span class="string">'strawberry'</span>])</span><br><span class="line">    .<span class="keyword">set</span>(<span class="string">'yellow'</span>, [<span class="string">'banana'</span>, <span class="string">'pineapple'</span>])</span><br><span class="line">    .<span class="keyword">set</span>(<span class="string">'purple'</span>, [<span class="string">'grape'</span>, <span class="string">'plum'</span>]);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printFruits</span></span>(color) &#123;</span><br><span class="line">  <span class="keyword">return</span> fruitColor.<span class="keyword">get</span>(color) || [];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Map 允许保存键值对，是自从ES2015以来可以使用的对象类型。<br>对于上面的例子，相同的功能也能用数组方法Array.filter 来实现。</p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">const fruits = [</span><br><span class="line">    &#123; <span class="keyword">name</span>: <span class="string">'apple'</span>, <span class="built_in">color</span>: <span class="string">'red'</span> &#125;, </span><br><span class="line">    &#123; <span class="keyword">name</span>: <span class="string">'strawberry'</span>, <span class="built_in">color</span>: <span class="string">'red'</span> &#125;, </span><br><span class="line">    &#123; <span class="keyword">name</span>: <span class="string">'banana'</span>, <span class="built_in">color</span>: <span class="string">'yellow'</span> &#125;, </span><br><span class="line">    &#123; <span class="keyword">name</span>: <span class="string">'pineapple'</span>, <span class="built_in">color</span>: <span class="string">'yellow'</span> &#125;, </span><br><span class="line">    &#123; <span class="keyword">name</span>: <span class="string">'grape'</span>, <span class="built_in">color</span>: <span class="string">'purple'</span> &#125;, </span><br><span class="line">    &#123; <span class="keyword">name</span>: <span class="string">'plum'</span>, <span class="built_in">color</span>: <span class="string">'purple'</span> &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">function printFruits(<span class="built_in">color</span>) &#123;</span><br><span class="line">  return fruits.filter(fruit =&gt; fruit.<span class="built_in">color</span> === <span class="built_in">color</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-默认参数和解构"><a href="#4-默认参数和解构" class="headerlink" title="4. 默认参数和解构"></a>4. 默认参数和解构</h2><p>当使用 JavaScript 工作时，我们总是需要检查 null/undefined 值并赋默认值，否则可能编译失败。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printVegetablesWithQuantity</span>(<span class="params">vegetable, quantity = <span class="number">1</span></span>) </span>&#123; </span><br><span class="line"><span class="comment">// if quantity has no value, assign 1</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!vegetable) <span class="keyword">return</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(We have $&#123;quantity&#125; $&#123;vegetable&#125;!);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//results</span></span><br><span class="line">printVegetablesWithQuantity(<span class="string">'cabbage'</span>); <span class="comment">// We have 1 cabbage!</span></span><br><span class="line">printVegetablesWithQuantity(<span class="string">'potato'</span>, <span class="number">2</span>); <span class="comment">// We have 2 potato!</span></span><br></pre></td></tr></table></figure><p>如果 vegetable 是一个对象呢？我们能赋一个默认参数吗？</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">function</span> <span class="selector-tag">printVegetableName</span>(vegetable) &#123; </span><br><span class="line">    <span class="selector-tag">if</span> (vegetable &amp;&amp; vegetable.name) &#123;</span><br><span class="line">     <span class="selector-tag">console</span><span class="selector-class">.log</span> (vegetable.name);</span><br><span class="line">   &#125; <span class="selector-tag">else</span> &#123;</span><br><span class="line">    <span class="selector-tag">console</span><span class="selector-class">.log</span>(<span class="string">'unknown'</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">printVegetableName</span>(undefined); <span class="comment">// unknown</span></span><br><span class="line"><span class="selector-tag">printVegetableName</span>(&#123;&#125;); <span class="comment">// unknown</span></span><br><span class="line"><span class="selector-tag">printVegetableName</span>(&#123; <span class="attribute">name</span>: <span class="string">'cabbage'</span>, <span class="attribute">quantity</span>: <span class="number">2</span> &#125;); <span class="comment">// cabbage</span></span><br></pre></td></tr></table></figure><p>在上面的例子中，如果vegetable 存在，我们想要打印 vegetable name, 否则打印”unknown”。</p><p>我们能通过使用默认参数和解构来避免条件语句 if (vegetable &amp;&amp; vegetable.name) {} 。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// destructing - get name property only</span></span><br><span class="line"><span class="comment">// assign default empty object &#123;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printVegetableName</span>(<span class="params">&#123;name&#125; = &#123;&#125;</span>) </span>&#123;</span><br><span class="line">   <span class="built_in">console</span>.log (name || <span class="string">'unknown'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">printVegetableName(<span class="literal">undefined</span>); <span class="comment">// unknown</span></span><br><span class="line">printVegetableName(&#123; &#125;); <span class="comment">// unknown</span></span><br><span class="line">printVegetableName(&#123; <span class="attr">name</span>: <span class="string">'cabbage'</span>, <span class="attr">quantity</span>: <span class="number">2</span> &#125;); <span class="comment">// cabbage</span></span><br></pre></td></tr></table></figure><p>因为我们只需要 name 属性，所以我们可以使用 { name } 解构参数，然后我们就能在代码中使用 name 作为变量，而不是 vegetable.name 。</p><p>我们还赋了一个空对象 {} 作为默认值，因为当执行 printVegetableName(undefined) 时会得到一个错误：不能从 undefined 或 null 解构属性 name ，因为在 undefined 中没有 name 属性。</p><h2 id="5-用-Array-every-amp-Array-some-匹配全部-部分内容"><a href="#5-用-Array-every-amp-Array-some-匹配全部-部分内容" class="headerlink" title="5. 用 Array.every &amp; Array.some 匹配全部/部分内容"></a>5. 用 Array.every &amp; Array.some 匹配全部/部分内容</h2><p>我们能使用数组方法减少代码行。查看下面的代码，我们想要检查是否所有的水果都是红色的：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fruits = [</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">'apple'</span>, <span class="attr">color</span>: <span class="string">'red'</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">'banana'</span>, <span class="attr">color</span>: <span class="string">'yellow'</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">'grape'</span>, <span class="attr">color</span>: <span class="string">'purple'</span> &#125;</span><br><span class="line">  ];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> isAllRed = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// condition: all fruits must be red</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> f <span class="keyword">of</span> fruits) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!isAllRed) <span class="keyword">break</span>;</span><br><span class="line">    isAllRed = (f.color == <span class="string">'red'</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(isAllRed); <span class="comment">// false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这代码太长了！我们能用 Array.every 来减少代码行数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fruits = [</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">'apple'</span>, <span class="attr">color</span>: <span class="string">'red'</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">'banana'</span>, <span class="attr">color</span>: <span class="string">'yellow'</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">'grape'</span>, <span class="attr">color</span>: <span class="string">'purple'</span> &#125;</span><br><span class="line">  ];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// condition: short way, all fruits must be red</span></span><br><span class="line">  <span class="keyword">const</span> isAllRed = fruits.every(<span class="function"><span class="params">f</span> =&gt;</span> f.color == <span class="string">'red'</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(isAllRed); <span class="comment">// false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>相似地，如果我们想测试是否有任何红色的水果，我们能用一行 Array.some 来实现它。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fruits = [</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">'apple'</span>, <span class="attr">color</span>: <span class="string">'red'</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">'banana'</span>, <span class="attr">color</span>: <span class="string">'yellow'</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">'grape'</span>, <span class="attr">color</span>: <span class="string">'purple'</span> &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// condition: if any fruit is red</span></span><br><span class="line">  <span class="keyword">const</span> isAnyRed = fruits.some(<span class="function"><span class="params">f</span> =&gt;</span> f.color == <span class="string">'red'</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(isAnyRed); <span class="comment">// true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-使用可选链和空值合并"><a href="#6-使用可选链和空值合并" class="headerlink" title="6. 使用可选链和空值合并"></a>6. 使用可选链和空值合并</h2><p>这有两个为编写更清晰的条件语句而即将成为 JavaScript 增强的功能。当写这篇文章时，它们还没有被完全支持，你需要使用 Babel 来编译。</p><p>可选链允许我们没有明确检查中间节点是否存在地处理 tree-like 结构，空值合并和可选链组合起来工作得很好，以确保为不存在的值赋一个默认值。</p><p>这有一个例子：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> car = &#123;</span><br><span class="line">    model: <span class="string">'Fiesta'</span>,</span><br><span class="line">    manufacturer: &#123;</span><br><span class="line">    name: <span class="string">'Ford'</span>,</span><br><span class="line">    address: &#123;</span><br><span class="line">        street: <span class="string">'Some Street Name'</span>,</span><br><span class="line">        <span class="built_in">number</span>: <span class="string">'5555'</span>,</span><br><span class="line">        state: <span class="string">'USA'</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">// to get the car model</span></span><br><span class="line"><span class="keyword">const</span> model = car &amp;&amp; car.model || <span class="string">'default model'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// to get the manufacturer street</span></span><br><span class="line"><span class="keyword">const</span> street = car &amp;&amp; car.manufacturer &amp;&amp; car.manufacturer.address &amp;&amp; </span><br><span class="line">car.manufacturer.address.street || <span class="string">'default street'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// request an un-existing property</span></span><br><span class="line"><span class="keyword">const</span> phoneNumber = car &amp;&amp; car.manufacturer &amp;&amp; car.manufacturer.address </span><br><span class="line">&amp;&amp; car.manufacturer.phoneNumber;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(model) <span class="comment">// 'Fiesta'</span></span><br><span class="line"><span class="built_in">console</span>.log(street) <span class="comment">// 'Some Street Name'</span></span><br><span class="line"><span class="built_in">console</span>.log(phoneNumber) <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><p>所以，如果我们想要打印是否车辆生产商来自美国，代码将看起来像这样：</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">const isManufacturerFromUSA = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">   <span class="keyword">if</span>(car &amp;&amp; car.manufacturer &amp;&amp; car.manufacturer.address &amp;&amp; </span><br><span class="line"> car.manufacturer.address.state === <span class="string">'USA'</span>) &#123;</span><br><span class="line">     <span class="built_in">console</span>.log(<span class="string">'true'</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">checkCarManufacturerState() <span class="regexp">//</span> <span class="string">'true'</span></span><br></pre></td></tr></table></figure><p>你能清晰地看到当有一个更复杂的对象结构时，这能变得多乱。有一些第三方的库有它们自己的函数，像 lodash 或 idx。例如 lodash 有 _.get 方法。然而，JavaScript 语言本身被引入这个特性是非常酷的。</p><p>这展示了这些新特性如何工作：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// to get the car model</span></span><br><span class="line"><span class="keyword">const</span> model = car?.model ?? <span class="string">'default model'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// to get the manufacturer street</span></span><br><span class="line"><span class="keyword">const</span> street = car?.manufacturer?.address?.street ?? <span class="string">'default street'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// to check if the car manufacturer is from the USA</span></span><br><span class="line"><span class="keyword">const</span> isManufacturerFromUSA = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">   <span class="keyword">if</span>(car?.manufacturer?.address?.state === <span class="string">'USA'</span>) &#123;</span><br><span class="line">     <span class="built_in">console</span>.log(<span class="string">'true'</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这看起来很美观并容易维护。它已经到 TC39 stage 3 阶段，让我们等待它获得批准，然后我们就能无处不在地看到这难以置信的语法的使用。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>让我们为了编写更清晰、易维护的代码，学习并尝试新的技巧和技术，因为在几个月后，长长的条件看起来像搬石头砸自己的脚。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;在任何编程语言中，代码需要根据不同的条件在给定的输入中做不同的决定和执行相应的动作。&lt;/p&gt;
&lt;p&gt;例如，在一个游戏中，如果玩家生命点为0，游戏结束。在天气应用中，如果在早上被查看，显示一个日出图片，如果是晚上，则显示星星和月亮。在这篇文章中，我们将探索JavaScript中所谓的条件语句如何工作。&lt;br&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="https://chongdee.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://chongdee.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>手写Promise讲解</title>
    <link href="https://chongdee.github.io/2021/05/09/JavaScript/%E6%89%8B%E5%86%99Promise%E8%AE%B2%E8%A7%A3/"/>
    <id>https://chongdee.github.io/2021/05/09/JavaScript/手写Promise讲解/</id>
    <published>2021-05-08T19:24:00.003Z</published>
    <updated>2021-05-08T19:27:54.328Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2 id="整体结构"><a href="#整体结构" class="headerlink" title="整体结构"></a>整体结构</h2><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="type">MyPromise</span> &#123;</span></span><br><span class="line"><span class="class">    constructor(<span class="title">fn</span>)&#123;</span></span><br><span class="line"><span class="class">        </span></span><br><span class="line"><span class="class">    &#125;</span></span><br><span class="line"><span class="class">    resolve()&#123;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">    &#125;</span></span><br><span class="line"><span class="class">    then()&#123;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">    &#125;</span></span><br><span class="line"><span class="class">    reject()&#123;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">    &#125;</span></span><br><span class="line"><span class="class">    catch()&#123;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">    &#125;</span></span><br><span class="line"><span class="class">&#125;</span></span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="实现构造函数"><a href="#实现构造函数" class="headerlink" title="实现构造函数"></a>实现构造函数</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyPromise</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(fn)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">typeof</span> fn !== <span class="string">'function'</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">`MyPromise fn <span class="subst">$&#123;fn&#125;</span> is not a function`</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.state = <span class="string">'pending'</span>;</span><br><span class="line">        <span class="keyword">this</span>.value = <span class="keyword">void</span> <span class="number">0</span>;</span><br><span class="line">        fn(<span class="keyword">this</span>.resolve.bind(<span class="keyword">this</span>),<span class="keyword">this</span>.reject.bind(<span class="keyword">this</span>))</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>构造函数接收一个参数fn，且这个参数必须是一个函数，因为我们一般这样使用new Promise((resolve,reject)=&gt;{});<br>然后初始化一下promise的状态，默认开始为pending，初始化value的值。<br>fn接收两个参数，resolve、reject</p></blockquote><h2 id="resolve"><a href="#resolve" class="headerlink" title="resolve"></a>resolve</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyPromise</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(fn)&#123;</span><br><span class="line">        <span class="keyword">if</span>(typeof fn !== <span class="string">'function'</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> new TypeError(`MyPromise fn $&#123;fn&#125; <span class="keyword">is</span> not a function`)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.state = <span class="string">'pending'</span>;</span><br><span class="line">        <span class="keyword">this</span>.value = void <span class="number">0</span>;</span><br><span class="line">        fn(<span class="keyword">this</span>.resolve.bind(<span class="keyword">this</span>),<span class="keyword">this</span>.reject.bind(<span class="keyword">this</span>))</span><br><span class="line">    &#125;</span><br><span class="line">    resolve(value)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.state !== <span class="string">'pending'</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">this</span>.state = <span class="string">'fulfilled'</span>;</span><br><span class="line">        <span class="keyword">this</span>.value = value</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>当resolve执行，接收到一个值之后；状态就由 pending -&gt; fulfilled；当前的值为接收的值</p><h2 id="reject"><a href="#reject" class="headerlink" title="reject"></a>reject</h2></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyPromise</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(fn)&#123;</span><br><span class="line">        <span class="keyword">if</span>(typeof fn !== <span class="string">'function'</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> new TypeError(`MyPromise fn $&#123;fn&#125; <span class="keyword">is</span> not a function`)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.state = <span class="string">'pending'</span>;</span><br><span class="line">        <span class="keyword">this</span>.value = void <span class="number">0</span>;</span><br><span class="line">        fn(<span class="keyword">this</span>.resolve.bind(<span class="keyword">this</span>),<span class="keyword">this</span>.reject.bind(<span class="keyword">this</span>))</span><br><span class="line">    &#125;</span><br><span class="line">    resolve(value)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.state !== <span class="string">'pending'</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">this</span>.state = <span class="string">'fulfilled'</span>;</span><br><span class="line">        <span class="keyword">this</span>.value = value</span><br><span class="line">    &#125;</span><br><span class="line">    reject(reason)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.state !== <span class="string">'pending'</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">this</span>.state = <span class="string">'rejected'</span>;</span><br><span class="line">        <span class="keyword">this</span>.value = reason</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>当reject执行，接收到一个值之后；状态就由 pending -&gt; rejected；当前的值为接收的值</p></blockquote><h2 id="then"><a href="#then" class="headerlink" title="then"></a>then</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyPromise</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(fn)&#123;</span><br><span class="line">        <span class="keyword">if</span>(typeof fn !== <span class="string">'function'</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> new TypeError(`MyPromise fn $&#123;fn&#125; <span class="keyword">is</span> not a function`)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.state = <span class="string">'pending'</span>;</span><br><span class="line">        <span class="keyword">this</span>.value = void <span class="number">0</span>;</span><br><span class="line">        fn(<span class="keyword">this</span>.resolve.bind(<span class="keyword">this</span>),<span class="keyword">this</span>.reject.bind(<span class="keyword">this</span>))</span><br><span class="line">    &#125;</span><br><span class="line">    resolve(value)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.state !== <span class="string">'pending'</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">this</span>.state = <span class="string">'fulfilled'</span>;</span><br><span class="line">        <span class="keyword">this</span>.value = value</span><br><span class="line">    &#125;</span><br><span class="line">    reject(reason)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.state !== <span class="string">'pending'</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">this</span>.state = <span class="string">'rejected'</span>;</span><br><span class="line">        <span class="keyword">this</span>.value = reason</span><br><span class="line">    &#125;</span><br><span class="line">    then(fulfilled,rejected)&#123;</span><br><span class="line">        <span class="keyword">if</span> (typeof fulfilled !== <span class="string">'function'</span> &amp;&amp; typeof rejected !== <span class="string">'function'</span> ) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (typeof fulfilled !== <span class="string">'function'</span> &amp;&amp; <span class="keyword">this</span>.state === <span class="string">'fulfilled'</span> ||</span><br><span class="line">            typeof rejected !== <span class="string">'function'</span> &amp;&amp; <span class="keyword">this</span>.state === <span class="string">'rejected'</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> new MyPromise((resolve,reject)=&gt;&#123;</span><br><span class="line">            <span class="keyword">if</span>(fulfilled &amp;&amp; typeof fulfilled === <span class="string">'function'</span> &amp;&amp; <span class="keyword">this</span>.state === <span class="string">'fulfilled'</span>)&#123;</span><br><span class="line">                let result = fulfilled(<span class="keyword">this</span>.value);</span><br><span class="line">                <span class="keyword">if</span>(result &amp;&amp; typeof result.then === <span class="string">'function'</span>)&#123;</span><br><span class="line">                    <span class="keyword">return</span> result.then(resolve,reject)</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    resolve(result)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(rejected &amp;&amp; typeof rejected === <span class="string">'function'</span> &amp;&amp; <span class="keyword">this</span>.state === <span class="string">'rejected'</span>)&#123;</span><br><span class="line">                let result = rejected(<span class="keyword">this</span>.value);</span><br><span class="line">                <span class="keyword">if</span>(result &amp;&amp; typeof result.then === <span class="string">'function'</span>)&#123;</span><br><span class="line">                    <span class="keyword">return</span> result.then(resolve,reject)</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    resolve(result)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>then的实现比较关键，首先有两个判断，第一个判断传的两个参数是否都是函数，如果都不是return this执行下一步操作。<br>第二个判断的作用是，比如，现在状态从pending -&gt; rejected;但是中间代码中有许多个.then的操作，我们需要跳过这些操作执行.catch的代码。如下面的代码，执行结果只会打印1</p></blockquote><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Promise(<span class="function"><span class="params">(resolve,reject)</span>=&gt;</span>&#123;</span><br><span class="line">    reject(<span class="number">1</span>)</span><br><span class="line">&#125;).<span class="keyword">then</span>(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">2</span>)</span><br><span class="line">&#125;).<span class="keyword">then</span>(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">3</span>)</span><br><span class="line">&#125;).<span class="keyword">catch</span>(<span class="function"><span class="params">(e)</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(e)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>下面有两个判断，作用是判断是rejected还是fulfilled,首先看fulfilled，如果是fulfilled的话，首先执行fulfilled函数，并把当前的value值传过去，也就是下面这步操作,res就是传过去的value值，并执行了(res)=&gt;{console.log(res)}这段代码;执行完成之后我们得到了result；也就是2这个结果，下面就是判断当前结果是否是一个promise实例了，也就是下面注释了的情况，现在我们直接执行resolve(result);</p></blockquote><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Promise(<span class="function"><span class="params">(resolve,reject)</span>=&gt;</span>&#123;</span><br><span class="line">    resolve(<span class="number">1</span>)</span><br><span class="line">&#125;).<span class="keyword">then</span>(<span class="function"><span class="params">(res)</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span></span><br><span class="line">    <span class="regexp">//</span><span class="keyword">return</span> <span class="keyword">new</span> Promise(resolve=&gt;&#123;&#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="catch"><a href="#catch" class="headerlink" title="catch"></a>catch</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyPromise</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">catch</span>(rejected)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.then(<span class="literal">null</span>,rejected)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="完成代码"><a href="#完成代码" class="headerlink" title="完成代码"></a>完成代码</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyPromise</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(fn)&#123;</span><br><span class="line">        <span class="keyword">if</span>(typeof fn !== <span class="string">'function'</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> new TypeError(`MyPromise fn $&#123;fn&#125; <span class="keyword">is</span> not a function`)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.state = <span class="string">'pending'</span>;</span><br><span class="line">        <span class="keyword">this</span>.value = void <span class="number">0</span>;</span><br><span class="line">        fn(<span class="keyword">this</span>.resolve.bind(<span class="keyword">this</span>),<span class="keyword">this</span>.reject.bind(<span class="keyword">this</span>))</span><br><span class="line">    &#125;</span><br><span class="line">    resolve(value)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.state !== <span class="string">'pending'</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">this</span>.state = <span class="string">'fulfilled'</span>;</span><br><span class="line">        <span class="keyword">this</span>.value = value</span><br><span class="line">    &#125;</span><br><span class="line">    reject(reason)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.state !== <span class="string">'pending'</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">this</span>.state = <span class="string">'rejected'</span>;</span><br><span class="line">        <span class="keyword">this</span>.value = reason</span><br><span class="line">    &#125;</span><br><span class="line">    then(fulfilled,rejected)&#123;</span><br><span class="line">        <span class="keyword">if</span> (typeof fulfilled !== <span class="string">'function'</span> &amp;&amp; typeof rejected !== <span class="string">'function'</span> ) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (typeof fulfilled !== <span class="string">'function'</span> &amp;&amp; <span class="keyword">this</span>.state === <span class="string">'fulfilled'</span> ||</span><br><span class="line">            typeof rejected !== <span class="string">'function'</span> &amp;&amp; <span class="keyword">this</span>.state === <span class="string">'rejected'</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> new MyPromise((resolve,reject)=&gt;&#123;</span><br><span class="line">            <span class="keyword">if</span>(fulfilled &amp;&amp; typeof fulfilled === <span class="string">'function'</span> &amp;&amp; <span class="keyword">this</span>.state === <span class="string">'fulfilled'</span>)&#123;</span><br><span class="line">                let result = fulfilled(<span class="keyword">this</span>.value);</span><br><span class="line">                <span class="keyword">if</span>(result &amp;&amp; typeof result.then === <span class="string">'function'</span>)&#123;</span><br><span class="line">                    <span class="keyword">return</span> result.then(resolve,reject)</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    resolve(result)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(rejected &amp;&amp; typeof rejected === <span class="string">'function'</span> &amp;&amp; <span class="keyword">this</span>.state === <span class="string">'rejected'</span>)&#123;</span><br><span class="line">                let result = rejected(<span class="keyword">this</span>.value);</span><br><span class="line">                <span class="keyword">if</span>(result &amp;&amp; typeof result.then === <span class="string">'function'</span>)&#123;</span><br><span class="line">                    <span class="keyword">return</span> result.then(resolve,reject)</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    resolve(result)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span>(rejected)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.then(<span class="literal">null</span>,rejected)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;整体结构&quot;&gt;&lt;a href=&quot;#整体结构&quot; class=&quot;headerlink&quot; title=&quot;整体结构&quot;&gt;&lt;/a&gt;整体结构&lt;/h2&gt;&lt;figure class=&quot;highlight haskell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;MyPromise&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;    constructor(&lt;span class=&quot;title&quot;&gt;fn&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;        &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;    resolve()&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;    then()&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;    reject()&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;    catch()&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="https://chongdee.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://chongdee.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>路由权限,大文件下载等问题</title>
    <link href="https://chongdee.github.io/2021/05/09/vue/%E8%B7%AF%E7%94%B1%E6%9D%83%E9%99%90,%E5%A4%A7%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD%E7%AD%89%E9%97%AE%E9%A2%98/"/>
    <id>https://chongdee.github.io/2021/05/09/vue/路由权限,大文件下载等问题/</id>
    <published>2021-05-08T19:13:18.469Z</published>
    <updated>2021-05-08T19:16:25.784Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p>有一些问题不限于 Vue，还适应于其他类型的 SPA 项目。</p><h2 id="1-页面权限控制和登陆验证"><a href="#1-页面权限控制和登陆验证" class="headerlink" title="1. 页面权限控制和登陆验证"></a>1. 页面权限控制和登陆验证</h2><h3 id="页面权限控制"><a href="#页面权限控制" class="headerlink" title="页面权限控制"></a>页面权限控制</h3><p>页面权限控制是什么意思呢？</p><p>就是一个网站有不同的角色，比如管理员和普通用户，要求不同的角色能访问的页面是不一样的。如果一个页面，有角色越权访问，这时就得做出限制了。<br><a id="more"></a><br>一种方法是通过动态添加路由和菜单来做控制，不能访问的页面不添加到路由表里，这是其中一种办法。具体细节请看下一节的《动态菜单》。</p><p>另一种办法就是所有的页面都在路由表里，只是在访问的时候要判断一下角色权限。如果有权限就允许访问，没有权限就拒绝，跳转到 404 页面。</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>在每一个路由的 meta 属性里，将能访问该路由的角色添加到 roles 里。用户每次登陆后，将用户的角色返回。然后在访问页面时，把路由的 meta 属性和用户的角色进行对比，如果用户的角色在路由的 roles 里，那就是能访问，如果不在就拒绝访问。</p><h3 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h3><p>路由信息</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">routes: [</span><br><span class="line">    &#123;</span><br><span class="line">        path: <span class="string">'/login'</span>,</span><br><span class="line">        name: <span class="string">'login'</span>,</span><br><span class="line">        meta: &#123;</span><br><span class="line">            roles: [<span class="string">'admin'</span>, <span class="string">'user'</span>]</span><br><span class="line">        &#125;,</span><br><span class="line">        component: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'../components/Login.vue'</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        path: <span class="string">'home'</span>,</span><br><span class="line">        name: <span class="string">'home'</span>,</span><br><span class="line">        meta: &#123;</span><br><span class="line">            roles: [<span class="string">'admin'</span>]</span><br><span class="line">        &#125;,</span><br><span class="line">        component: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'../views/Home.vue'</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>页面控制</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 假设角色有两种：admin 和 user</span></span><br><span class="line"><span class="comment">// 这里是从后台获取的用户角色</span></span><br><span class="line">const role = <span class="string">'user'</span></span><br><span class="line"><span class="comment">// 在进入一个页面前会触发 router.beforeEach 事件</span></span><br><span class="line">router.beforeEach((to, <span class="keyword">from</span>, <span class="keyword">next</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (to.meta.roles.<span class="keyword">includes</span>(role)) &#123;</span><br><span class="line">        <span class="keyword">next</span>()</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">next</span>(&#123;path: <span class="string">'/404'</span>&#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>登陆验证<br>网站一般只要登陆过一次后，接下来该网站的其他页面都是可以直接访问的，不用再次登陆。我们可以通过 token 或 cookie 来实现，下面用代码来展示一下如何用 token 控制登陆验证。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">router.beforeEach((to, from, <span class="built_in">next</span>) =&gt; &#123;</span><br><span class="line">    // 如果有token 说明该用户已登陆</span><br><span class="line">    <span class="keyword">if</span> (localStorage.getItem(<span class="string">'token'</span>)) &#123;</span><br><span class="line">        // 在已登陆的情况下访问登陆页会重定向到首页</span><br><span class="line">        <span class="keyword">if</span> (to.<span class="built_in">path</span> === <span class="string">'/login'</span>) &#123;</span><br><span class="line">            <span class="built_in">next</span>(&#123;<span class="built_in">path</span>: <span class="string">'/'</span>&#125;)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">next</span>(&#123;<span class="built_in">path</span>: to.<span class="built_in">path</span> || <span class="string">'/'</span>&#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        // 没有登陆则访问任何页面都重定向到登陆页</span><br><span class="line">        <span class="keyword">if</span> (to.<span class="built_in">path</span> === <span class="string">'/login'</span>) &#123;</span><br><span class="line">            <span class="built_in">next</span>()</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">next</span>(`/login?redirect=$&#123;to.<span class="built_in">path</span>&#125;`)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="2-动态菜单"><a href="#2-动态菜单" class="headerlink" title="2. 动态菜单"></a>2. 动态菜单</h2><p>写后台管理系统，估计有不少人遇过这样的需求：根据后台数据动态添加路由和菜单。为什么这么做呢？因为不同的用户有不同的权限，能访问的页面是不一样的。</p><h3 id="动态添加路由"><a href="#动态添加路由" class="headerlink" title="动态添加路由"></a>动态添加路由</h3><p>利用 vue-router 的 addRoutes 方法可以动态添加路由。</p><p>先看一下官方介绍：</p><p><strong>router.addRoutes</strong></p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">router</span><span class="selector-class">.addRoutes</span>(<span class="attribute">routes</span>: Array&lt;RouteConfig&gt;)</span><br></pre></td></tr></table></figure><p>动态添加更多的路由规则。参数必须是一个符合 routes 选项要求的数组。</p><p>举个例子：</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">const router = <span class="keyword">new</span> Router(&#123;</span><br><span class="line">    routes: [</span><br><span class="line">        &#123;</span><br><span class="line">            path: <span class="string">'/login'</span>,</span><br><span class="line">            name: <span class="string">'login'</span>,</span><br><span class="line">            component: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'../components/Login.vue'</span>)</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;path: <span class="string">'/'</span>, redirect: <span class="string">'/home'</span>&#125;,</span><br><span class="line">    ]   </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>上面的代码和下面的代码效果是一样的</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">const router = <span class="keyword">new</span> Router(&#123;</span><br><span class="line">    routes: [</span><br><span class="line">        &#123;path: <span class="string">'/'</span>, redirect: <span class="string">'/home'</span>&#125;,</span><br><span class="line">    ]   </span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">router.addRoutes([</span><br><span class="line">    &#123;</span><br><span class="line">        path: <span class="string">'/login'</span>,</span><br><span class="line">        name: <span class="string">'login'</span>,</span><br><span class="line">        component: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'../components/Login.vue'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">])</span><br></pre></td></tr></table></figure><p>在动态添加路由的过程中，如果有 404 页面，一定要放在最后添加，否则在登陆的时候添加完页面会重定向到 404 页面。</p><p>类似于这样，这种规则一定要最后添加。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attribute">path</span>: <span class="string">'*'</span>, redirect: <span class="string">'/404'</span>&#125;</span><br></pre></td></tr></table></figure><h3 id="动态生成菜单"><a href="#动态生成菜单" class="headerlink" title="动态生成菜单"></a>动态生成菜单</h3><p>假设后台返回来的数据长这样：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 左侧菜单栏数据</span></span><br><span class="line"><span class="attribute">menuItems</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attribute">name</span>: <span class="string">'home'</span>, <span class="comment">// 要跳转的路由名称 不是路径</span></span><br><span class="line">        <span class="attribute">size</span>: <span class="number">18</span>, <span class="comment">// icon大小</span></span><br><span class="line">        <span class="attribute">type</span>: <span class="string">'md-home'</span>, <span class="comment">// icon类型</span></span><br><span class="line">        <span class="attribute">text</span>: <span class="string">'主页'</span> <span class="comment">// 文本内容</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attribute">text</span>: <span class="string">'二级菜单'</span>,</span><br><span class="line">        <span class="attribute">type</span>: <span class="string">'ios-paper'</span>,</span><br><span class="line">        <span class="attribute">children</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attribute">type</span>: <span class="string">'ios-grid'</span>,</span><br><span class="line">                <span class="attribute">name</span>: <span class="string">'t1'</span>,</span><br><span class="line">                <span class="attribute">text</span>: <span class="string">'表格'</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attribute">text</span>: <span class="string">'三级菜单'</span>,</span><br><span class="line">                <span class="attribute">type</span>: <span class="string">'ios-paper'</span>,</span><br><span class="line">                <span class="attribute">children</span>: [</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="attribute">type</span>: <span class="string">'ios-notifications-outline'</span>,</span><br><span class="line">                        <span class="attribute">name</span>: <span class="string">'msg'</span>,</span><br><span class="line">                        <span class="attribute">text</span>: <span class="string">'查看消息'</span></span><br><span class="line">                    &#125;,</span><br><span class="line">                ]</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>来看看怎么将它转化为菜单栏，我在这里使用了 iview 的组件，不用重复造轮子。</p><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="comment">&lt;!-- 菜单栏 --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">Menu</span> <span class="attr">ref</span>=<span class="string">"asideMenu"</span> <span class="attr">theme</span>=<span class="string">"dark"</span> <span class="attr">width</span>=<span class="string">"100%"</span> @<span class="attr">on-select</span>=<span class="string">"gotoPage"</span> </span></span></span><br><span class="line"><span class="xml">accordion :open-names="openMenus" :active-name="currentPage" @on-open-change="menuChange"&gt;</span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- 动态菜单 --&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">"(item, index) in menuItems"</span> <span class="attr">:key</span>=<span class="string">"index"</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">Submenu</span> <span class="attr">v-if</span>=<span class="string">"item.children"</span> <span class="attr">:name</span>=<span class="string">"index"</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot</span>=<span class="string">"title"</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">Icon</span> <span class="attr">:size</span>=<span class="string">"item.size"</span> <span class="attr">:type</span>=<span class="string">"item.type"</span>/&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-show</span>=<span class="string">"isShowAsideTitle"</span>&gt;</span></span><span class="template-variable">&#123;&#123;item.text&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">"(subItem, i) in item.children"</span> <span class="attr">:key</span>=<span class="string">"index + i"</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">Submenu</span> <span class="attr">v-if</span>=<span class="string">"subItem.children"</span> <span class="attr">:name</span>=<span class="string">"index + '-' + i"</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot</span>=<span class="string">"title"</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">Icon</span> <span class="attr">:size</span>=<span class="string">"subItem.size"</span> <span class="attr">:type</span>=<span class="string">"subItem.type"</span>/&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-show</span>=<span class="string">"isShowAsideTitle"</span>&gt;</span></span><span class="template-variable">&#123;&#123;subItem.text&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">MenuItem</span> <span class="attr">class</span>=<span class="string">"menu-level-3"</span> <span class="attr">v-for</span>=<span class="string">"(threeItem, k) in subItem.children"</span> <span class="attr">:name</span>=<span class="string">"threeItem.name"</span> <span class="attr">:key</span>=<span class="string">"index + i + k"</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">Icon</span> <span class="attr">:size</span>=<span class="string">"threeItem.size"</span> <span class="attr">:type</span>=<span class="string">"threeItem.type"</span>/&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-show</span>=<span class="string">"isShowAsideTitle"</span>&gt;</span></span><span class="template-variable">&#123;&#123;threeItem.text&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;/<span class="name">MenuItem</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">Submenu</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">MenuItem</span> <span class="attr">v-else</span> <span class="attr">v-show</span>=<span class="string">"isShowAsideTitle"</span> <span class="attr">:name</span>=<span class="string">"subItem.name"</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">Icon</span> <span class="attr">:size</span>=<span class="string">"subItem.size"</span> <span class="attr">:type</span>=<span class="string">"subItem.type"</span>/&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-show</span>=<span class="string">"isShowAsideTitle"</span>&gt;</span></span><span class="template-variable">&#123;&#123;subItem.text&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">MenuItem</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">Submenu</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">MenuItem</span> <span class="attr">v-else</span> <span class="attr">:name</span>=<span class="string">"item.name"</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">Icon</span> <span class="attr">:size</span>=<span class="string">"item.size"</span> <span class="attr">:type</span>=<span class="string">"item.type"</span> /&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-show</span>=<span class="string">"isShowAsideTitle"</span>&gt;</span></span><span class="template-variable">&#123;&#123;item.text&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">MenuItem</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">Menu</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>代码不用看得太仔细，理解原理即可，其实就是通过三次 v-for 不停的对子数组进行循环，生成三级菜单。</p><p>不过这个动态菜单有缺陷，就是只支持三级菜单。一个更好的做法是把生成菜单的过程封装成组件，然后递归调用，这样就能支持无限级的菜单。在生菜菜单时，需要判断一下是否还有子菜单，如果有就递归调用组件。</p><p><strong>动态路由</strong>因为上面已经说过了用 addRoutes 来实现，现在看看具体怎么做。</p><p>首先，要把项目所有的页面路由都列出来，再用后台返回来的数据动态匹配，能匹配上的就把路由加上，不能匹配上的就不加。最后把这个新生成的路由数据用 addRoutes 添加到路由表里。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> asyncRoutes = &#123;</span><br><span class="line">    <span class="string">'home'</span>: &#123;</span><br><span class="line">        path: <span class="string">'home'</span>,</span><br><span class="line">        name: <span class="string">'home'</span>,</span><br><span class="line">        component: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'../views/Home.vue'</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">'t1'</span>: &#123;</span><br><span class="line">        path: <span class="string">'t1'</span>,</span><br><span class="line">        name: <span class="string">'t1'</span>,</span><br><span class="line">        component: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'../views/T1.vue'</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">'password'</span>: &#123;</span><br><span class="line">        path: <span class="string">'password'</span>,</span><br><span class="line">        name: <span class="string">'password'</span>,</span><br><span class="line">        component: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'../views/Password.vue'</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">'msg'</span>: &#123;</span><br><span class="line">        path: <span class="string">'msg'</span>,</span><br><span class="line">        name: <span class="string">'msg'</span>,</span><br><span class="line">        component: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'../views/Msg.vue'</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">'userinfo'</span>: &#123;</span><br><span class="line">        path: <span class="string">'userinfo'</span>,</span><br><span class="line">        name: <span class="string">'userinfo'</span>,</span><br><span class="line">        component: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'../views/UserInfo.vue'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 传入后台数据 生成路由表</span></span><br><span class="line">menusToRoutes(menusData)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将菜单信息转成对应的路由信息 动态添加</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">menusToRoutes</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> result = []</span><br><span class="line">    <span class="keyword">const</span> children = []</span><br><span class="line"></span><br><span class="line">    result.push(&#123;</span><br><span class="line">        path: <span class="string">'/'</span>,</span><br><span class="line">        component: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'../components/Index.vue'</span>),</span><br><span class="line">        children,</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    data.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">        generateRoutes(children, item)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    children.push(&#123;</span><br><span class="line">        path: <span class="string">'error'</span>,</span><br><span class="line">        name: <span class="string">'error'</span>,</span><br><span class="line">        component: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'../components/Error.vue'</span>)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 最后添加404页面 否则会在登陆成功后跳到404页面</span></span><br><span class="line">    result.push(</span><br><span class="line">        &#123;<span class="attr">path</span>: <span class="string">'*'</span>, <span class="attr">redirect</span>: <span class="string">'/error'</span>&#125;,</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">generateRoutes</span>(<span class="params">children, item</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (item.name) &#123;</span><br><span class="line">        children.push(asyncRoutes[item.name])</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (item.children) &#123;</span><br><span class="line">        item.children.forEach(<span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">            generateRoutes(children, e)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>动态菜单的代码实现放在 github 上，分别放在这个项目的 src/components/Index.vue、src/permission.js 和 src/utils/index.js 文件里。</p><h2 id="3-前进刷新后退不刷新"><a href="#3-前进刷新后退不刷新" class="headerlink" title="3. 前进刷新后退不刷新"></a>3. 前进刷新后退不刷新</h2><h3 id="需求一："><a href="#需求一：" class="headerlink" title="需求一："></a>需求一：</h3><p>在一个列表页中，第一次进入的时候，请求获取数据。</p><p>点击某个列表项，跳到详情页，再从详情页后退回到列表页时，不刷新。</p><p>也就是说从其他页面进到列表页，需要刷新获取数据，从详情页返回到列表页时不要刷新。</p><p><strong>解决方案</strong></p><p>在 App.vue设置：</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">keep</span>-alive <span class="keyword">include</span>=<span class="string">"list"</span>&gt;</span><br><span class="line">    &lt;router-<span class="keyword">view</span>/&gt;</span><br><span class="line">&lt;/<span class="keyword">keep</span>-alive&gt;</span><br></pre></td></tr></table></figure><p>假设列表页为 <strong>list.vue</strong>，详情页为<strong>detail.vue</strong>，这两个都是子组件。</p><p>我们在 keep-alive 添加列表页的名字，缓存列表页。</p><p>然后在列表页的 created 函数里添加 ajax 请求，这样只有第一次进入到列表页的时候才会请求数据，当从列表页跳到详情页，再从详情页回来的时候，列表页就不会刷新。这样就可以解决问题了。</p><h3 id="需求二："><a href="#需求二：" class="headerlink" title="需求二："></a>需求二：</h3><p>在需求一的基础上，再加一个要求：可以在详情页中删除对应的列表项，这时返回到列表页时需要刷新重新获取数据。</p><p>我们可以在路由配置文件上对 detail.vue 增加一个 meta 属性。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   <span class="attribute">path</span>: <span class="string">'/detail'</span>,</span><br><span class="line">   name: <span class="string">'detail'</span>,</span><br><span class="line">   component: () =&gt; <span class="built_in">import</span>(<span class="string">'../view/detail.vue'</span>),</span><br><span class="line">   meta: &#123;isRefresh: true&#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>这个 meta 属性，可以在详情页中通过 this.$route.meta.isRefresh 来读取和设置。</p><p>设置完这个属性，还要在 App.vue 文件里设置 watch 一下 $route 属性。</p><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">watch: &#123;</span><br><span class="line">       $route(<span class="keyword">to</span>, <span class="keyword">from</span>) &#123;</span><br><span class="line">           const fname = <span class="keyword">from</span>.<span class="built_in">name</span></span><br><span class="line">           const tname = <span class="keyword">to</span>.<span class="built_in">name</span></span><br><span class="line">           <span class="keyword">if</span> (<span class="keyword">from</span>.meta.isRefresh || (fname != <span class="string">'detail'</span> &amp;&amp; tname == <span class="string">'list'</span>)) &#123;</span><br><span class="line">               <span class="keyword">from</span>.meta.isRefresh = <span class="literal">false</span></span><br><span class="line">       <span class="comment">// 在这里重新请求数据</span></span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;,</span><br></pre></td></tr></table></figure><p>这样就不需要在列表页的 created 函数里用 ajax 来请求数据了，统一放在 App.vue 里来处理。</p><p>触发请求数据有两个条件：</p><ol><li>从其他页面（除了详情页）进来列表时，需要请求数据。</li><li>从详情页返回到列表页时，如果详情页 meta 属性中的 isRefresh 为 true，也需要重新请求数据。</li></ol><p>当我们在详情页中删除了对应的列表项时，就可以将详情页 meta 属性中的 isRefresh 设为 true。这时再返回到列表页，页面会重新刷新。</p><h3 id="解决方案二"><a href="#解决方案二" class="headerlink" title="解决方案二"></a>解决方案二</h3><p>对于需求二其实还有一个更简洁的方案，那就是使用 router-view 的 key 属性。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">keep-alive</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-view</span> <span class="attr">:key</span>=<span class="string">"$route.fullPath"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">keep-alive</span>&gt;</span></span><br></pre></td></tr></table></figure><p>首先 keep-alive 让所有页面都缓存，当你不想缓存某个路由页面，要重新加载它时，可以在跳转时传一个随机字符串，这样它就能重新加载了。例如从列表页进入了详情页，然后在详情页中删除了列表页中的某个选项，此时从详情页退回列表页时就要刷新，我们可以这样跳转：</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">this.$router.push(&#123;</span><br><span class="line">    path: <span class="string">'/list'</span>,</span><br><span class="line">    query: &#123; <span class="string">'randomID'</span>: <span class="string">'id'</span> + Math.random() &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>这样的方案相对来说还是更简洁的。</p><h2 id="4-多个请求下-loading-的展示与关闭"><a href="#4-多个请求下-loading-的展示与关闭" class="headerlink" title="4. 多个请求下 loading 的展示与关闭"></a>4. 多个请求下 loading 的展示与关闭</h2><p>一般情况下，在 vue 中结合 axios 的拦截器控制 loading 展示和关闭，是这样的：</p><p>在 App.vue 配置一个全局 loading。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"app"</span>&gt;</span><br><span class="line">    &lt;keep-alive :include=<span class="string">"keepAliveData"</span>&gt;</span><br><span class="line">        &lt;router-view/&gt;</span><br><span class="line">    &lt;<span class="regexp">/keep-alive&gt;</span></span><br><span class="line"><span class="regexp">    &lt;div class="loading" v-show="isShowLoading"&gt;</span></span><br><span class="line"><span class="regexp">        &lt;Spin size="large"&gt;&lt;/</span>Spin&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br></pre></td></tr></table></figure><p>同时设置 axios 拦截器。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 添加请求拦截器</span></span><br><span class="line"> <span class="keyword">this</span>.$axios.interceptors.request.use(config =&gt; &#123;</span><br><span class="line">     <span class="keyword">this</span>.isShowLoading = <span class="literal">true</span></span><br><span class="line">     <span class="keyword">return</span> config</span><br><span class="line"> &#125;, error =&gt; &#123;</span><br><span class="line">     <span class="keyword">this</span>.isShowLoading = <span class="literal">false</span></span><br><span class="line">     <span class="keyword">return</span> Promise.reject(error)</span><br><span class="line"> &#125;)</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 添加响应拦截器</span></span><br><span class="line"> <span class="keyword">this</span>.$axios.interceptors.response.use(response =&gt; &#123;</span><br><span class="line">     <span class="keyword">this</span>.isShowLoading = <span class="literal">false</span></span><br><span class="line">     <span class="keyword">return</span> response</span><br><span class="line"> &#125;, error =&gt; &#123;</span><br><span class="line">     <span class="keyword">this</span>.isShowLoading = <span class="literal">false</span></span><br><span class="line">     <span class="keyword">return</span> Promise.reject(error)</span><br><span class="line"> &#125;)</span><br></pre></td></tr></table></figure><p>这个拦截器的功能是在请求前打开 loading，请求结束或出错时关闭 loading。</p><p>如果每次只有一个请求，这样运行是没问题的。但同时有多个请求并发，就会有问题了。</p><p><strong>举例：</strong></p><p>假如现在同时发起两个请求，在请求前，拦截器 this.isShowLoading = true 将 loading 打开。</p><p>现在有一个请求结束了。this.isShowLoading = false 拦截器关闭 loading，但是另一个请求由于某些原因并没有结束。</p><p>造成的后果就是页面请求还没完成，loading 却关闭了，用户会以为页面加载完成了，结果页面不能正常运行，导致用户体验不好。</p><p><strong>解决方案</strong></p><p>增加一个 loadingCount 变量，用来计算请求的次数。</p><p>loadingCount: 0<br>再增加两个方法，来对 loadingCount  进行增减操作。</p><pre><code>methods: {    addLoading() {        this.isShowLoading = true        this.loadingCount++    },    isCloseLoading() {        this.loadingCount--        if (this.loadingCount == 0) {            this.isShowLoading = false        }    }}</code></pre><p>现在拦截器变成这样：</p><pre><code>// 添加请求拦截器this.$axios.interceptors.request.use(config =&gt; {    this.addLoading()    return config}, error =&gt; {    this.isShowLoading = false    this.loadingCount = 0    this.$Message.error(&apos;网络异常，请稍后再试&apos;)    return Promise.reject(error)})// 添加响应拦截器this.$axios.interceptors.response.use(response =&gt; {    this.isCloseLoading()    return response}, error =&gt; {    this.isShowLoading = false    this.loadingCount = 0    this.$Message.error(&apos;网络异常，请稍后再试&apos;)    return Promise.reject(error)})</code></pre><p>这个拦截器的功能是：</p><p>每当发起一个请求，打开 loading，同时 loadingCount 加1。</p><p>每当一个请求结束， loadingCount 减1，并判断  loadingCount 是否为 0，如果为 0，则关闭 loading。</p><p>这样即可解决，多个请求下有某个请求提前结束，导致 loading 关闭的问题。</p><h2 id="5-表格打印"><a href="#5-表格打印" class="headerlink" title="5. 表格打印"></a>5. 表格打印</h2><p>打印需要用到的组件为 print-js</p><p>普通表格打印<br>一般的表格打印直接仿照组件提供的例子就可以了。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">printJS</span>(&#123;</span><br><span class="line">    <span class="attribute">printable</span>: id, // DOM id</span><br><span class="line">    type: <span class="string">'html'</span>,</span><br><span class="line">    scanStyles: false,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>element-ui 表格打印（其他组件库的表格同理）<br>element-ui 的表格，表面上看起来是一个表格，实际上是由两个表格组成的。</p><p>表头为一个表格，表体又是个表格，这就导致了一个问题：打印的时候表体和表头错位。</p><p>图片</p><p>另外，在表格出现滚动条的时候，也会造成错位。</p><p>图片</p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>我的思路是将两个表格合成一个表格，print-js 组件打印的时候，实际上是把 id 对应的 DOM 里的内容提取出来打印。所以，在传入 id 之前，可以先把表头所在的表格内容提取出来，插入到第二个表格里，从而将两个表格合并，这时候打印就不会有错位的问题了。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">function printHTML(id) &#123;</span><br><span class="line">    <span class="keyword">const</span> html = <span class="built_in">document</span>.<span class="built_in">querySelector</span>(<span class="string">'#'</span> + id).innerHTML</span><br><span class="line">    <span class="comment">// 新建一个 DOM</span></span><br><span class="line">    <span class="keyword">const</span> div = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>)</span><br><span class="line">    <span class="keyword">const</span> printDOMID = <span class="string">'printDOMElement'</span></span><br><span class="line">    div.id = printDOMID</span><br><span class="line">    div.innerHTML = html</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 提取第一个表格的内容 即表头</span></span><br><span class="line">    <span class="keyword">const</span> ths = div.<span class="built_in">querySelectorAll</span>(<span class="string">'.el-table__header-wrapper th'</span>)</span><br><span class="line">    <span class="keyword">const</span> ThsTextArry = []</span><br><span class="line">    <span class="keyword">for</span> (let i = <span class="number">0</span>, len = ths.length; i &lt; len; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (ths[i].innerText !== <span class="string">''</span>) ThsTextArry.push(ths[i].innerText)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除多余的表头</span></span><br><span class="line">    div.<span class="built_in">querySelector</span>(<span class="string">'.hidden-columns'</span>).remove()</span><br><span class="line">    <span class="comment">// 第一个表格的内容提取出来后已经没用了 删掉</span></span><br><span class="line">    div.<span class="built_in">querySelector</span>(<span class="string">'.el-table__header-wrapper'</span>).remove()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将第一个表格的内容插入到第二个表格</span></span><br><span class="line">    let newHTML = <span class="string">'&lt;tr&gt;'</span></span><br><span class="line">    <span class="keyword">for</span> (let i = <span class="number">0</span>, len = ThsTextArry.length; i &lt; len; i++) &#123;</span><br><span class="line">        newHTML += <span class="string">'&lt;td style="text-align: center; font-weight: bold"&gt;'</span> + ThsTextArry[i] + <span class="string">'&lt;/td&gt;'</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    newHTML += <span class="string">'&lt;/tr&gt;'</span></span><br><span class="line">    div.<span class="built_in">querySelector</span>(<span class="string">'.el-table__body-wrapper table'</span>).insertAdjacentHTML(<span class="string">'afterbegin'</span>, newHTML)</span><br><span class="line">    <span class="comment">// 将新的 DIV 添加到页面 打印后再删掉</span></span><br><span class="line">    <span class="built_in">document</span>.<span class="built_in">querySelector</span>(<span class="string">'body'</span>).appendChild(div)</span><br><span class="line">    </span><br><span class="line">    printJS(&#123;</span><br><span class="line">        printable: printDOMID,</span><br><span class="line">        type: <span class="string">'html'</span>,</span><br><span class="line">        scanStyles: <span class="keyword">false</span>,</span><br><span class="line">        style: <span class="string">'table &#123; border-collapse: collapse &#125;'</span> <span class="comment">// 表格样式</span></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    div.remove()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-下载二进制文件"><a href="#6-下载二进制文件" class="headerlink" title="6. 下载二进制文件"></a>6. 下载二进制文件</h2><p>平时在前端下载文件有两种方式，</p><ol><li>一种是后台提供一个 URL，然后用 window.open(URL) 下载，另一种就是后台直接返回文件的二进制内容，然后前端转化一下再下载。</li></ol><p>由于第一种方式比较简单，在此不做探讨。本文主要讲解一下第二种方式怎么实现。</p><ol><li>第二种方式需要用到 Blob 对象， mdn 文档上是这样介绍的：</li></ol><blockquote><p>Blob 对象表示一个不可变、原始数据的类文件对象。Blob 表示的不一定是JavaScript原生格式的数据<br>具体使用方法</p></blockquote><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">axios(&#123;</span><br><span class="line">  method: <span class="string">'post'</span>,</span><br><span class="line">  url: <span class="string">'/export'</span>,</span><br><span class="line">&#125;)</span><br><span class="line">.then(res =&gt; &#123;</span><br><span class="line">  <span class="comment">// 假设 data 是返回来的二进制数据</span></span><br><span class="line">  const data = res.data</span><br><span class="line">  const url = window<span class="selector-class">.URL</span><span class="selector-class">.createObjectURL</span>(new Blob([data], &#123;type: <span class="string">"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"</span>&#125;))</span><br><span class="line">  const link = document.createElement(<span class="string">'a'</span>)</span><br><span class="line">  link<span class="selector-class">.style</span><span class="selector-class">.display</span> = <span class="string">'none'</span></span><br><span class="line">  link<span class="selector-class">.href</span> = url</span><br><span class="line">  link.setAttribute(<span class="string">'download'</span>, <span class="string">'excel.xlsx'</span>)</span><br><span class="line">  document<span class="selector-class">.body</span><span class="selector-class">.appendChild</span>(link)</span><br><span class="line">  link.click()</span><br><span class="line">  document<span class="selector-class">.body</span><span class="selector-class">.removeChild</span>(link)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>打开下载的文件，看看结果是否正确。</p><p>图片</p><p>在这里插入图片描述<br>一堆乱码…</p><p>一定有哪里不对。</p><p>最后发现是参数 responseType 的问题，responseType 它表示服务器响应的数据类型。由于后台返回来的是二进制数据，所以我们要把它设为 arraybuffer， 接下来再看看结果是否正确。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">axios(&#123;</span><br><span class="line">  method: <span class="string">'post'</span>,</span><br><span class="line">  url: <span class="string">'/export'</span>,</span><br><span class="line">  responseType: <span class="string">'arraybuffer'</span>,</span><br><span class="line">&#125;)</span><br><span class="line">.then(res =&gt; &#123;</span><br><span class="line">  <span class="comment">// 假设 data 是返回来的二进制数据</span></span><br><span class="line">  const data = res.data</span><br><span class="line">  const url = window<span class="selector-class">.URL</span><span class="selector-class">.createObjectURL</span>(new Blob([data], &#123;type: <span class="string">"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"</span>&#125;))</span><br><span class="line">  const link = document.createElement(<span class="string">'a'</span>)</span><br><span class="line">  link<span class="selector-class">.style</span><span class="selector-class">.display</span> = <span class="string">'none'</span></span><br><span class="line">  link<span class="selector-class">.href</span> = url</span><br><span class="line">  link.setAttribute(<span class="string">'download'</span>, <span class="string">'excel.xlsx'</span>)</span><br><span class="line">  document<span class="selector-class">.body</span><span class="selector-class">.appendChild</span>(link)</span><br><span class="line">  link.click()</span><br><span class="line">  document<span class="selector-class">.body</span><span class="selector-class">.removeChild</span>(link)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>图片<br>这次没有问题，文件能正常打开，内容也是正常的，不再是乱码。</p><h3 id="根据后台接口内容决定是否下载文件"><a href="#根据后台接口内容决定是否下载文件" class="headerlink" title="根据后台接口内容决定是否下载文件"></a>根据后台接口内容决定是否下载文件</h3><p>作者的项目有大量的页面都有下载文件的需求，而且这个需求还有点变态。</p><p>具体需求如下</p><ol><li>如果下载文件的数据量条数符合要求，正常下载（每个页面限制下载数据量是不一样的，所以不能在前端写死）。</li><li>如果文件过大，后台返回 { code: 199999, msg: ‘文件过大，请重新设置查询项’, data: null }，然后前端再进行报错提示。<br>先来分析一下，首先根据上文，我们都知道下载文件的接口响应数据类型为 arraybuffer。返回的数据无论是二进制文件，还是 JSON 字符串，前端接收到的其实都是 arraybuffer。所以我们要对 arraybuffer 的内容作个判断，在接收到数据时将它转换为字符串，判断是否有 code: 199999。如果有，则报错提示，如果没有，则是正常文件，下载即可。具体实现如下：</li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">axios.interceptors.response.use(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> res = response.data</span><br><span class="line">    <span class="comment">// 判断响应数据类型是否 ArrayBuffer，true 则是下载文件接口，false 则是正常接口</span></span><br><span class="line">    <span class="keyword">if</span> (res <span class="keyword">instanceof</span> <span class="built_in">ArrayBuffer</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> utf8decoder = <span class="keyword">new</span> TextDecoder()</span><br><span class="line">        <span class="keyword">const</span> u8arr = <span class="keyword">new</span> <span class="built_in">Uint8Array</span>(res)</span><br><span class="line">        <span class="comment">// 将二进制数据转为字符串</span></span><br><span class="line">        <span class="keyword">const</span> temp = utf8decoder.decode(u8arr)</span><br><span class="line">        <span class="keyword">if</span> (temp.includes(<span class="string">'&#123;code:199999'</span>)) &#123;</span><br><span class="line">            Message(&#123;</span><br><span class="line">             <span class="comment">// 字符串转为 JSON 对象</span></span><br><span class="line">                message: <span class="built_in">JSON</span>.parse(temp).msg,</span><br><span class="line">                <span class="keyword">type</span>: <span class="string">'error'</span>,</span><br><span class="line">                duration: <span class="number">5000</span>,</span><br><span class="line">            &#125;)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">Promise</span>.reject()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 正常类型接口，省略代码...</span></span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">&#125;, <span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 省略代码...</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="7-自动忽略-console-log-语句"><a href="#7-自动忽略-console-log-语句" class="headerlink" title="7. 自动忽略 console.log 语句"></a>7. 自动忽略 console.log 语句</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">rewirteLog</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log = (<span class="function"><span class="keyword">function</span> (<span class="params">log</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> process.env.NODE_ENV == <span class="string">'development'</span>? log : <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">    &#125;(<span class="built_in">console</span>.log))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 main.js 引入这个函数并执行一次，就可以实现忽略 console.log 语句的效果。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;有一些问题不限于 Vue，还适应于其他类型的 SPA 项目。&lt;/p&gt;
&lt;h2 id=&quot;1-页面权限控制和登陆验证&quot;&gt;&lt;a href=&quot;#1-页面权限控制和登陆验证&quot; class=&quot;headerlink&quot; title=&quot;1. 页面权限控制和登陆验证&quot;&gt;&lt;/a&gt;1. 页面权限控制和登陆验证&lt;/h2&gt;&lt;h3 id=&quot;页面权限控制&quot;&gt;&lt;a href=&quot;#页面权限控制&quot; class=&quot;headerlink&quot; title=&quot;页面权限控制&quot;&gt;&lt;/a&gt;页面权限控制&lt;/h3&gt;&lt;p&gt;页面权限控制是什么意思呢？&lt;/p&gt;
&lt;p&gt;就是一个网站有不同的角色，比如管理员和普通用户，要求不同的角色能访问的页面是不一样的。如果一个页面，有角色越权访问，这时就得做出限制了。&lt;br&gt;
    
    </summary>
    
      <category term="vue" scheme="https://chongdee.github.io/categories/vue/"/>
    
    
      <category term="vue" scheme="https://chongdee.github.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue2.x脱坑-解决方法总结</title>
    <link href="https://chongdee.github.io/2021/05/09/vue/Vue2.x%E8%84%B1%E5%9D%91-%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95%E6%80%BB%E7%BB%93/"/>
    <id>https://chongdee.github.io/2021/05/09/vue/Vue2.x脱坑-解决方法总结/</id>
    <published>2021-05-08T18:57:03.769Z</published>
    <updated>2021-05-08T19:11:37.518Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>文章内容覆盖范围,芝麻绿豆的破问题都有,不止于vue;<br>给出的是方案,而非手把手一字一句的给你说十万个为什么!</p><h2 id="问题汇总"><a href="#问题汇总" class="headerlink" title="问题汇总"></a>问题汇总</h2><h3 id="Q-安装超时-install-timeout"><a href="#Q-安装超时-install-timeout" class="headerlink" title="Q:安装超时(install timeout)"></a>Q:安装超时(install timeout)</h3><p>方案有这么些:</p><ul><li><p>cnpm : 国内对npm的镜像版本</p><a id="more"></a><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">cnpm website: https://npm.taobao.org/</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">npm install -g cnpm --registry=<span class="string">https:</span><span class="comment">//registry.npm.taobao.org</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// cnpm 的大多命令跟 npm 的是一致的,比如安装,卸载这些</span></span><br></pre></td></tr></table></figure></li><li><p>yarn 和 npm 改源大法</p></li></ul><ul><li>使用 nrm 模块 : www.npmjs.com/package/nrm</li></ul><ul><li>npm config : npm config set registry <a href="https://registry.npm.taobao.org" target="_blank" rel="noopener">https://registry.npm.taobao.org</a></li></ul><ul><li>yarn config : yarn config set registry <a href="https://registry.npm.taobao.org" target="_blank" rel="noopener">https://registry.npm.taobao.org</a></li></ul><h3 id="Q-想学习Vue-要先学习脚手架的搭建么"><a href="#Q-想学习Vue-要先学习脚手架的搭建么" class="headerlink" title="Q: 想学习Vue,要先学习脚手架的搭建么"></a>Q: 想学习Vue,要先学习脚手架的搭建么</h3><p>若是你想快速上手，用官方的脚手架即可(Vue-Cli 3)<br>因为不管是webpack还是parcel，gulp，都是一些构建工作流的东东；<br>学习脚手架的搭建，更多的是要针对项目业务进行定制，调优；<br>一般入门级的无需太早考虑这方面的，只要专心学好Vue的使用姿势便可。</p><h3 id="Q-安装一些需要编译的包-提示没有安装python、build失败等"><a href="#Q-安装一些需要编译的包-提示没有安装python、build失败等" class="headerlink" title="Q:安装一些需要编译的包:提示没有安装python、build失败等"></a>Q:安装一些需要编译的包:提示没有安装python、build失败等</h3><p>因为一些 npm 的包安装需要编译的环境,mac 和 linux 都还好,</p><p>而window 用户依赖 visual studio 的一些库和python 2+,<br>windows的小伙伴都装上:</p><ul><li><a href="https://github.com/felixrieseberg/windows-build-tools" target="_blank" rel="noopener">windows-build-tools</a></li><li><a href="https://www.python.org/downloads/" target="_blank" rel="noopener">python 2.x</a></li></ul><h3 id="Q-can’t-not-find-‘xxModule’-找不到某些依赖或者模块"><a href="#Q-can’t-not-find-‘xxModule’-找不到某些依赖或者模块" class="headerlink" title="Q:can’t not find ‘xxModule’ - 找不到某些依赖或者模块"></a>Q:can’t not find ‘xxModule’ - 找不到某些依赖或者模块</h3><p>这种情况一般报错信息可以看到是哪个包抛出的信息，一般卸载这个模块,安装重新安装下即可。</p><h3 id="Q-data-functions-should-return-an-object"><a href="#Q-data-functions-should-return-an-object" class="headerlink" title="Q:data functions should return an object"></a>Q:data functions should return an object</h3><p>这个问题是 Vue 实例内,单组件的data必须返回一个对象;如下</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">export</span> <span class="selector-tag">default</span> &#123;</span><br><span class="line">  <span class="attribute">name</span>: <span class="string">'page-router-view'</span>,</span><br><span class="line">      data () &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        tabs: [</span><br><span class="line">          &#123;</span><br><span class="line">            title: <span class="string">'财务信息'</span>,</span><br><span class="line">            url: <span class="string">'/userinfo'</span></span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attribute">title</span>: <span class="string">'帐号信息'</span>,</span><br><span class="line">            url: <span class="string">'/userinfo/base'</span></span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>为什么要 return 一个数据对象呢?</strong><br>官方解释如下:  data 必须声明为返回一个初始数据对象的函数，因为组件可能被用来创建多个实例。</p><p>如果 data 仍然是一个纯粹的对象，则所有的实例将共享引用同一个数据对象！</p><p>简言之,组件复用下,不会造成数据同时指向一处,造出牵一发而动全身的破问题,</p><h3 id="Q-我给组件内的原生控件添加事件-怎么不生效了"><a href="#Q-我给组件内的原生控件添加事件-怎么不生效了" class="headerlink" title="Q:我给组件内的原生控件添加事件,怎么不生效了!"></a>Q:我给组件内的原生控件添加事件,怎么不生效了!</h3><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="comment">&lt;!--比如用了第三方框架,或者一些封装的内置组件; 然后想绑定事件--&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!--// 错误例子1--&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">el-input</span> <span class="attr">placeholder</span>=<span class="string">"请输入特定消费金额 "</span> @<span class="attr">mouseover</span>=<span class="string">"test()"</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!--// 错误例子2--&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">"item.menuUrl"</span> @<span class="attr">click</span>=<span class="string">"toggleName=''"</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">i</span> <span class="attr">:class</span>=<span class="string">"['fzicon',item.menuIcon]"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">span</span>&gt;</span></span><span class="template-variable">&#123;&#123;item.menuName&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!--上面的两个例子都没法触发事件!--&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!--究其原因,少了一个修饰符 .native--&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">"item.menuUrl"</span> @<span class="attr">click.native</span>=<span class="string">"toggleName=''"</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">i</span> <span class="attr">:class</span>=<span class="string">"['fzicon',item.menuIcon]"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">span</span>&gt;</span></span><span class="template-variable">&#123;&#123;item.menuName&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!--明明官方文档有的,一堆人不愿意去看,,Fuck--&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!--https://cn.vuejs.org/v2/guide/components.html#给组件绑定原生事件--&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="Q-provide和inject是什么"><a href="#Q-provide和inject是什么" class="headerlink" title="Q: provide和inject是什么"></a>Q: provide和inject是什么</h3><p>Vue 在2.2的时候,也提供了该概念。类比ng provider和react context;</p><h3 id="Q-我用了-axios-为什么-IE-浏览器不识别-IE9"><a href="#Q-我用了-axios-为什么-IE-浏览器不识别-IE9" class="headerlink" title="Q:我用了 axios , 为什么 IE 浏览器不识别(IE9+)"></a>Q:我用了 axios , 为什么 IE 浏览器不识别(IE9+)</h3><p>那是因为 IE 整个家族都不支持 promise, 解决方案:</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">npm</span> <span class="selector-tag">install</span> <span class="selector-tag">es6-promise</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 在 main.js 引入即可</span></span><br><span class="line"><span class="comment">// ES6的polyfill</span></span><br><span class="line"><span class="selector-tag">require</span>(<span class="string">"es6-promise"</span>)<span class="selector-class">.polyfill</span>();</span><br></pre></td></tr></table></figure><h3 id="Q-我在函数内用了this-xxx-为什么抛出Cannot-set-property-‘xxx’-of-undefined"><a href="#Q-我在函数内用了this-xxx-为什么抛出Cannot-set-property-‘xxx’-of-undefined" class="headerlink" title="Q:我在函数内用了this.xxx=,为什么抛出Cannot set property ‘xxx’ of undefined;"></a>Q:我在函数内用了this.xxx=,为什么抛出Cannot set property ‘xxx’ of undefined;</h3><p>这又是this的套路了,this是和当前运行的上下文绑定的,</p><p>一般你在axios或者其他 promise , 或者setInterval<br>这些默认都是指向最外层的全局钩子.</p><p>简单点说:”最外层的上下文就是 window,vue内则是 Vue 对象而不是实例!”;<br>解决方案:</p><ul><li>暂存法: 函数内先缓存 this , let that = this;(let是 es6, es5用 var)</li><li>箭头函数: 会强行关联当前运行区域为 this 的上下文;</li></ul><p>this的知识, 读”&lt;&lt;你不知道的 JS 系列&gt;&gt;”最为合适了,里面讲的很清楚</p><h3 id="Q-我看一些Vue教程有这么些写法-是什么意思-click-prevent-v-demo-a-b"><a href="#Q-我看一些Vue教程有这么些写法-是什么意思-click-prevent-v-demo-a-b" class="headerlink" title="Q:我看一些Vue教程有这么些写法,是什么意思@click.prevent,v-demo.a.b;"></a>Q:我看一些Vue教程有这么些写法,是什么意思@click.prevent,v-demo.a.b;</h3><p>@click.prevent : 事件+修饰符 , 作用就是点击但又阻止默认行为</p><p>v-demo.a.b: 自定义指令+修饰符.<br>具体看你什么指令了,修饰符的作用大多是给事件增加一些确切的拓展功能</p><p>比如阻止事件冒泡,阻止默认行为,访问到原生控件,结合键盘快捷键等等</p><p>传送门:<a href="https://cn.vuejs.org/v2/guide/events.html#%E4%BA%8B%E4%BB%B6%E4%BF%AE%E9%A5%B0%E7%AC%A6" target="_blank" rel="noopener">事件修饰符</a>;</p><p>可以自定义修饰符么?也是可以的,</p><p>可以通过全局 config.keyCodes 对象自定义键值修饰符别名：</p><h3 id="Q-为什么我的引入的小图片渲染出来却是-data-image-png-base64xxxxxxxx"><a href="#Q-为什么我的引入的小图片渲染出来却是-data-image-png-base64xxxxxxxx" class="headerlink" title="Q:为什么我的引入的小图片渲染出来却是 data:image/png;base64xxxxxxxx"></a>Q:为什么我的引入的小图片渲染出来却是 data:image/png;base64xxxxxxxx</h3><p>这个是 webpack 里面的对应插件处理的.</p><p>对于小于多少 K 以下的图片(规定的格式)直接转为 base64格式渲染;</p><p>具体配置在webpack.base.conf.js里面的 rules里面的 url-loader</p><p>这样做的好处:在网速不好的时候先于内容加载和减少http的请求次数来减少网站服务器的负担。</p><h3 id="Q-Component-template-shold-contain-exactly-one-root-element-If-you-are-useing-v-if-on-multiple-elements-xxxxx"><a href="#Q-Component-template-shold-contain-exactly-one-root-element-If-you-are-useing-v-if-on-multiple-elements-xxxxx" class="headerlink" title="Q:Component template shold contain exactly one root element.If you are useing v-if on multiple elements , xxxxx"></a>Q:Component template shold contain exactly one root element.If you are useing v-if on multiple elements , xxxxx</h3><p>大体就是说,单组件渲染 DOM 区域必须要有一个根元素,最外层添加<div></div></p><p>可以用v-if和v-else-if指令来控制其他元素达到并存的状态</p><h3 id="Q-跨域问题怎么破"><a href="#Q-跨域问题怎么破" class="headerlink" title="Q:跨域问题怎么破!"></a>Q:跨域问题怎么破!</h3><p>比如No ‘Access-Control-Allow-Origin’ header is present on the requested resource.<br>这种问题老生常谈了,我就不细说了,大体说一下;</p><ul><li><p>1: CORS , 前后端都要对应去配置,IE10+</p></li><li><p>2: nginx 反向代理,一劳永逸，线上环境可以用这个</p></li></ul><p>线下开发模式,比如你用了vue-cli, 里面的 webpack 有引入了proxyTable这么个玩意,<br>也可以做接口反向代理</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在 config 目录下的index.js</span></span><br><span class="line"></span><br><span class="line"><span class="symbol">proxyTable:</span> &#123;</span><br><span class="line">  <span class="string">"/bp-api"</span>: &#123;</span><br><span class="line"><span class="symbol">    target:</span> <span class="string">"http://new.d.st.cn"</span>,</span><br><span class="line"><span class="symbol">    changeOrigin:</span> true,</span><br><span class="line">    <span class="comment">// pathRewrite: &#123;</span></span><br><span class="line">    <span class="comment">//   "^/bp-api": "/"</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// target : 就是 api 的代理的实际路径</span></span><br><span class="line"><span class="comment">// changeOrigin: 就是是变源,必须是,</span></span><br><span class="line"><span class="comment">// pathRewrite : 就是路径重定向,一看就知道</span></span><br></pre></td></tr></table></figure><p>当然还有依旧坚挺的jsonp大法!不过局限性比较多,比较适合一些特殊的信息获取!</p><h3 id="Q-我需要遍历的数组值更新了-值也赋值了-为什么视图不更新"><a href="#Q-我需要遍历的数组值更新了-值也赋值了-为什么视图不更新" class="headerlink" title="Q:我需要遍历的数组值更新了,值也赋值了,为什么视图不更新!"></a>Q:我需要遍历的数组值更新了,值也赋值了,为什么视图不更新!</h3><p>那是因为有局限性啊,官方文档也说的很清楚,</p><p>只有一些魔改的之后的方法提供跟原生一样的使用姿势(可以触发视图更新);</p><p>一般我们更常用(除了魔改方法)的手段是使用:this.$set(obj,item,value);</p><p>传送门:<a href="https://cn.vuejs.org/v2/guide/list.html#%E6%95%B0%E7%BB%84%E6%9B%B4%E6%96%B0%E6%A3%80%E6%B5%8B" target="_blank" rel="noopener">数组更新检测(触发视图更新)</a></p><h3 id="Q-为什么我的组件间的样式不能继承或者覆写啊"><a href="#Q-为什么我的组件间的样式不能继承或者覆写啊" class="headerlink" title="Q:为什么我的组件间的样式不能继承或者覆写啊!"></a>Q:为什么我的组件间的样式不能继承或者覆写啊!</h3><p>单组件开发模式下,请确认是否开启了 CSS模块化功能!!</p><p>也就是scoped(vue-cli 里面配置了,只要加入这个属性就自动启用)</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">"scss"</span> <span class="attr">scoped</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>为什么不能简单的继承或者覆写呢,是因为每个类或者 id 乃至标签都会给自动在css后面添加自定义属性hash!<br>比如</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">//</span> 写的时候是这个</span><br><span class="line"><span class="string">.trangle</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="string">//</span> 编译过后,加上了 hash</span><br><span class="line"><span class="string">.trangle</span>[data-v-1ec35ffc]&#123;&#125;</span><br></pre></td></tr></table></figure><p>这些都是在 css-loader 里面配置!</p><h3 id="Q-路由模式改为history后-除了首次启动首页没报错-刷新访问路由都报错"><a href="#Q-路由模式改为history后-除了首次启动首页没报错-刷新访问路由都报错" class="headerlink" title="Q:路由模式改为history后,除了首次启动首页没报错,刷新访问路由都报错!"></a>Q:路由模式改为history后,除了首次启动首页没报错,刷新访问路由都报错!</h3><p>必须给对应的服务端配置查询的主页面,也可以认为是主路由入口的引导</p><p>官方文档也有,为毛总有人不喜欢去看文档,总喜欢做伸手党,FUCK<br>传送门 : <a href="https://router.vuejs.org/zh/guide/essentials/history-mode.html" target="_blank" rel="noopener">Vue-Router history Mode</a></p><h3 id="Q-我想拦截页面-或者在页面进来之前做一些事情-可以么"><a href="#Q-我想拦截页面-或者在页面进来之前做一些事情-可以么" class="headerlink" title="Q:我想拦截页面,或者在页面进来之前做一些事情,可以么?"></a>Q:我想拦截页面,或者在页面进来之前做一些事情,可以么?</h3><p>Of course !!<br>各种路由器的钩子!! 传送门: <a href="https://router.vuejs.org/zh/guide/advanced/navigation-guards.html" target="_blank" rel="noopener">导航守卫</a>;</p><p>当然,记忆滚动的位置也可以做到,详情翻翻里面的文档</p><h3 id="Q-TypeError-xxx-is-not-a-function"><a href="#Q-TypeError-xxx-is-not-a-function" class="headerlink" title="Q:TypeError: xxx is not a function"></a>Q:TypeError: xxx is not a function</h3><p>这种问题明显就是写法有问题,能不能动点脑子!!</p><h3 id="Q-能不能跨级拿到props"><a href="#Q-能不能跨级拿到props" class="headerlink" title="Q: 能不能跨级拿到props"></a>Q: 能不能跨级拿到props</h3><p>这种情况是面向嵌套层次很深的组件，又要拿到上层的父传递的东东，</p><p>可以用$attrs 或者inject + provide来实现</p><h3 id="Q-Uncaught-ReferenceError-xxx-is-not-define"><a href="#Q-Uncaught-ReferenceError-xxx-is-not-define" class="headerlink" title="Q:Uncaught ReferenceError: xxx is not define"></a>Q:Uncaught ReferenceError: xxx is not define</h3><ul><li>实例内的 data 对应的变量没有声明</li><li>你导入模块报这个错误,那绝逼是导出没写好</li></ul><h3 id="Q-Error-in-render-function-”Type-Error-Cannot-read-property-‘xxx’-of-undefined”"><a href="#Q-Error-in-render-function-”Type-Error-Cannot-read-property-‘xxx’-of-undefined”" class="headerlink" title="Q:Error in render function:”Type Error: Cannot read property ‘xxx’ of undefined”"></a>Q:Error in render function:”Type Error: Cannot read property ‘xxx’ of undefined”</h3><p>这种问题大多都是初始化的姿势不对;</p><p>比如引入echart这些,仔细去了解下生命周期,再来具体初始化;</p><p>vue 组件有时候也会(嵌套组件或者 props传递初始化),也是基本这个问题</p><h3 id="Q-Unexpected-token-operator-xxxxx"><a href="#Q-Unexpected-token-operator-xxxxx" class="headerlink" title="Q:Unexpected token: operator xxxxx"></a>Q:Unexpected token: operator xxxxx</h3><p>大佬,这个一看就是语法错误啊.<br>基本都是符号问题.<br>一般报错会给出哪一行或者哪个组件</p><h3 id="Q-npm-run-build之后不能直接访问"><a href="#Q-npm-run-build之后不能直接访问" class="headerlink" title="Q:npm run build之后不能直接访问"></a>Q:npm run build之后不能直接访问</h3><p>大佬!你最起码得在本地搭个服务器才能访问好么!!</p><h3 id="Q-操作Vue的原型链好么"><a href="#Q-操作Vue的原型链好么" class="headerlink" title="Q: 操作Vue的原型链好么"></a>Q: 操作Vue的原型链好么</h3><p>这个问题需要具体情况具体分析；</p><p>我看很多人喜欢把axios挂载到Vue.prototype上；</p><p>这样做有一定的弊端，相当耦合，若是多人维护或者替换其他库的时候有一定困难；</p><p>比较好的做法是不挂载，而是单独有服务请求的文件，用函数来封装你所需要的接口聚合；</p><p>这样统一暴露函数名，而内部实现可以随便改动</p><h3 id="Q-CSSbackground引入图片打包后-访问路径错误"><a href="#Q-CSSbackground引入图片打包后-访问路径错误" class="headerlink" title="Q:CSSbackground引入图片打包后,访问路径错误"></a>Q:CSSbackground引入图片打包后,访问路径错误</h3><p>因为打包后图片是在根目录下,你用相对路径肯定报错啊,</p><p>你可以魔改 webpack 的配置文件里面的static为./static,但是不建议</p><p>你若是把图片什么丢到assets目录下,然后相对路径,打包后是正常的</p><h3 id="Q-安装模块时命令窗口输出unsupported-platform-xxx"><a href="#Q-安装模块时命令窗口输出unsupported-platform-xxx" class="headerlink" title="Q:安装模块时命令窗口输出unsupported platform xxx"></a>Q:安装模块时命令窗口输出unsupported platform xxx</h3><p>一般两种情况,node版本不兼容,系统不兼容;</p><p>解决方案: 要么不装,要么满足安装要求;</p><h3 id="Q-Unexpected-tab-charater这些"><a href="#Q-Unexpected-tab-charater这些" class="headerlink" title="Q:Unexpected tab charater这些"></a>Q:Unexpected tab charater这些</h3><p>一般是你用脚手架初始化的时候开了 eslint ;</p><p>要么遵循规则,要么改变规则;</p><p>要么直接把 webpack 里面的 eslint 检测给关闭了</p><h3 id="Q-Failed-to-mount-component-template-or-render-function-not-defined"><a href="#Q-Failed-to-mount-component-template-or-render-function-not-defined" class="headerlink" title="Q:Failed to mount component: template or render function not defined"></a>Q:Failed to mount component: template or render function not defined</h3><p>组件挂载失败,问题只有这么几个，组件没有正确引入或挂载点顺序错了。</p><h3 id="Q-Unknown-custom-element-did-you-register-the-component-correctly"><a href="#Q-Unknown-custom-element-did-you-register-the-component-correctly" class="headerlink" title="Q:Unknown custom element:  - did you register the component correctly?"></a>Q:Unknown custom element: <xxx> - did you register the component correctly?</xxx></h3><p>组件没有正确引入或者正确使用,依次确认</p><ol><li>导入对应的组件</li><li>在 components 内声明</li><li>在 dom 区域声明标签</li></ol><p>Q: 如何让自定义组件支持Vue.use使用呢<br>只要暴露一个install函数即可，大体可以看下以下代码；</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> BtnPopconfirm <span class="keyword">from</span> <span class="string">'./BtnPopconfirm.vue'</span>;</span><br><span class="line">BtnPopconfirm.install = <span class="function"><span class="keyword">function</span>(<span class="params">Vue</span>) </span>&#123;</span><br><span class="line">  Vue.component(BtnPopconfirm.name, BtnPopconfirm);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> BtnPopconfirm;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 然后就支持Vue.use了</span></span><br></pre></td></tr></table></figure><h3 id="Q-axios的-post-请求后台接受不到"><a href="#Q-axios的-post-请求后台接受不到" class="headerlink" title="Q: axios的 post 请求后台接受不到!"></a>Q: axios的 post 请求后台接受不到!</h3><p>axios默认是 json 格式提交,确认后台是否做了对应的支持;<br>若是只能接受传统的表单序列化,就需要自己写一个转义的方法,<br>当然还有一个更加省事的方案,装一个小模块qs</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// npm install qs -S</span></span><br><span class="line"><span class="comment">// 然后在对应的地方转就行了,单一请求也行,拦截器也行,我是写在拦截器的.</span></span><br><span class="line"><span class="comment">// 具体可以看看我 axios 封装那篇文章</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//POST传参序列化(添加请求拦截器)</span></span><br><span class="line">Axios.interceptors.request.<span class="keyword">use</span>(</span><br><span class="line">  config =&gt; &#123;</span><br><span class="line">    <span class="comment">// 在发送请求之前做某件事</span></span><br><span class="line">    <span class="keyword">if</span> (</span><br><span class="line">      config.method === <span class="string">"post"</span></span><br><span class="line">    ) &#123;</span><br><span class="line">      <span class="comment">// 序列化</span></span><br><span class="line">      config.data = qs.stringify(config.data); <span class="comment">// ***** 这里转义</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 若是有做鉴权token , 就给头部带上token</span></span><br><span class="line">    <span class="keyword">if</span> (localStorage.<span class="built_in">token</span>) &#123;</span><br><span class="line">      config.headers.Authorization = localStorage.<span class="built_in">token</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> config;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="built_in">error</span> =&gt; &#123;</span><br><span class="line">    Message(&#123;</span><br><span class="line">      <span class="comment">//  饿了么的消息弹窗组件,类似toast</span></span><br><span class="line">      showClose: true,</span><br><span class="line">      message: <span class="built_in">error</span>,</span><br><span class="line">      <span class="built_in">type</span>: <span class="string">"error.data.error.message"</span></span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> Promise.reject(<span class="built_in">error</span>.data.<span class="built_in">error</span>.message);</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="Q-Vue支持jsx的写法么"><a href="#Q-Vue支持jsx的写法么" class="headerlink" title="Q: Vue支持jsx的写法么"></a>Q: Vue支持jsx的写法么</h3><p>可以很确定的告诉你，是支持的；</p><p>但是和React是有所差异的，而非完全等同的，具体可以看官方的支持库(<a href="https://router.vuejs.org/zh/guide/advanced/navigation-guards.html" target="_blank" rel="noopener">github.com/vuejs/jsx</a>)</p><h3 id="Q-Invalid-prop-type-check-failed-for-prop-“xxx”-Expected-Boolean-got-String"><a href="#Q-Invalid-prop-type-check-failed-for-prop-“xxx”-Expected-Boolean-got-String" class="headerlink" title="Q: Invalid prop: type check failed for prop “xxx”. Expected Boolean, got String."></a>Q: Invalid prop: type check failed for prop “xxx”. Expected Boolean, got String.</h3><p>这种问题一般就是组件内的 props 类型已经设置了接受的范围类型,</p><p>而你传递的值却又不是它需要的类型,写代码严谨些 OK?</p><h3 id="Q-过滤器可以用于DOM区域结合指令么"><a href="#Q-过滤器可以用于DOM区域结合指令么" class="headerlink" title="Q: 过滤器可以用于DOM区域结合指令么?"></a>Q: 过滤器可以用于DOM区域结合指令么?</h3><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml">// 不行,看下面的错误例子</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"(item,index) in range | sortByDesc | spliceText"</span>&gt;</span></span><span class="template-variable">&#123;&#123;item&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">// `vue2+`的指令只能用语 mustache`</span><span class="template-variable">&#123;&#123;&#125;&#125;</span><span class="xml">` , 正确姿势如下:</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span></span><span class="template-variable">&#123;&#123; message | capitalize &#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="Q-Array-mapState-SOME-MUTATION-state-increment-commit-这种写法是什么鬼"><a href="#Q-Array-mapState-SOME-MUTATION-state-increment-commit-这种写法是什么鬼" class="headerlink" title="Q: [,Array],,mapState,[SOME_MUTATION] (state) {},increment ({ commit }) {}这种写法是什么鬼!"></a>Q: [,Array],,mapState,[SOME_MUTATION] (state) {},increment ({ commit }) {}这种写法是什么鬼!</h3><p>出门左拐,ES6+(ES2015+)的基础去过一遍,</p><p>上面依次:数组解构,对象解构,对象风格函数,对象解构赋值传递</p><h3 id="Q-我的-Vue-网站为什么-UC-访问一片空白亦或者flex布局错乱"><a href="#Q-我的-Vue-网站为什么-UC-访问一片空白亦或者flex布局错乱" class="headerlink" title="Q: 我的 Vue 网站为什么 UC 访问一片空白亦或者flex布局错乱!!"></a>Q: 我的 Vue 网站为什么 UC 访问一片空白亦或者flex布局错乱!!</h3><p>来来来,墙角走起,. UC 号称移动界的 IE 这称号不是白叫的</p><ul><li>flexbox 布局错乱,一般是你没有把兼容方案写上,就是带各种前缀,复合属性拆分，引入 autoprefixer, 写上兼容范围就好了.</li><li>UC访问空白, 有一种情况绝对会造成,那就是 ES6的代码降级不够彻底. 其他情况可能就是路由配置问题(自己去排除)</li><li>现在的开发都推荐按需引入,靠babel-preset-env 来控制,以达到打包体积减小.</li><li>但是这样做的后果,有些内核比较老的,嘿嘿,拜拜,</li><li>所以最好把代码完全 ES5话!!记住有些特性不能乱使用,没有对应的 polyfill,比如 ES6 的proxy</li></ul><h3 id="Q-this-set-this-xxx-这个-是个什么意思-是-jQuery的么-会冲突么"><a href="#Q-this-set-this-xxx-这个-是个什么意思-是-jQuery的么-会冲突么" class="headerlink" title="Q:this.$set | this.$xxx 这个 $ 是个什么意思?是 jQuery的么,会冲突么?"></a>Q:this.$set | this.$xxx 这个 $ 是个什么意思?是 jQuery的么,会冲突么?</h3><p>且看我细细道来.</p><p>Vue 的$和 jQuery 的$并没有半毛钱的关系,就跟javascript和java一样.</p><p>Vue 的$是封装了一些 vue 的内建函数,然后导出以$开头,这显然并不是 jQuery的专利;</p><p>jQuery 的$是选择器!!取得 DOM区域,两者的作用完全不一致!</p><h3 id="Q-Module-not-found-Error-Can’t-resolve-‘xxx-loader’-in-xxxx"><a href="#Q-Module-not-found-Error-Can’t-resolve-‘xxx-loader’-in-xxxx" class="headerlink" title="Q:Module not found: Error : Can’t resolve ‘xxx-loader’ in xxxx"></a>Q:Module not found: Error : Can’t resolve ‘xxx-loader’ in xxxx</h3><p>这里问题一般就是webpack的配置文件你改动了或对应的loader 没有装上</p><h3 id="Q-父组件可以直接调用子组件的方法么"><a href="#Q-父组件可以直接调用子组件的方法么" class="headerlink" title="Q: 父组件可以直接调用子组件的方法么!"></a>Q: 父组件可以直接调用子组件的方法么!</h3><p>可以,通过$refs或者$chilren来拿到对应的实例,从而操作</p><h3 id="Q-Error-in-event-handler-for-“click”-”xxx”"><a href="#Q-Error-in-event-handler-for-“click”-”xxx”" class="headerlink" title="Q:Error in event handler for “click”:”xxx”"></a>Q:Error in event handler for “click”:”xxx”</h3><p>这个问题大多都是你写的代码有问题.你的事件触发了.</p><p>但是组件内部缺少对应的实现或者变量,所以抛出事件错误.</p><p>解决方案:看着报错慢慢排查</p><h3 id="Q-组件的通讯有哪几种啊"><a href="#Q-组件的通讯有哪几种啊" class="headerlink" title="Q: 组件的通讯有哪几种啊!"></a>Q: 组件的通讯有哪几种啊!</h3><p>基本最常用的是这三种;</p><ol><li>父传子: props</li><li>子传父: emit</li><li>兄弟通讯:<ul><li>event bus: 就是找一个中间组件来作为信息传递中介</li><li>vuex: 信息树</li></ul></li></ol><p>传送门:</p><p>基本通讯<br><a href="https://vuex.vuejs.org/zh/guide/" target="_blank" rel="noopener">Vuex</a></p><h3 id="Q-既然localStorage和sessionStorage能做到数据维护-为什么还要引入vuex"><a href="#Q-既然localStorage和sessionStorage能做到数据维护-为什么还要引入vuex" class="headerlink" title="Q:既然localStorage和sessionStorage能做到数据维护,为什么还要引入vuex!"></a>Q:既然localStorage和sessionStorage能做到数据维护,为什么还要引入vuex!</h3><p>这个问题问得好,Vuex的目的用来维护同级组件间的数据通讯,拥有一个共同的状态树;</p><p>仅仅活在SPA的里面的<strong>伪多页(路由)</strong>内,<br>这种东东明明然localStorage和sessionStorage</p><p>也可以做到,还能做到跨页面数据维护,还不会被浏览器刷新干掉,</p><p>为什么还要引入 vuex, 我个人觉得原因只有这么一个,”可维护性”和”易用性”及</p><p>怎么理解呢?</p><ul><li>可维护性: 因为是单向数据流,所有状态是有迹可循的,数据的传递也可以及时分发响应</li><li>易用性: 它使得我们组件间的通讯变得更强大,而不用借助中间件这类来实现不同组件间的通讯</li></ul><p>而且代码量不多,若是你要用 ls或者ss,你必须手动去跟踪维护你的状态表,<br>虽说可行,但是代码量会多很多,而且可读性很差,</p><p>是不是每个项目都需要用到vuex?</p><p>答案是否定的,小型项目上这个反而是累赘,这东西一般是用在中型项目+的,</p><p>因为里面涉及需要维护的数据比较多,同级组件间的通讯比较频繁</p><p>若是用到vuex的项目记得结合ss或者ls来达到某些状态持久化!为什么看下面!</p><h3 id="Q-vuex的用户信息为什么还要存一遍在浏览器里-sessionStorage或localStorage"><a href="#Q-vuex的用户信息为什么还要存一遍在浏览器里-sessionStorage或localStorage" class="headerlink" title="Q:vuex的用户信息为什么还要存一遍在浏览器里(sessionStorage或localStorage)"></a>Q:vuex的用户信息为什么还要存一遍在浏览器里(sessionStorage或localStorage)</h3><p><strong>因为 vuex的 store 刷新就没有.</strong><br>保存在浏览器的缓存内,若用户刷新的话,值再取一遍呗;</p><h3 id="Q-”有-Vue-Vue-Router-Vuex”或什么”express-vue-mongodb”的项目学习么"><a href="#Q-”有-Vue-Vue-Router-Vuex”或什么”express-vue-mongodb”的项目学习么" class="headerlink" title="Q:”有 Vue + Vue Router + Vuex”或什么”express + vue + mongodb”的项目学习么"></a>Q:”有 Vue + Vue Router + Vuex”或什么”express + vue + mongodb”的项目学习么</h3><p>Github 一搜一大堆,提这些问题的人动动脑子!.传送门:<a href="http://github.com/" target="_blank" rel="noopener">Github</a></p><h3 id="Q-我会-Vue-我还需要学习-jQuery-或者原生-JS-么"><a href="#Q-我会-Vue-我还需要学习-jQuery-或者原生-JS-么" class="headerlink" title="Q:我会 Vue 我还需要学习 jQuery 或者原生 JS 么"></a>Q:我会 Vue 我还需要学习 jQuery 或者原生 JS 么</h3><p>jQuery还有很多公司在用,源码可以学习的地方很多，框架只是加快开发,提高效率,但不是你在这一行长期立足的根本;</p><p>大佬们都是各种设计模式和算法玩的好，才能写出这么优秀的框架。</p><p>前端的人不仅需要宽度,也要深度,这样才能走的更远</p><h3 id="Q-npm-run-dev-报端口错误-Error-listen-EADDRINUSE-8080"><a href="#Q-npm-run-dev-报端口错误-Error-listen-EADDRINUSE-8080" class="headerlink" title="Q: npm run dev 报端口错误!Error: listen EADDRINUSE :::8080"></a>Q: npm run dev 报端口错误!Error: listen EADDRINUSE :::8080</h3><p>自己用 webpack搭脚手架的都不用我说了;<br>Vue-cli 里面的 webpack 配置: config/index.js</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">dev:</span> &#123;</span><br><span class="line"><span class="symbol">    env:</span> require(<span class="string">"./dev.env"</span>),</span><br><span class="line"><span class="symbol">    port:</span> <span class="number">8080</span>, <span class="comment">//  这里这里,若是这个端口已经给系统的其他程序占用了.改我改我!!</span></span><br><span class="line"><span class="symbol">    autoOpenBrowser:</span> true,</span><br><span class="line"><span class="symbol">    assetsSubDirectory:</span> <span class="string">"static"</span>,</span><br><span class="line"><span class="symbol">    assetsPublicPath:</span> <span class="string">"/"</span>,</span><br><span class="line"><span class="symbol">    proxyTable:</span> &#123;</span><br><span class="line">      <span class="string">"/bp-api"</span>: &#123;</span><br><span class="line"><span class="symbol">        target:</span> <span class="string">"http://new.d.st.cn"</span>,</span><br><span class="line"><span class="symbol">        changeOrigin:</span> true,</span><br><span class="line">        <span class="comment">// pathRewrite: &#123;</span></span><br><span class="line">        <span class="comment">//   "^/bp-api": "/"</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="Q-什么时候用v-if-什么用-v-show"><a href="#Q-什么时候用v-if-什么用-v-show" class="headerlink" title="Q: 什么时候用v-if,什么用 v-show!"></a>Q: 什么时候用v-if,什么用 v-show!</h3><p>我们先来说说两者的核心差异;</p><ul><li><p>v-if :  DOM 区域没有生成,没有插入文档,等条件成立的时候才动态插入到页面!</p><ul><li>有些需要遍历的数组对象或者值,最好用这货控制,等到拿到值才处理遍历,不然一些操作过快的情况会报错,比如数据还没请求到!</li></ul></li></ul><ul><li><p>v-show: DOM 区域在组件渲染的时候同时渲染了,只是单纯用 css 隐藏了</p><ul><li>对于下拉菜单,折叠菜单这些数据基本不怎么变动.用这个最合适了,而且可以改善用户体验,因为它不会导致页面的重绘,DOM 操作会!</li></ul></li></ul><p>简言之: DOM结构不怎么变化的用v-show, 数据需要改动很大或者布局改动的用v-if</p><h3 id="Q-是什么-html5的标签么"><a href="#Q-是什么-html5的标签么" class="headerlink" title="Q: 是什么,html5的标签么?"></a>Q: <template>是什么,html5的标签么?</template></h3><p>你猜对了,html5的标签还真有这么一个.传送门Can I Use:template</p><p>不过 Vue 的 template 有点不一样,不是去给浏览器解析的,</p><p>你可以理解为一个临时标签,用来方便你写循环,判断的,</p><p>因为最终 template 不会解析到浏览器的页面,他只是在 Vue 解析的过程充当一个包裹层!</p><p>最终我们看到的是内部处理后的组合的 DOM 结构!</p><h3 id="Q-Vue支持类似React的-props-吗"><a href="#Q-Vue支持类似React的-props-吗" class="headerlink" title="Q: Vue支持类似React的{,props}吗"></a>Q: Vue支持类似React的{,props}吗</h3><p>jsx的写法肯定是支持的，常规的写法也支持，用v-bind=”propsObject”会自动展开</p><h3 id="Q-Uncaught-ReferenceError-Vue-is-not-defined"><a href="#Q-Uncaught-ReferenceError-Vue-is-not-defined" class="headerlink" title="Q: Uncaught ReferenceError : Vue is not defined!"></a>Q: Uncaught ReferenceError : Vue is not defined!</h3><p>依次排除:</p><ul><li>Vue是否正确引入!</li><li>Vue是否正确实例化!</li><li>Vue 用的姿势是否正确(比如你直接一个 Vue 的变量!刚好又没定义,,具体问题具体分析吧)</li></ul><h3 id="Q-ERROR-in-static-js-xxxxxxx-js-from-UglifyJs"><a href="#Q-ERROR-in-static-js-xxxxxxx-js-from-UglifyJs" class="headerlink" title="Q: ERROR in static/js/xxxxxxx.js from UglifyJs"></a>Q: ERROR in static/js/xxxxxxx.js from UglifyJs</h3><p>我知道其中一种情况会报这种情况,就是你引入的 js,是直接引入压缩版本后的 js(xxx.min.js);</p><p>然后 webpack 内又启用了 UglifyJs(压缩 JS的), 二重压缩大多都会报错!!</p><p><strong>解决方案:引入标准未压缩的 JS</strong></p><h3 id="Q-props不使用-v-bind-可以传递值么"><a href="#Q-props不使用-v-bind-可以传递值么" class="headerlink" title="Q:props不使用:(v-bind)可以传递值么!"></a>Q:props不使用:(v-bind)可以传递值么!</h3><p>可以,只是默认传递的类型会被解析成字符串!</p><p>若是要传递其他类型,该绑定还是绑定!!</p><h3 id="Q-Uncaught-TypeError-Cannot-set-property-xxx-which-has-only-a-getter"><a href="#Q-Uncaught-TypeError-Cannot-set-property-xxx-which-has-only-a-getter" class="headerlink" title="Q: Uncaught TypeError : Cannot set property xxx which has only a getter"></a>Q: Uncaught TypeError : Cannot set property xxx which has only a getter</h3><p>这个问题就是你要操作的属性只允许 getter,不允许 setter;</p><p>解决方案? 用了别人的东西就要遵循别人的套路来,不然就只能自己动手丰衣足食了!!</p><h3 id="Q-单组件中里面的-import-xxx-from-‘-components-layout-xxx’中的-是什么鬼"><a href="#Q-单组件中里面的-import-xxx-from-‘-components-layout-xxx’中的-是什么鬼" class="headerlink" title="Q: 单组件中里面的 import xxx from ‘@/components/layout/xxx’中的@是什么鬼!"></a>Q: 单组件中里面的 import xxx from ‘@/components/layout/xxx’中的@是什么鬼!</h3><p>这是 webpack 方面的知识,看到了也说下吧,</p><p>webpack可以配置alias(也就是路径别名),玩过 linux 或者 mac 都知道</p><p>依旧如上,会自己搭脚手架的不用我说了,看看 vue-cli 里面的;</p><p>文件名: build -&gt; webpack.base.conf.js</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">resolve</span>: &#123;</span><br><span class="line">    <span class="attribute">extensions</span>: [<span class="string">".js"</span>, <span class="string">".vue"</span>, <span class="string">".json"</span>], // 可以导入的时候忽略的拓展名范围</span><br><span class="line">    alias: &#123;</span><br><span class="line">      vue$: <span class="string">"vue/dist/vue.esm.js"</span>,  </span><br><span class="line">      <span class="string">"@"</span>: <span class="built_in">resolve</span>(<span class="string">"src"</span>),  // 这里就是别名了,比如@就代表直接从/src 下开始找起!</span><br><span class="line">      <span class="string">"~"</span>: <span class="built_in">resolve</span>(<span class="string">"src/components"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="Q-SCSS-SASS-还是-less-stylus-好"><a href="#Q-SCSS-SASS-还是-less-stylus-好" class="headerlink" title="Q: SCSS(SASS) 还是 less,stylus 好!!"></a>Q: SCSS(SASS) 还是 less,stylus 好!!</h3><p>三者都是预处理器;<br>scss 出现最久,能做的功能比较多,但是若是普通的嵌套写法,继承,mixin 啊</p><p>这三个都差不多,会其中一个其他两个的粗浅用法基本也会了.不过!!</p><p>写法有些差异:</p><ul><li>scss: 写法上是向 css 靠齐</li><li>sass : 其实也就是 scss , 只是写法不一样,靠的是缩进</li><li>less : 跟 css 基本靠齐</li><li>stylus : 一样,靠缩进,跟pug(Jade)一样</li></ul><p>使用环境的差异:</p><ul><li>scss 可以借助 ruby 或者 node-sass或者dart-sass 编译</li><li>less 可以用 less.js 或者对应的 loader 解析</li><li>stylus 只能借助 loader 解析,它的出现就是基于 node 的</li></ul><p>也有一个后起之秀,主打解耦,插件化的! 那就是PostCSS,这个是后处理器!<br>有兴趣的可以自行去了解,上面的写法都能借助插件实现!</p><h3 id="Q-Failed-to-compile-with-x-errors-This-dependency-was-not-found"><a href="#Q-Failed-to-compile-with-x-errors-This-dependency-was-not-found" class="headerlink" title="Q:Failed to compile with x errors : This dependency was not found !"></a>Q:Failed to compile with x errors : This dependency was not found !</h3><p>编译错误,对应的依赖没找到!</p><p>解决如下:</p><ul><li>知道缺少对应的模块,直接装进去</li><li>若是一个你已经安装的大模块(比如 axios)里面的子模块(依赖包)出了问题,卸载重装整个大模块.因为你补全不一定有用!</li></ul><h3 id="Q-SyntaxError-Unexpected-identifier"><a href="#Q-SyntaxError-Unexpected-identifier" class="headerlink" title="Q:SyntaxError: Unexpected identifier"></a>Q:SyntaxError: Unexpected identifier</h3><p>语法错误,看错误信息去找到对应的页面排查!</p><h3 id="Q-为什么我的-npm-或者-yarn-安装依赖会生成-lock文件-有什么用"><a href="#Q-为什么我的-npm-或者-yarn-安装依赖会生成-lock文件-有什么用" class="headerlink" title="Q: 为什么我的 npm 或者 yarn 安装依赖会生成 lock文件,有什么用!"></a>Q: 为什么我的 npm 或者 yarn 安装依赖会生成 lock文件,有什么用!</h3><p>lock 文件的作用是统一版本号,这对团队协作有很大的作用;</p><p>若是没有 lock 锁定,根据package.json里面的^,~这些,</p><p>不同人,不同时间安装出来的版本号不一定一致;</p><p>有些包甚至有一些breaking change(破坏性的更新),造成开发很难顺利进行!</p><h3 id="Q-组件可以缓存么"><a href="#Q-组件可以缓存么" class="headerlink" title="Q: 组件可以缓存么?"></a>Q: 组件可以缓存么?</h3><p><strong>可以,用keep-alive;</strong></p><p>不过是有代价的,占有内存会多了,所以无脑的缓存所有组件!别说性能好了,切换几次,<br>有些硬件 hold不住的,浏览器直接崩溃或者卡死,</p><p>所以keep-alive一般缓存都是一些列表页,不会有太多的操作,更多的只是结果集的更换,</p><p>给路由的组件meta增加一个标志位,结合v-if就可以按需加上缓存了!</p><h3 id="Q-package-json里面的dependencies-和devDependencies的差异"><a href="#Q-package-json里面的dependencies-和devDependencies的差异" class="headerlink" title="Q:package.json里面的dependencies 和devDependencies的差异!"></a>Q:package.json里面的dependencies 和devDependencies的差异!</h3><p>其实不严格的话,没有特别的差异;<br>若是严格,遵循官方的理解;</p><ul><li>dependencies : 存放线上或者业务能访问的核心代码模块,比如 vue,vue-router;</li><li>devDependencies: 处于开发模式下所依赖的开发模块,也许只是用来解析代码,转义代码,但是不产生额外的代码到生产环境, 比如什么babel-core这些</li></ul><p>如何把包安装到对应的依赖下呢?</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">install</span> <span class="comment">--save xxxx // dependencies</span></span><br><span class="line">npm <span class="keyword">install</span> <span class="comment">--save-dev xxxx // devDependencies</span></span><br><span class="line"></span><br><span class="line">//也能用简易的写法(i:<span class="keyword">install</span>,-S:<span class="keyword">save</span>,-D:<span class="keyword">save</span>-dev)</span><br><span class="line"></span><br><span class="line">npm i -S xxxx // npm <span class="keyword">install</span> <span class="comment">--save xxxx</span></span><br><span class="line">npm i -D xxxx // npm <span class="keyword">install</span> <span class="comment">--save-dev xxxx</span></span><br></pre></td></tr></table></figure><h3 id="Q-安装chromedriver报错-姿势没错啊npm-i-D-chromedriver"><a href="#Q-安装chromedriver报错-姿势没错啊npm-i-D-chromedriver" class="headerlink" title="Q: 安装chromedriver报错!!姿势没错啊npm i -D chromedriver"></a>Q: 安装chromedriver报错!!姿势没错啊npm i -D chromedriver</h3><p>恩,伟大的 GFW,,解决方案:指定国内的源安装就可以了</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install <span class="params">--save-dev</span> chromedriver <span class="params">--chromedriver_cdnurl=http</span>:<span class="string">//cdn.npm.taobao.org/dist/chromedriver</span></span><br></pre></td></tr></table></figure><h3 id="Q-Vue-React-Angular学习哪个好-哪个工作比较好找"><a href="#Q-Vue-React-Angular学习哪个好-哪个工作比较好找" class="headerlink" title="Q:Vue ,React, Angular学习哪个好?哪个工作比较好找!"></a>Q:Vue ,React, Angular学习哪个好?哪个工作比较好找!</h3><p>Vue属于渐进式开发,传统开发过渡 MVVM 模式的小伙伴,Vue 比较好上手,学习成本比较低<br>基础比较好的,有折腾精神的,可以选择NG5或者React 16;</p><p>NG5需要学习typescript和rxjs,还用到比较多的新东西,比如装饰器,后端的注入概念.ng有自己的一整套 MVVM 流程;</p><p>而Vue和React核心只是view,可以搭配自己喜欢的</p><p>React的写法偏向函数式写法,还有 jsx,官方自己有 flow,当然也能搭配ts,我也没怎么接触,所以也有一定的学习成本;</p><p>至于哪个比较好找工作!告诉你,若是只会一个框架,那不是一个合格的前端;</p><p>人家要的是动手能力,解决能力!!技术和待遇是成正比的!!</p><p>颜值和背景,学历,口才可以加分,但是这些条件你必须要有的基础下才能考虑这些!</p><h3 id="Q-我有个复杂组件需要有新增和编辑的功能同时存在-但是字段要保持不变性怎么破"><a href="#Q-我有个复杂组件需要有新增和编辑的功能同时存在-但是字段要保持不变性怎么破" class="headerlink" title="Q: 我有个复杂组件需要有新增和编辑的功能同时存在,但是字段要保持不变性怎么破"></a>Q: 我有个复杂组件需要有新增和编辑的功能同时存在,但是字段要保持不变性怎么破</h3><p>字段保持不变性怎么理解呢? 就是说比如新增和编辑同时共享一份 data;</p><p>有一种就是路由变了,组件渲染同一个(不引起组件的重新渲染和销毁!),但是功能却不同(新增和编译),</p><p>比如从编辑切到新增,data必须为空白没有赋值的,等待我们去赋值;</p><p>这时候有个东西就特别适合了,那就是<a href="https://immutable-js.github.io/immutable-js/" target="_blank" rel="noopener">immutable-js</a>;</p><p>这个东西可以模拟数据的唯一性!或者叫做不变性!</p><h3 id="Q-”首屏加载比较慢-怎么破-打包文件文件比较大”"><a href="#Q-”首屏加载比较慢-怎么破-打包文件文件比较大”" class="headerlink" title="Q:”首屏加载比较慢!!怎么破!打包文件文件比较大”"></a>Q:”首屏加载比较慢!!怎么破!打包文件文件比较大”</h3><p>依次排除和确认:</p><ul><li>减少第三方库的使用,比如jquey这些都可以不要了,很少操作 dom,而且原生基本满足开发</li><li>若是引入moment这些,webpack 排除国际化语言包</li><li>webpack 常规压缩js,css, 愿意折腾的还可以引入 dll 这些</li><li>路由组件采用懒加载</li><li>加入路由过渡和加载等待效果,虽然不能解决根本,但起码让人等的舒心一点不是么!</li></ul><p>整体下来,打包之后一般不会太大;</p><p>但是倘若想要更快?那就只能采用服务端渲染(SSR)了,可以避免浏览器去解析模板和指令这些; 直接返回一个 html ,.还能 SEO,</p><p><strong>Vue你们如何做spa的模块懒加载呢</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 推荐这种写法</span></span><br><span class="line"><span class="comment">// 一来可以聚合webpackChunkName名字一样的为一个模块，也是当前版本推荐的加载姿势</span></span><br><span class="line"><span class="keyword">const</span> Home = <span class="function"><span class="params">()</span> =&gt;</span><span class="keyword">import</span>(<span class="string">"HomePage"</span>);</span><br></pre></td></tr></table></figure><h3 id="Q-Vue-SPA-没法做优化-SEO-有解决方案么"><a href="#Q-Vue-SPA-没法做优化-SEO-有解决方案么" class="headerlink" title="Q: Vue SPA 没法做优化(SEO)!有解决方案么"></a>Q: Vue SPA 没法做优化(SEO)!有解决方案么</h3><p>可以的,ssr(服务端渲染就能满足你的需求),因为请求回来就是一个处理完毕的 html</p><p>现在 vue 的服务端开发框架有这么个比较流行,如下</p><p>传送门:<a href="https://zh.nuxtjs.org/" target="_blank" rel="noopener">Nuxt.js</a></p><p>也有官方的方案,<a href="https://ssr.vuejs.org/zh/" target="_blank" rel="noopener">ssr 完全指南</a></p><h3 id="Q-Vue可以写-hybird-App-么"><a href="#Q-Vue可以写-hybird-App-么" class="headerlink" title="Q: Vue可以写 hybird App 么!"></a>Q: Vue可以写 hybird App 么!</h3><p>当然可以,两个方向.</p><ul><li><a href="https://github.com/nativescript-vue/nativescript-vue" target="_blank" rel="noopener">codorva + nativescript</a></li><li><a href="https://weex.apache.org/" target="_blank" rel="noopener">Weex</a></li></ul><h3 id="Q-Vue-可以写桌面端么"><a href="#Q-Vue-可以写桌面端么" class="headerlink" title="Q: Vue 可以写桌面端么?"></a>Q: Vue 可以写桌面端么?</h3><p>当然可以,有electron和node-webkit(nw);</p><p>我只了解过electron;</p><ul><li><a href="https://www.electronjs.org/" target="_blank" rel="noopener">electron</a></li><li><a href="https://github.com/SimulatedGREG/electron-vue" target="_blank" rel="noopener">electron-vue</a>: Vue-cli 针对 electron 的脚手架模板</li></ul><h3 id="Q-Vue开发-项目中还需要-jQuery么"><a href="#Q-Vue开发-项目中还需要-jQuery么" class="headerlink" title="Q: Vue开发,项目中还需要 jQuery么"></a>Q: Vue开发,项目中还需要 jQuery么</h3><p>分情况探讨:</p><ol><li>若是老项目,只是单纯引入 Vue 简化开发的,依旧用吧,</li><li>重构项目?或者发起新项目的,真心没必要了.开发思路不一样,很多以前用 DOM 操作的现在基本可以数据驱动实现,而少量迫不得已的DOM 操作原生就能搞定,而且能减小打包体积,速度又快,何乐而不为!</li></ol><h3 id="Q-Vue-PC-桌面-端-M-mobile-移动-端-用什么-UI-框架好啊"><a href="#Q-Vue-PC-桌面-端-M-mobile-移动-端-用什么-UI-框架好啊" class="headerlink" title="Q:Vue PC(桌面)端,M(mobile:移动)端,用什么 UI 框架好啊!"></a>Q:Vue PC(桌面)端,M(mobile:移动)端,用什么 UI 框架好啊!</h3><p>PC: 推荐的只有两个 element UI和iview</p><p>mobile : Vux、Vant</p><h3 id="Q-Vue可以写微信小程序么-怎么搞起"><a href="#Q-Vue可以写微信小程序么-怎么搞起" class="headerlink" title="Q: Vue可以写微信小程序么,怎么搞起"></a>Q: Vue可以写微信小程序么,怎么搞起</h3><p>可以的,社区也有人出了对应的解决方案,uniapp;</p><ul><li><a href="https://uniapp.dcloud.io/" target="_blank" rel="noopener">uniapp</a></li></ul><h3 id="Q-the-“scope”-attribute-for-scoped-slots-replaced-by-“slot-scope”-since-2-5"><a href="#Q-the-“scope”-attribute-for-scoped-slots-replaced-by-“slot-scope”-since-2-5" class="headerlink" title="Q:the “scope” attribute for scoped slots replaced by “slot-scope” since 2.5"></a>Q:the “scope” attribute for scoped slots replaced by “slot-scope” since 2.5</h3><p>这个问题只出现老项目升级到 vue2.5+的时候, 提示就是 scope 现在要用 slot-scope 来代替,<br>但是 scope 暂时可以用,以后会移除</p><h3 id="Q-Vue-2-6废除的特性清单"><a href="#Q-Vue-2-6废除的特性清单" class="headerlink" title="Q:Vue 2.6废除的特性清单"></a>Q:Vue 2.6废除的特性清单</h3><p>自 2.6.0 起有所更新。已废弃的使用 slot 特性的语法在<a href="https://cn.vuejs.org/v2/guide/components-slots.html#%E5%BA%9F%E5%BC%83%E4%BA%86%E7%9A%84%E8%AF%AD%E6%B3%95" target="_blank" rel="noopener">这里</a><br>官方推荐用v-slot来调用插槽</p><h3 id="Q-想要-mock-数据-直接请求-json文件-为什么不行"><a href="#Q-想要-mock-数据-直接请求-json文件-为什么不行" class="headerlink" title="Q:想要 mock 数据,直接请求 json文件 为什么不行!"></a>Q:想要 mock 数据,直接请求 json文件 为什么不行!</h3><p>当然不行,浏览器安全机制不允许,JS天生不能越权(NodeJS不能单纯说是JS)</p><p>你要 mock 数据,一般都有比较成熟的方案传送门:</p><ul><li><a href="https://github.com/nuysoft/Mock" target="_blank" rel="noopener">Mock</a></li><li><a href="https://github.com/easy-mock/easy-mock" target="_blank" rel="noopener">Easy Mock</a></li></ul><h2 id="Vue-周边库汇总"><a href="#Vue-周边库汇总" class="headerlink" title="Vue 周边库汇总"></a>Vue 周边库汇总</h2><p><a href="https://github.com/vuejs/awesome-vue" target="_blank" rel="noopener">Awesome Vue </a>: 里面收集了 Vue 方方面面的热门库!!</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;文章内容覆盖范围,芝麻绿豆的破问题都有,不止于vue;&lt;br&gt;给出的是方案,而非手把手一字一句的给你说十万个为什么!&lt;/p&gt;
&lt;h2 id=&quot;问题汇总&quot;&gt;&lt;a href=&quot;#问题汇总&quot; class=&quot;headerlink&quot; title=&quot;问题汇总&quot;&gt;&lt;/a&gt;问题汇总&lt;/h2&gt;&lt;h3 id=&quot;Q-安装超时-install-timeout&quot;&gt;&lt;a href=&quot;#Q-安装超时-install-timeout&quot; class=&quot;headerlink&quot; title=&quot;Q:安装超时(install timeout)&quot;&gt;&lt;/a&gt;Q:安装超时(install timeout)&lt;/h3&gt;&lt;p&gt;方案有这么些:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;cnpm : 国内对npm的镜像版本&lt;/p&gt;
    
    </summary>
    
      <category term="vue" scheme="https://chongdee.github.io/categories/vue/"/>
    
    
      <category term="vue" scheme="https://chongdee.github.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>vue-cli4+webpack4移动端框架</title>
    <link href="https://chongdee.github.io/2021/05/09/webpack/vue-cli4+webpack4%E7%A7%BB%E5%8A%A8%E7%AB%AF%E6%A1%86%E6%9E%B6/"/>
    <id>https://chongdee.github.io/2021/05/09/webpack/vue-cli4+webpack4移动端框架/</id>
    <published>2021-05-08T17:16:10.291Z</published>
    <updated>2021-05-08T17:18:59.015Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>这是基于 vue-cli4 实现的移动端框架，其中包含项目常用的配置，组件封装及webpack优化方法，可供快速开发使用。</p><p>技术栈：vue-cli4 + webpack4 + vant + axios + less + postcss-px2rem</p><p>源码 <a href="https://github.com/Michael-lzg/vue-cli4-vant" target="_blank" rel="noopener">https://github.com/Michael-lzg/vue-cli4-vant</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 安装依赖</span></span><br><span class="line">npm install</span><br><span class="line"></span><br><span class="line"><span class="comment">// 本地启动</span></span><br><span class="line">npm run dev</span><br><span class="line"></span><br><span class="line"><span class="comment">// 生产打包</span></span><br><span class="line">npm run build</span><br></pre></td></tr></table></figure><a id="more"></a><p>在一两年前，vue-cli3已经声驾到3.0+版本，但是由于旧项目一致习惯于vue-cli2的脚手架的使用，之前也写过一篇 <a href="https://juejin.im/post/5db806b1f265da4d5133485a" target="_blank" rel="noopener">搭建一个vue-cli的移动端H5开发模板</a> 简单总结了一点移动端的开发技巧。  </p><p>近日升级vue-cli脚手架才发现，这已经升级到4.0+版本了，觉得很多必要在新的项目中使用vue-cli4进行开发，加上近来对webpack有了进一步理解，所以结合了vue-cli4和webpack搭建了一个移动端框架，以便开箱即用。 主要包括如下技术点：</p><ul><li>vue-cli4脚手架</li><li>vant按需引入</li><li>移动端rem适配</li><li>axios拦截封装</li><li>util工具类函数封装</li><li>vue-router配置</li><li>登录权限校验</li><li>多环境变量配置</li><li>vue.config.js配置</li><li>toast组件封装</li><li>dialog组件封装</li><li>跨域代理设置</li><li>webpack打包可视化分析</li><li>CDN资源优化</li><li>gzip打包优化</li><li>首页添加骨架屏</li></ul><p>关于更多的webpack优化方法，可参考 <a href="https://github.com/Michael-lzg/webpack-vue-cli" target="_blank" rel="noopener">https://github.com/Michael-lzg/webpack-vue-cli</a></p><h2 id="配置-vant"><a href="#配置-vant" class="headerlink" title="配置 vant"></a>配置 vant</h2><p>vant 是一套轻量、可靠的移动端 Vue 组件库，非常适合基于 vue 技术栈的移动端开发。在过去很长的一段时间内，本人用的移动端 UI 框架都是 vux。后来由于 vux 不支持 vue-cli3，就转用了 vant，不得不说，无论是在交互体验上，还是代码逻辑上，vant 都比 vux 好很多，而且 vant 的坑比较少。</p><p>对于第三方 UI 组件，如果是全部引入的话，比如会造成打包体积过大，加载首页白屏时间过长的问题，所以按需加载非常必要。vant 也提供了按需加载的方法。<code>babel-plugin-import</code> 是一款 babel 插件，它会在编译过程中将 import 的写法自动转换为按需引入的方式。</p><p>1、安装依赖</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">npm</span> i babel-plugin-<span class="keyword">import</span> -D</span><br></pre></td></tr></table></figure><p>2、配置 .babelrc 或者 babel.config.js 文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在.babelrc 中添加配置</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"plugins"</span>: [</span><br><span class="line">    [<span class="string">"import"</span>, &#123;</span><br><span class="line">      <span class="string">"libraryName"</span>: <span class="string">"vant"</span>,</span><br><span class="line">      <span class="string">"libraryDirectory"</span>: <span class="string">"es"</span>,</span><br><span class="line">      <span class="string">"style"</span>: <span class="literal">true</span></span><br><span class="line">    &#125;]</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对于使用 babel7 的用户，可以在 babel.config.js 中配置</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  plugins: [</span><br><span class="line">    [<span class="string">'import'</span>, &#123;</span><br><span class="line">      libraryName: <span class="string">'vant'</span>,</span><br><span class="line">      libraryDirectory: <span class="string">'es'</span>,</span><br><span class="line">      style: <span class="literal">true</span></span><br><span class="line">    &#125;, <span class="string">'vant'</span>]</span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>3、按需引入</p><p>你可以在代码中直接引入 Vant 组件，插件会自动将代码转化为方式二中的按需引入形式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> &#123; Button &#125; <span class="keyword">from</span> <span class="string">'vant'</span></span><br><span class="line"></span><br><span class="line">Vue.use(Button)</span><br></pre></td></tr></table></figure><h2 id="rem-适配"><a href="#rem-适配" class="headerlink" title="rem 适配"></a>rem 适配</h2><p>移动端适配是开发过程中不得不面对的事情。在此，我们使用 postcss 中的 px2rem-loader，将我们项目中的 px 按一定比例转化 rem，这样我们就可以对着蓝湖上的标注写 px 了。</p><p>我们将 html 字跟字体设置为 100px，很多人选择设置为 375px，但是我觉得这样换算出来的 rem 不够精确，而且我们在控制台上调试代码的时候无法很快地口算得出它本来的 px 值。如果设置 1rem=100px，这样我们看到的 0.16rem，0.3rem 就很快得算出原来是 16px，30px 了。</p><p>具体步骤如下；</p><p>1、安装依赖</p><figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install px2rem-loader --<span class="built_in">save</span>-<span class="built_in">dev</span></span><br></pre></td></tr></table></figure><p>2、在 vue.config.js 进行如下配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">css: &#123;</span><br><span class="line">  <span class="comment">// css预设器配置项</span></span><br><span class="line">  loaderOptions: &#123;</span><br><span class="line">    postcss: &#123;</span><br><span class="line">      plugins: [</span><br><span class="line">        <span class="built_in">require</span>(<span class="string">'postcss-px2rem'</span>)(&#123;</span><br><span class="line">          remUnit: <span class="number">100</span></span><br><span class="line">        &#125;)</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>3、在 main.js 设置 html 跟字体大小</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initRem</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> cale = <span class="built_in">window</span>.screen.availWidth &gt; <span class="number">750</span> ? <span class="number">2</span> : <span class="built_in">window</span>.screen.availWidth / <span class="number">375</span></span><br><span class="line">  <span class="built_in">window</span>.document.documentElement.style.fontSize = <span class="string">`<span class="subst">$&#123;<span class="number">100</span> * cale&#125;</span>px`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'resize'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  initRem()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="axios-请求封装"><a href="#axios-请求封装" class="headerlink" title="axios 请求封装"></a>axios 请求封装</h2><p>1、设置请求拦截和响应拦截</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> PRODUCT_URL = <span class="string">'https://xxxx.com'</span></span><br><span class="line"><span class="keyword">const</span> MOCK_URL = <span class="string">'http://xxxx.com'</span></span><br><span class="line"><span class="keyword">let</span> http = axios.create(&#123;</span><br><span class="line">  baseURL: process.env.NODE_ENV === <span class="string">'production'</span> ? PRODUCT_URL : MOCK_URL,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 请求拦截器</span></span><br><span class="line">http.interceptors.request.use(</span><br><span class="line">  (config) =&gt; &#123;</span><br><span class="line">    <span class="comment">// 设置token，Content-Type</span></span><br><span class="line">    <span class="keyword">var</span> token = sessionStorage.getItem(<span class="string">'token'</span>)</span><br><span class="line">    config.headers[<span class="string">'token'</span>] = token</span><br><span class="line">    config.headers[<span class="string">'Content-Type'</span>] = <span class="string">'application/json;charset=UTF-8'</span></span><br><span class="line">    <span class="comment">// 请求显示loading效果</span></span><br><span class="line">    <span class="keyword">if</span> (config.loading === <span class="literal">true</span>) &#123;</span><br><span class="line">      vm.$loading.show()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> config</span><br><span class="line">  &#125;,</span><br><span class="line">  (error) =&gt; &#123;</span><br><span class="line">    vm.$loading.hide()</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error)</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line"><span class="comment">// 响应拦截器</span></span><br><span class="line">http.interceptors.response.use(</span><br><span class="line">  (res) =&gt; &#123;</span><br><span class="line">    vm.$loading.hide()</span><br><span class="line">    <span class="comment">// token失效，重新登录</span></span><br><span class="line">    <span class="keyword">if</span> (res.data.code === <span class="number">401</span>) &#123;</span><br><span class="line">      <span class="comment">//  重新登录</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">  &#125;,</span><br><span class="line">  (error) =&gt; &#123;</span><br><span class="line">    vm.$loading.hide()</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error)</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>2、封装 get 和 post 请求方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get</span>(<span class="params">url, data, lodaing</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    http</span><br><span class="line">      .get(url)</span><br><span class="line">      .then(</span><br><span class="line">        (response) =&gt; &#123;</span><br><span class="line">          resolve(response)</span><br><span class="line">        &#125;,</span><br><span class="line">        (err) =&gt; &#123;</span><br><span class="line">          reject(err)</span><br><span class="line">        &#125;</span><br><span class="line">      )</span><br><span class="line">      .catch(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">        reject(error)</span><br><span class="line">      &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">post</span>(<span class="params">url, data, loading</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    http</span><br><span class="line">      .post(url, data, &#123; <span class="attr">loading</span>: loading &#125;)</span><br><span class="line">      .then(</span><br><span class="line">        (response) =&gt; &#123;</span><br><span class="line">          resolve(response)</span><br><span class="line">        &#125;,</span><br><span class="line">        (err) =&gt; &#123;</span><br><span class="line">          reject(err)</span><br><span class="line">        &#125;</span><br><span class="line">      )</span><br><span class="line">      .catch(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">        reject(error)</span><br><span class="line">      &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123; get, post &#125;</span><br></pre></td></tr></table></figure><p>3、把 get，post 方法挂载到 vue 实例上。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; get, post &#125; <span class="keyword">from</span> <span class="string">'./js/ajax'</span></span><br><span class="line">Vue.prototype.$http = &#123; get, post &#125;</span><br></pre></td></tr></table></figure><h2 id="工具类函数封装"><a href="#工具类函数封装" class="headerlink" title="工具类函数封装"></a>工具类函数封装</h2><p>1、添加方法到 vue 实例的原型链上</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  install (Vue, options) &#123;</span><br><span class="line">    Vue.prototype.util = &#123;</span><br><span class="line">      method1(val) &#123;</span><br><span class="line">        ...</span><br><span class="line">      &#125;,</span><br><span class="line">      method2 (val) &#123;</span><br><span class="line">       ...</span><br><span class="line">      &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、在 main.js 通过 vue.use()注册</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> utils <span class="keyword">from</span> <span class="string">'./js/utils'</span></span><br><span class="line">Vue.use(utils)</span><br></pre></td></tr></table></figure><h2 id="vue-router-配置"><a href="#vue-router-配置" class="headerlink" title="vue-router 配置"></a>vue-router 配置</h2><p>平时很多人对 vue-router 的配置可配置了 path 和 component，实现了路由跳转即可。其实 vue-router 可做的事情还有很多，比如</p><ul><li>路由懒加载配置</li><li>改变单页面应用的 title</li><li>登录权限校验</li><li>页面缓存配置</li></ul><h4 id="路由懒加载配置"><a href="#路由懒加载配置" class="headerlink" title="路由懒加载配置"></a>路由懒加载配置</h4><p>Vue 项目中实现路由按需加载（路由懒加载）的 3 种方式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1、Vue异步组件技术：</span></span><br><span class="line">&#123;</span><br><span class="line">  path: <span class="string">'/home'</span>,</span><br><span class="line">  name: <span class="string">'Home'</span>,</span><br><span class="line">  component: <span class="function"><span class="params">resolve</span> =&gt;</span> reqire([<span class="string">'../views/Home.vue'</span>], resolve)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2、es6提案的import()</span></span><br><span class="line">&#123;</span><br><span class="line">  path: <span class="string">'/'</span>,</span><br><span class="line">  name: <span class="string">'home'</span>,</span><br><span class="line">  component: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'../views/Home.vue'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3、webpack提供的require.ensure()</span></span><br><span class="line">&#123;</span><br><span class="line">  path: <span class="string">'/home'</span>,</span><br><span class="line">  name: <span class="string">'Home'</span>,</span><br><span class="line">  component: <span class="function"><span class="params">r</span> =&gt;</span> <span class="built_in">require</span>.ensure([],() =&gt;  r(<span class="built_in">require</span>(<span class="string">'../views/Home.vue'</span>)), <span class="string">'home'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>本项目采用的是第二种方式，为了后续 webpack 打包优化。</p><h4 id="改变单页面应用的-title"><a href="#改变单页面应用的-title" class="headerlink" title="改变单页面应用的 title"></a>改变单页面应用的 title</h4><p>由于单页面应用只有一个 html，所有页面的 title 默认是不会改变的，但是我们可以才路由配置中加入相关属性，再在路由守卫中通过 js 改变页面的 title</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">router.beforeEach(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">document</span>.title = to.meta.title</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="登录权限校验"><a href="#登录权限校验" class="headerlink" title="登录权限校验"></a>登录权限校验</h4><p>在应用中，通常会有以下的场景，比如商城：有些页面是不需要登录即可访问的，如首页，商品详情页等，都是用户在任何情况都能看到的；但是也有是需要登录后才能访问的，如个人中心，购物车等。此时就需要对页面访问进行控制了。</p><p>此外，像一些需要记录用户信息和登录状态的项目，也是需要做登录权限校验的，以防别有用心的人通过直接访问页面的 url 打开页面。</p><p>此时。路由守卫可以帮助我们做登录校验。具体如下：</p><p>1、配置路由的 meta 对象的 auth 属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">'/'</span>,</span><br><span class="line">    name: <span class="string">'home'</span>,</span><br><span class="line">    component: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'../views/Home.vue'</span>),</span><br><span class="line">    meta: &#123; <span class="attr">title</span>: <span class="string">'首页'</span>, <span class="attr">keepAlive</span>: <span class="literal">false</span>, <span class="attr">auth</span>: <span class="literal">false</span> &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">'/mine'</span>,</span><br><span class="line">    name: <span class="string">'mine'</span>,</span><br><span class="line">    component: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'../views/mine.vue'</span>),</span><br><span class="line">    meta: &#123; <span class="attr">title</span>: <span class="string">'我的'</span>, <span class="attr">keepAlive</span>: <span class="literal">false</span>, <span class="attr">auth</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>2、在路由首页进行判断。当<code>to.meta.auth</code>为<code>true</code>(需要登录)，且不存在登录信息缓存时，需要重定向去登录页面</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">router.beforeEach(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">document</span>.title = to.meta.title</span><br><span class="line">  <span class="keyword">const</span> userInfo = sessionStorage.getItem(<span class="string">'userInfo'</span>) || <span class="literal">null</span></span><br><span class="line">  <span class="keyword">if</span> (!userInfo &amp;&amp; to.meta.auth) &#123;</span><br><span class="line">    next(<span class="string">'/login'</span>)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    next()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="页面缓存配置"><a href="#页面缓存配置" class="headerlink" title="页面缓存配置"></a>页面缓存配置</h4><p>项目中，总有一些页面我们是希望加载一次就缓存下来的，此时就用到 keep-alive 了。keep-alive 是 Vue 提供的一个抽象组件，用来对组件进行缓存，从而节省性能，由于是一个抽象组件，所以在 v 页面渲染完毕后不会被渲染成一个 DOM 元素。</p><p>1、通过配置路由的 meta 对象的 keepAlive 属性值来区分页面是否需要缓存</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">'/'</span>,</span><br><span class="line">    name: <span class="string">'home'</span>,</span><br><span class="line">    component: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'../views/Home.vue'</span>),</span><br><span class="line">    meta: &#123; <span class="attr">title</span>: <span class="string">'首页'</span>, <span class="attr">keepAlive</span>: <span class="literal">false</span>, <span class="attr">auth</span>: <span class="literal">false</span> &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">'/list'</span>,</span><br><span class="line">    name: <span class="string">'list'</span>,</span><br><span class="line">    component: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'../views/list.vue'</span>),</span><br><span class="line">    meta: &#123; <span class="attr">title</span>: <span class="string">'列表页'</span>, <span class="attr">keepAlive</span>: <span class="literal">true</span>, <span class="attr">auth</span>: <span class="literal">false</span> &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>2、在 app.vue 做缓存判断</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">router-view</span> <span class="attr">v-if</span>=<span class="string">"!$route.meta.keepAlive"</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">keep-alive</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-view</span> <span class="attr">v-if</span>=<span class="string">"$route.meta.keepAlive"</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">keep-alive</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="多环境变量配置"><a href="#多环境变量配置" class="headerlink" title="多环境变量配置"></a>多环境变量配置</h2><p>首先我们先来了解一下环境变量，一般情况下我们的项目会有三个环境，本地环境(development)，测试环境(test)，生产环境(production)，我们可以在项目根目录下建三个配置环境变量的文件<code>.env.development</code>，<code>.env.test</code>，<code>.env.production</code></p><p>环境变量文件中只包含环境变量的“键=值”对：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">NODE_ENV = <span class="string">'production'</span></span><br><span class="line">VUE_APP_ENV = <span class="string">'production'</span> <span class="comment">// 只有VUE_APP开头的环境变量可以在项目代码中直接使用</span></span><br></pre></td></tr></table></figure><p>除了自定义的 VUE<em>APP</em>*变量之外，还有两个可用的变量：</p><ul><li>NODE_ENV : “development”、”production” 或 “test”中的一个。具体的值取决于应用运行的模式。</li><li>BASE_URL : 和 vue.config.js 中的 publicPath 选项相符，即你的应用会部署到的基础路径。</li></ul><p>下面开始配置我们的环境变量</p><p>1、在项目根目录中新建.env.*</p><ul><li>.env.development 本地开发环境配置</li></ul><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">NODE_ENV</span>=<span class="string">'development'</span></span><br><span class="line"><span class="attr">VUE_APP_ENV</span> = <span class="string">'development'</span></span><br></pre></td></tr></table></figure><ul><li>env.staging 测试环境配置</li></ul><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">NODE_ENV</span>=<span class="string">'production'</span></span><br><span class="line"><span class="attr">VUE_APP_ENV</span> = <span class="string">'staging'</span></span><br></pre></td></tr></table></figure><ul><li>env.production 正式环境配置</li></ul><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">NODE_ENV</span>=<span class="string">'production'</span></span><br><span class="line"><span class="attr">VUE_APP_ENV</span> = <span class="string">'production'</span></span><br></pre></td></tr></table></figure><p>为了在不同环境配置更多的变量，我们在 src 文件下新建一个 config/index</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 根据环境引入不同配置 process.env.NODE_ENV</span></span><br><span class="line"><span class="keyword">const</span> config = <span class="built_in">require</span>(<span class="string">'./env.'</span> + process.env.VUE_APP_ENV)</span><br><span class="line"><span class="built_in">module</span>.exports = config</span><br></pre></td></tr></table></figure><p>在同级目录下新建 <code>env.development.js</code>，<code>env.test.js</code>，<code>env.production.js</code>，在里面配置需要的变量。<br>以 env.development.js 为例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  baseUrl: <span class="string">'http://localhost:8089'</span>, <span class="comment">// 项目地址</span></span><br><span class="line">  baseApi: <span class="string">'https://www.mock.com/api'</span>, <span class="comment">// 本地api请求地址</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、配置打包命令</p><p>package.json 里的 scripts 不同环境的打包命令</p><ul><li>通过 npm run serve 启动本地</li><li>通过 npm run test 打包测试</li><li>通过 npm run build 打包正式</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"scripts"</span>: &#123;</span><br><span class="line">  <span class="string">"dev"</span>: <span class="string">"vue-cli-service serve"</span>,</span><br><span class="line">  <span class="string">"build"</span>: <span class="string">"vue-cli-service build"</span>,</span><br><span class="line">  <span class="string">"test"</span>: <span class="string">"vue-cli-service build --mode test"</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="vue-config-js-配置"><a href="#vue-config-js-配置" class="headerlink" title="vue.config.js 配置"></a>vue.config.js 配置</h2><p>vue-cli3 开始，新建的脚手架都需要我们在 vue.config.js 配置我们项目的东西。主要包括</p><ul><li>打包后文件输出位置</li><li>关闭生产环境 sourcemap</li><li>配置 rem 转化 px</li><li>配置 alias 别名</li><li>去除生产环境 console</li><li>跨域代理设置</li></ul><p>此外，还有很多属于优化打包的配置，后面会一一道来。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  publicPath: <span class="string">'./'</span>, <span class="comment">// 默认为'/'</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 将构建好的文件输出到哪里，本司要求</span></span><br><span class="line">  outputDir: <span class="string">'dist/static'</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 放置生成的静态资源(js、css、img、fonts)的目录。</span></span><br><span class="line">  assetsDir: <span class="string">'static'</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 指定生成的 index.html 的输出路径</span></span><br><span class="line">  indexPath: <span class="string">'index.html'</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 是否使用包含运行时编译器的 Vue 构建版本。</span></span><br><span class="line">  runtimeCompiler: <span class="literal">false</span>,</span><br><span class="line"></span><br><span class="line">  transpileDependencies: [],</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 如果你不需要生产环境的 source map</span></span><br><span class="line">  productionSourceMap: <span class="literal">false</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 配置css</span></span><br><span class="line">  css: &#123;</span><br><span class="line">    <span class="comment">// 是否使用css分离插件 ExtractTextPlugin</span></span><br><span class="line">    extract: <span class="literal">true</span>,</span><br><span class="line">    sourceMap: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">// css预设器配置项</span></span><br><span class="line">    loaderOptions: &#123;</span><br><span class="line">      postcss: &#123;</span><br><span class="line">        plugins: [</span><br><span class="line">          <span class="built_in">require</span>(<span class="string">'postcss-px2rem'</span>)(&#123;</span><br><span class="line">            remUnit: <span class="number">100</span>,</span><br><span class="line">          &#125;),</span><br><span class="line">        ],</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 启用 CSS modules for all css / pre-processor files.</span></span><br><span class="line">    modules: <span class="literal">false</span>,</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 是一个函数，允许对内部的 webpack 配置进行更细粒度的修改。</span></span><br><span class="line">  chainWebpack: <span class="function">(<span class="params">config</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 配置别名</span></span><br><span class="line">    config.resolve.alias</span><br><span class="line">      .set(<span class="string">'@'</span>, resolve(<span class="string">'src'</span>))</span><br><span class="line">      .set(<span class="string">'assets'</span>, resolve(<span class="string">'src/assets'</span>))</span><br><span class="line">      .set(<span class="string">'components'</span>, resolve(<span class="string">'src/components'</span>))</span><br><span class="line">      .set(<span class="string">'views'</span>, resolve(<span class="string">'src/views'</span>))</span><br><span class="line"></span><br><span class="line">    config.optimization.minimizer(<span class="string">'terser'</span>).tap(<span class="function">(<span class="params">args</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 去除生产环境console</span></span><br><span class="line">      args[<span class="number">0</span>].terserOptions.compress.drop_console = <span class="literal">true</span></span><br><span class="line">      <span class="keyword">return</span> args</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 是否为 Babel 或 TypeScript 使用 thread-loader。该选项在系统的 CPU 有多于一个内核时自动启用，仅作用于生产构建。</span></span><br><span class="line">  parallel: <span class="built_in">require</span>(<span class="string">'os'</span>).cpus().length &gt; <span class="number">1</span>,</span><br><span class="line"></span><br><span class="line">  devServer: &#123;</span><br><span class="line">    host: <span class="string">'0.0.0.0'</span>,</span><br><span class="line">    port: <span class="number">8088</span>, <span class="comment">// 端口号</span></span><br><span class="line">    https: <span class="literal">false</span>, <span class="comment">// https:&#123;type:Boolean&#125;</span></span><br><span class="line">    open: <span class="literal">false</span>, <span class="comment">// 配置自动启动浏览器  open: 'Google Chrome'-默认启动谷歌</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 配置多个代理</span></span><br><span class="line">    proxy: &#123;</span><br><span class="line">      <span class="string">'/api'</span>: &#123;</span><br><span class="line">        target: <span class="string">'https://www.mock.com'</span>,</span><br><span class="line">        ws: <span class="literal">true</span>, <span class="comment">// 代理的WebSockets</span></span><br><span class="line">        changeOrigin: <span class="literal">true</span>, <span class="comment">// 允许websockets跨域</span></span><br><span class="line">        pathRewrite: &#123;</span><br><span class="line">          <span class="string">'^/api'</span>: <span class="string">''</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="基础组件封装"><a href="#基础组件封装" class="headerlink" title="基础组件封装"></a>基础组件封装</h2><p>在开发项目过程中，通常会用到很多功能和设计相类似的组件，toast 和 dialog 组件基本是每一个移动端项目都会用到的。为了更好匹配自己公司的 UI 设计风格，我们没有直接用 vant 的 toast 和 dialog 组件，而是自己封装了类似的组件，可供直接调用，如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.$toast(&#123; <span class="attr">msg</span>: <span class="string">'手机号码不能为空'</span> &#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.$toast(&#123;</span><br><span class="line">  msg: <span class="string">'成功提示'</span>,</span><br><span class="line">  type: <span class="string">'success'</span>,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.$dialog(&#123;</span><br><span class="line">  title: <span class="string">'删除提示'</span>,</span><br><span class="line">  text: <span class="string">'是否确定删除此标签？'</span>,</span><br><span class="line">  showCancelBtn: <span class="literal">true</span>,</span><br><span class="line">  confirmText: <span class="string">'确认'</span>,</span><br><span class="line">  confirm(content) &#123;</span><br><span class="line">    alert(<span class="string">'删除成功'</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>效果图如下</p><p><img src="https://user-gold-cdn.xitu.io/2020/5/10/171fc7862c4a065f?w=1032&amp;h=523&amp;f=png&amp;s=70452" alt=""></p><h4 id="toast-传入参数"><a href="#toast-传入参数" class="headerlink" title="toast 传入参数"></a>toast 传入参数</h4><p><strong>Props</strong></p><table><thead><tr><th>name</th><th>type</th><th>default</th><th>description</th></tr></thead><tbody><tr><td>msg</td><td>String</td><td>‘’</td><td>弹窗提示语</td></tr><tr><td>type</td><td>String</td><td>‘’</td><td>弹窗类型：success(成功提示),fail(失败提示),warning(警告),loading(加载)</td></tr></tbody></table><h4 id="dialog-传入参数"><a href="#dialog-传入参数" class="headerlink" title="dialog 传入参数"></a>dialog 传入参数</h4><p><strong>Props</strong></p><table><thead><tr><th>name</th><th>type</th><th>default</th><th>description</th></tr></thead><tbody><tr><td>title</td><td>String</td><td>‘’</td><td>标题</td></tr><tr><td>text</td><td>String</td><td>‘’</td><td>文本内容</td></tr><tr><td>type</td><td>String</td><td>‘’</td><td>默认纯文本，input(输入框)</td></tr><tr><td>maxlength</td><td>Number</td><td>20</td><td>输入的最多字数</td></tr><tr><td>confirmText</td><td>String</td><td>确定</td><td>右边按钮</td></tr><tr><td>cancelText</td><td>String</td><td>取消</td><td>左边按钮</td></tr></tbody></table><p><strong>Events</strong></p><table><thead><tr><th>name</th><th>params</th><th>description</th></tr></thead><tbody><tr><td>confirm</td><td>null</td><td>选择后的回调</td></tr><tr><td>cancel</td><td>ull</td><td>取消后的回调</td></tr></tbody></table><h2 id="webpack-可视化分析"><a href="#webpack-可视化分析" class="headerlink" title="webpack 可视化分析"></a>webpack 可视化分析</h2><p>从这里开始，我们开始进行 webpack 优化打包。首先我们来分析一下 webpack 打包性能瓶颈，找出问题所在，然后才能对症下药。此时就用到 webpack-bundle-analyzer 了。<br>1、安装依赖</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install webpack-bundle-analyzer -D</span><br></pre></td></tr></table></figure><p>2、在 vue.config.js 配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; BundleAnalyzerPlugin &#125; = <span class="built_in">require</span>(<span class="string">'webpack-bundle-analyzer'</span>)</span><br><span class="line">configureWebpack: <span class="function">(<span class="params">config</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (process.env.NODE_ENV === <span class="string">'production'</span>) &#123;</span><br><span class="line">    config.plugins.push(<span class="keyword">new</span> BundleAnalyzerPlugin())</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>打包后，我们可以看到这样一份依赖图</p><p><img src="https://user-gold-cdn.xitu.io/2020/5/10/171fc78ad5a37759?w=1909&amp;h=931&amp;f=png&amp;s=235323" alt=""></p><p>从以上的界面中，我们可以得到以下信息：</p><ul><li>打包出的文件中都包含了什么，以及模块之间的依赖关系</li><li>每个文件的大小在总体中的占比，找出较大的文件，思考是否有替换方案，是否使用了它包含了不必要的依赖？</li><li>是否有重复的依赖项，对此可以如何优化？</li><li>每个文件的压缩后的大小。</li></ul><h2 id="CDN-资源优化"><a href="#CDN-资源优化" class="headerlink" title="CDN 资源优化"></a>CDN 资源优化</h2><p>CDN 的全称是 <code>Content Delivery Network</code>，即内容分发网络。CDN 是构建在网络之上的内容分发网络，依靠部署在各地的边缘服务器，通过中心平台的负载均衡、内容分发、调度等功能模块，使用户就近获取所需内容，降低网络拥塞，提高用户访问响应速度和命中率。CDN 的关键技术主要有内容存储和分发技术。</p><p>随着项目越做越大，依赖的第三方 npm 包越来越多，构建之后的文件也会越来越大。再加上又是单页应用，这就会导致在网速较慢或者服务器带宽有限的情况出现长时间的白屏。此时我们可以使用 CDN 的方法，优化网络加载速度。</p><p>1、将 <code>vue、vue-router、vuex、axios</code> 这些 vue 全家桶的资源，全部改为通过 CDN 链接获取，在 <code>index.html</code> 里插入 相应链接。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/vue/2.6.10/vue.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/axios/0.19.0-beta.1/axios.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/vuex/3.1.0/vuex.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/vue-router/3.0.2/vue-router.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/element-ui/2.6.1/index.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2、在 <code>vue.config.js</code> 配置 externals 属性</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line"> ···</span><br><span class="line">    externals: &#123;</span><br><span class="line">      <span class="string">'vue'</span>: <span class="string">'Vue'</span>,</span><br><span class="line">      <span class="string">'vuex'</span>: <span class="string">'Vuex'</span>,</span><br><span class="line">      <span class="string">'vue-router'</span>: <span class="string">'VueRouter'</span>,</span><br><span class="line">      <span class="string">'axios'</span>:<span class="string">'axios'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>3、卸载相关依赖的 npm 包</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">npm</span> uninstall  vue vue-router vuex axios</span><br></pre></td></tr></table></figure><p>此时启动项目运行就可以了。我们在控制台就能发现项目加载了以上四个 CDN 资源。</p><p>不过现在有不少声音说，vue 全家桶加载 CDN 资源其实作用并不大，而且公共的 CDN 资源也没有 npm 包那么稳定，这个就见仁见智了。所以我在源码时新建的分支做这个优化。当项目较小的就不考虑 CDN 优化了。</p><p>当然，当引入其他较大第三方资源，比如 echarts，AMAP(高德地图)，采用 CDN 资源还是很有必要的。</p><h2 id="gZip-加速优化"><a href="#gZip-加速优化" class="headerlink" title="gZip 加速优化"></a>gZip 加速优化</h2><p>所有现代浏览器都支持 gzip 压缩，启用 gzip 压缩可大幅缩减传输资源大小，从而缩短资源下载时间，减少首次白屏时间，提升用户体验。</p><p>gzip 对基于文本格式文件的压缩效果最好（如：CSS、JavaScript 和 HTML），在压缩较大文件时往往可实现高达 70-90% 的压缩率，对已经压缩过的资源（如：图片）进行 gzip 压缩处理，效果很不好。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> CompressionPlugin = <span class="built_in">require</span>(<span class="string">'compression-webpack-plugin'</span>)</span><br><span class="line">configureWebpack: <span class="function">(<span class="params">config</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (process.env.NODE_ENV === <span class="string">'production'</span>) &#123;</span><br><span class="line">    config.plugins.push(</span><br><span class="line">      <span class="keyword">new</span> CompressionPlugin(&#123;</span><br><span class="line">        <span class="comment">// gzip压缩配置</span></span><br><span class="line">        test: <span class="regexp">/\.js$|\.html$|\.css/</span>, <span class="comment">// 匹配文件名</span></span><br><span class="line">        threshold: <span class="number">10240</span>, <span class="comment">// 对超过10kb的数据进行压缩</span></span><br><span class="line">        deleteOriginalAssets: <span class="literal">false</span>, <span class="comment">// 是否删除原文件</span></span><br><span class="line">      &#125;)</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="首页添加骨架屏"><a href="#首页添加骨架屏" class="headerlink" title="首页添加骨架屏"></a>首页添加骨架屏</h2><p>随着 SPA 在前端界的逐渐流行，单页面应用不可避免地给首页加载带来压力，此时良好的首页用户体验至关重要。很多 APP 采用了“骨架屏”的方式去展示未加载内容，给予了用户焕然一新的体验。</p><p>所谓的骨架屏，就是在页面内容未加载完成的时候，先使用一些图形进行占位，待内容加载完成之后再把它替换掉。在这个过程中用户会感知到内容正在逐渐加载并即将呈现，降低了“白屏”的不良体验。</p><p>本文采用vue-skeleton-webpack-plugin插件为单页面应用注入骨架屏。  </p><p>1、在src的common文件夹下面创建了Skeleton1.vue，Skeleton2.vue，具体的结构和样式自行设计，此处省略一万字。。。。</p><p>2、在同级目录下新建entry-skeleton.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> Skeleton1 <span class="keyword">from</span> <span class="string">'./Skeleton1'</span></span><br><span class="line"><span class="keyword">import</span> Skeleton2 <span class="keyword">from</span> <span class="string">'./Skeleton2'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  components: &#123;</span><br><span class="line">    Skeleton1,</span><br><span class="line">    Skeleton2</span><br><span class="line">  &#125;,</span><br><span class="line">  template: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;div&gt;</span></span><br><span class="line"><span class="string">      &lt;skeleton1 id="skeleton1" style="display:none"/&gt;</span></span><br><span class="line"><span class="string">      &lt;skeleton2 id="skeleton2" style="display:none"/&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">  `</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>在vue.config.js下配置插件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> SkeletonWebpackPlugin = <span class="built_in">require</span>(<span class="string">'vue-skeleton-webpack-plugin'</span>)</span><br><span class="line">configureWebpack: <span class="function">(<span class="params">config</span>) =&gt;</span> &#123;</span><br><span class="line">  config.plugins.push(</span><br><span class="line">    <span class="keyword">new</span> SkeletonWebpackPlugin(&#123;</span><br><span class="line">      webpackConfig: &#123;</span><br><span class="line">        entry: &#123;</span><br><span class="line">          app: path.join(__dirname, <span class="string">'./src/common/entry-skeleton.js'</span>),</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">      minimize: <span class="literal">true</span>,</span><br><span class="line">      quiet: <span class="literal">true</span>,</span><br><span class="line">      router: &#123;</span><br><span class="line">        mode: <span class="string">'hash'</span>,</span><br><span class="line">        routes: [</span><br><span class="line">          &#123; <span class="attr">path</span>: <span class="string">'/'</span>, <span class="attr">skeletonId</span>: <span class="string">'skeleton1'</span> &#125;,</span><br><span class="line">          &#123; <span class="attr">path</span>: <span class="string">'/about'</span>, <span class="attr">skeletonId</span>: <span class="string">'skeleton2'</span> &#125;,</span><br><span class="line">        ],</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时重新加载页面就可以看到我们的骨架屏了。<strong>注意：一定要配置样式分离extract: true</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;这是基于 vue-cli4 实现的移动端框架，其中包含项目常用的配置，组件封装及webpack优化方法，可供快速开发使用。&lt;/p&gt;
&lt;p&gt;技术栈：vue-cli4 + webpack4 + vant + axios + less + postcss-px2rem&lt;/p&gt;
&lt;p&gt;源码 &lt;a href=&quot;https://github.com/Michael-lzg/vue-cli4-vant&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/Michael-lzg/vue-cli4-vant&lt;/a&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 安装依赖&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;npm install&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 本地启动&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;npm run dev&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 生产打包&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;npm run build&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="webpack" scheme="https://chongdee.github.io/categories/webpack/"/>
    
      <category term="vue" scheme="https://chongdee.github.io/categories/webpack/vue/"/>
    
    
      <category term="vue" scheme="https://chongdee.github.io/tags/vue/"/>
    
      <category term="webpack" scheme="https://chongdee.github.io/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>react-webpack4配置与优化</title>
    <link href="https://chongdee.github.io/2021/05/09/webpack/react-webpack4%E9%85%8D%E7%BD%AE%E4%B8%8E%E4%BC%98%E5%8C%96/"/>
    <id>https://chongdee.github.io/2021/05/09/webpack/react-webpack4配置与优化/</id>
    <published>2021-05-08T17:08:22.403Z</published>
    <updated>2021-05-08T17:14:54.323Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>一篇文章不写前言总感觉不太正式，大概介绍下我是怎么完成一个总的知识点的概括的把。其实很多人都有一看就会,一做就废的特点(当然也包括我在内),这个时候，你需要制定一个略微详细的计划，就比如我这篇会首先列出知识点，列出大的方向，制定思维导图，然后根据思维导图编写代码，计划明确，就会事半功倍，因此，希望你可以跟着本篇循序渐进的跟着代码走一遍，不管是真实开发，还是面试，都有的扯。好了，不扯了，可以先看下目录。现在开始</p><h2 id="一、基础配置"><a href="#一、基础配置" class="headerlink" title="一、基础配置"></a>一、基础配置</h2><h3 id="1、init项目"><a href="#1、init项目" class="headerlink" title="1、init项目"></a>1、init项目</h3><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">mkdir</span> react-webpack4-cook</span><br><span class="line"><span class="keyword">cd</span> react-webpack4-cook</span><br><span class="line"><span class="keyword">mkdir</span> src</span><br><span class="line"><span class="keyword">mkdir</span> dist</span><br><span class="line">npm init -<span class="built_in">y</span></span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="2、安装webpack"><a href="#2、安装webpack" class="headerlink" title="2、安装webpack"></a>2、安装webpack</h3><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">yarn add webpack webpack-cli webpack-dev-server -D <span class="comment">//webpack4把webpack拆分了</span></span><br><span class="line">touch webpack.config.js</span><br><span class="line"><span class="comment">// webpack.config.js初始化内容</span></span><br><span class="line">module.exports = &#123;</span><br><span class="line"><span class="symbol">    mode:</span> <span class="string">"development"</span>,</span><br><span class="line"><span class="symbol">    entry:</span> [<span class="string">"./src/index.js"</span>],</span><br><span class="line"><span class="symbol">    output:</span> &#123;</span><br><span class="line">        <span class="comment">// 输出目录</span></span><br><span class="line"><span class="symbol">        path:</span> path.join(__dirname, <span class="string">"dist"</span>),</span><br><span class="line">        <span class="comment">// 文件名称</span></span><br><span class="line"><span class="symbol">        filename:</span> <span class="string">"bundle.js"</span></span><br><span class="line">    &#125;,</span><br><span class="line"><span class="symbol">    module:</span>&#123;&#125;,</span><br><span class="line"><span class="symbol">    plugins:</span>[],</span><br><span class="line"><span class="symbol">    devServer:</span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3、安装react并编写代码"><a href="#3、安装react并编写代码" class="headerlink" title="3、安装react并编写代码"></a>3、安装react并编写代码</h3><p>这部分代码篇幅过多，就是一些简单的react和react-router的一些代码编写，可以去github上查看，这里只阐述基本功能</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cd</span> src </span><br><span class="line">cnpm i react react-router-dom -<span class="built_in">S</span></span><br><span class="line"><span class="comment">// 建立如下的文件目录，并编写安装react和react-router并编写react代码如下</span></span><br><span class="line">|-src</span><br><span class="line">│      index.js 主文件</span><br><span class="line">├───pages</span><br><span class="line">│      <span class="keyword">Count</span>.jsx -- 实现了一个计数器的功能，点击按钮，会让数字增加，按钮会实时显示在页面上</span><br><span class="line">│      Home.jsx -- 一个简单的文字展示</span><br><span class="line">└───router</span><br><span class="line">       index.js -- 路由配置文件，两个页面分别对应两个路由 <span class="keyword">count</span>和 home</span><br></pre></td></tr></table></figure><h3 id="4、babel编译ES6-JSX等"><a href="#4、babel编译ES6-JSX等" class="headerlink" title="4、babel编译ES6,JSX等"></a>4、babel编译ES6,JSX等</h3><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="regexp">//</span> @babel/core-babel核心模块    @babel/preset-env-编译ES6等 @babel/preset-react-转换JSX</span><br><span class="line">cnpm i babel-loader @babel/core @babel/preset-env  @babel/plugin-transform-runtime   @babel/preset-react -D</span><br><span class="line"><span class="regexp">//</span> @babel/plugin-transform-runtime: 避免 polyfill 污染全局变量，减小打包体积</span><br><span class="line"><span class="regexp">//</span> @babel/polyfill: ES6 内置方法和函数转化垫片</span><br><span class="line">cnpm i @babel/polyfill @babel/runtime</span><br><span class="line"> &#123;</span><br><span class="line">        test: <span class="regexp">/\.jsx?$/</span>,</span><br><span class="line">        exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">        use: [</span><br><span class="line">          &#123;</span><br><span class="line">            loader: <span class="string">"babel-loader"</span></span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><p>新建.babelrc文件</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"presets"</span>: [<span class="string">"@babel/preset-env"</span>,<span class="string">"@babel/preset-react"</span>],</span><br><span class="line">  <span class="attr">"plugins"</span>: [<span class="string">"@babel/plugin-transform-runtime"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5、按需引入polyfill"><a href="#5、按需引入polyfill" class="headerlink" title="5、按需引入polyfill"></a>5、按需引入polyfill</h3><p>在src下的index.js中全局引入 @babel/polyfill 并写入 ES6 语法 ，但是这样有一个缺点：</p><p>全局引入 @babel/polyfill 的这种方式可能会导入代码中不需要的 polyfill，从而使打包体积更大<br>更改 .babelrc，只转译我们使用到的</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">npm install core-js@2 @babel/runtime-corejs2 -S</span><br><span class="line"> </span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"presets"</span>: [<span class="string">"@babel/preset-env"</span>,</span><br><span class="line">              &#123; <span class="string">"useBuiltIns"</span>: <span class="string">"usage"</span> &#125;,</span><br><span class="line">              <span class="string">"@babel/preset-react"</span>],</span><br><span class="line">  <span class="string">"plugins"</span>: [<span class="string">"@babel/plugin-transform-runtime"</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">将将全局引入这段代码注释掉</span><br><span class="line">// import <span class="string">'@babel/polyfill'</span></span><br></pre></td></tr></table></figure><p>这就配置好了按需引入。配置了按需引入 polyfill 后，用到es6以上的函数，babel会自动导入相关的polyfill，这样能大大减少 打包编译后的体积</p><h3 id="5、插件-CleanWebpackPlugin"><a href="#5、插件-CleanWebpackPlugin" class="headerlink" title="5、插件 CleanWebpackPlugin"></a>5、插件 CleanWebpackPlugin</h3><p>你经过多次打包后会发现，每次打包都会在dist目录下边生成一堆文件，但是上一次的打包的文件还在，我们需要每次打包时清除 dist 目录下旧版本文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">cnpm install  clean-webpack-plugin -D</span><br><span class="line"><span class="comment">// 注意这个引入的坑，最新版的需要这样引入，而不是直接const CleanWebpackPlugin</span></span><br><span class="line"><span class="keyword">const</span> &#123; CleanWebpackPlugin &#125; = <span class="built_in">require</span>(<span class="string">'clean-webpack-plugin'</span>);</span><br><span class="line"> </span><br><span class="line">plugins: [</span><br><span class="line">    <span class="keyword">new</span> CleanWebpackPlugin() </span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="6、使用插件-HtmlWebpackPlugin"><a href="#6、使用插件-HtmlWebpackPlugin" class="headerlink" title="6、使用插件 HtmlWebpackPlugin"></a>6、使用插件 HtmlWebpackPlugin</h3><p>经过上一步的操作，index.html 也被清除了。因此我们将使用 HtmlWebpackPlugin插件，来生成 html， 并将每次打包的js自动插入到你的 index.html 里面去，而且它还可以基于你的某个 html 模板来创建最终的 index.html，也就是说可以指定模板哦</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml">cnpm install html-webpack-plugin -D</span></span><br><span class="line"><span class="xml">// 创建template.html</span></span><br><span class="line"><span class="xml">cd src</span></span><br><span class="line"><span class="xml">touch template.html</span></span><br><span class="line"><span class="xml"> </span></span><br><span class="line"><span class="xml">// 内容如下</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>react-webpack4-cook<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"root"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br><span class="line"><span class="xml"> </span></span><br><span class="line"><span class="xml">// webpack.config.js做出更改</span></span><br><span class="line"><span class="xml">const HtmlWebpackPlugin = require('html-webpack-plugin');</span></span><br><span class="line"><span class="xml">plugins: [</span></span><br><span class="line"><span class="xml">    new CleanWebpackPlugin(),</span></span><br><span class="line"><span class="xml">    new HtmlWebpackPlugin(</span><span class="template-variable">&#123;</span></span><br><span class="line"><span class="template-variable">      filename: 'index.html', // 最终创建的文件名</span></span><br><span class="line"><span class="template-variable">      template: path.join(__dirname, 'src/template.html') // 指定模板路径</span></span><br><span class="line"><span class="template-variable">    &#125;</span><span class="xml">)</span></span><br><span class="line"><span class="xml">  ]</span></span><br></pre></td></tr></table></figure><h3 id="7、使用-source-map-对devtool进行优化"><a href="#7、使用-source-map-对devtool进行优化" class="headerlink" title="7、使用 source-map,对devtool进行优化"></a>7、使用 source-map,对devtool进行优化</h3><p>webpack中devtool选项用来控制是否生成，以及如何生成 source map。简言之，source map就是帮助我们定位到错误信息位置的文件。正确的配置source map，能够提高开发效率，更快的定位到错误位置。</p><p>在webpack.config.js中选项mode下加上如下这句话：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">devtool:</span><span class="string">"cheap-module-eval-source-map"</span>,<span class="comment">// 开发环境配置</span></span><br><span class="line"><span class="symbol">devtool:</span><span class="string">"cheap-module-source-map"</span>,   <span class="comment">// 线上生成配置</span></span><br></pre></td></tr></table></figure><h3 id="8、使用-WebpackDevServer"><a href="#8、使用-WebpackDevServer" class="headerlink" title="8、使用 WebpackDevServer"></a>8、使用 WebpackDevServer</h3><p>webpack-dev-server就是在本地为搭建了一个小型的静态文件服务器，有实时重加载的功能，为将打包生成的资源提供了web服务</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">devServer:</span> &#123;</span><br><span class="line"><span class="symbol">    hot:</span> true,</span><br><span class="line"><span class="symbol">    contentBase:</span> path.join(__dirname, <span class="string">"./dist"</span>),</span><br><span class="line"><span class="symbol">    host:</span> <span class="string">"0.0.0.0"</span>, <span class="comment">// 可以使用手机访问</span></span><br><span class="line"><span class="symbol">    port:</span> <span class="number">8080</span>,</span><br><span class="line"><span class="symbol">    historyApiFallback:</span> true, <span class="comment">// 该选项的作用所有的404都连接到index.html</span></span><br><span class="line"><span class="symbol">    proxy:</span> &#123;</span><br><span class="line">      <span class="comment">// 代理到后端的服务地址，会拦截所有以api开头的请求地址</span></span><br><span class="line">      <span class="string">"/api"</span>: <span class="string">"http://localhost:3000"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="9、使用-HotModuleReplacement-热模块替换HMR"><a href="#9、使用-HotModuleReplacement-热模块替换HMR" class="headerlink" title="9、使用 HotModuleReplacement (热模块替换HMR)"></a>9、使用 HotModuleReplacement (热模块替换HMR)</h3><p>建立了开发环境本地服务器 后，当修改内容后，网页会同步刷新，我们现在进入toCOunt页面</p><ol><li><p>点击按钮，将数字加到一个不为0的数，比如加到6</p></li><li><p>然后你可以在代码中改变按钮的文字，随便改点东西，会发现，页面刷新后，数字重新变为0</p></li></ol><p>这显然不是我们想要的，想要的是，能不能把页面的状态保存了，也就是更改了代码后，页面还是保存了数字为6的状态，也就是实现局部更改，首先需要用到：HotModuleReplacementPlugin插件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">devServer:</span> <span class="string">&#123;</span></span><br><span class="line"><span class="attr">    hot:</span> <span class="literal">true</span></span><br><span class="line"><span class="string">&#125;,</span></span><br><span class="line"> </span><br><span class="line"><span class="attr">plugins:</span> <span class="string">[</span></span><br><span class="line">    <span class="string">new</span> <span class="string">webpack.HotModuleReplacementPlugin()</span></span><br><span class="line"><span class="string">],</span></span><br></pre></td></tr></table></figure><p>完事之后，继续更上边的操作，点击按钮，数字增加，然后更改内容，发现还是没有保存状态。。。what？怎么办</p><p>对@！这还没完呢，接着往下看，我们还需要react-hot-loader这个插件</p><h3 id="10、react-hot-loader记录react页面留存状态state"><a href="#10、react-hot-loader记录react页面留存状态state" class="headerlink" title="10、react-hot-loader记录react页面留存状态state"></a>10、react-hot-loader记录react页面留存状态state</h3><p>我们继续接着上边的进行操作，分一下四步</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">cnpm i react-hot-loader -D</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 在主文件里这样写</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">"react-dom"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; AppContainer &#125; <span class="keyword">from</span> <span class="string">"react-hot-loader"</span>;------------------<span class="number">-1</span>、首先引入AppContainre</span><br><span class="line"><span class="keyword">import</span> &#123; BrowserRouter &#125; <span class="keyword">from</span> <span class="string">"react-router-dom"</span>;</span><br><span class="line"><span class="keyword">import</span> Router <span class="keyword">from</span> <span class="string">"./router"</span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/*初始化*/</span></span><br><span class="line">renderWithHotReload(Router);------------------<span class="number">-2</span>、初始化</span><br><span class="line"> </span><br><span class="line"><span class="comment">/*热更新*/</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">module</span>.hot) &#123;------------------<span class="number">-3</span>、热更新操作</span><br><span class="line">  <span class="built_in">module</span>.hot.accept(<span class="string">"./router/index.js"</span>, () =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> Router = <span class="built_in">require</span>(<span class="string">"./router/index.js"</span>).default;</span><br><span class="line">    renderWithHotReload(Router);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">renderWithHotReload</span>(<span class="params">Router</span>) </span>&#123;------------------<span class="number">-4</span>、定义渲染函数</span><br><span class="line">  ReactDOM.render(</span><br><span class="line">    &lt;AppContainer&gt;</span><br><span class="line">      &lt;BrowserRouter&gt;</span><br><span class="line">        &lt;Router /&gt;</span><br><span class="line">      &lt;<span class="regexp">/BrowserRouter&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>AppContainer&gt;,</span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">"app"</span>)</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>好了，现在你再试试</p><h3 id="11、编译css和scss"><a href="#11、编译css和scss" class="headerlink" title="11、编译css和scss"></a>11、编译css和scss</h3><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">cnpm install css-loader style-loader sass-loader node-sass -<span class="built_in">D</span></span><br><span class="line"> </span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">test</span>: /\.scss$/,</span><br><span class="line">    <span class="keyword">use</span>: [</span><br><span class="line">      <span class="string">"style-loader"</span>, <span class="comment">// 创建style标签，并将css添加进去</span></span><br><span class="line">      <span class="string">"css-loader"</span>, <span class="comment">// 编译css</span></span><br><span class="line">      <span class="string">"sass-loader"</span> <span class="comment">// 编译scss</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="12、集成postcss"><a href="#12、集成postcss" class="headerlink" title="12、集成postcss"></a>12、集成postcss</h3><p>最关心的还是这有啥用啊？自动增加前缀， postcss-cssnext允许你使用未来的css特性，并做一些兼容处理</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">cnpm install  postcss-loader postcss-cssnext -<span class="built_in">D</span></span><br><span class="line"> </span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">test</span>: /\.scss$/,</span><br><span class="line">        <span class="keyword">use</span>: [</span><br><span class="line">            <span class="string">"style-loader"</span>, <span class="comment">// 创建style标签，并将css添加进去</span></span><br><span class="line">            <span class="string">"css-loader"</span>, <span class="comment">// 编译css</span></span><br><span class="line">            <span class="string">"postcss-loader"</span>,</span><br><span class="line">            <span class="string">"sass-loader"</span> <span class="comment">// 编译scss</span></span><br><span class="line">        ]</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 在刚才的home.scss 加上 transform: scale(2);</span></span><br><span class="line">通过控制台查看，已经自动加上了前缀</span><br></pre></td></tr></table></figure><h3 id="13、处理图片"><a href="#13、处理图片" class="headerlink" title="13、处理图片"></a>13、处理图片</h3><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">cnpm</span> <span class="selector-tag">i</span> <span class="selector-tag">file-loader</span> <span class="selector-tag">url-loader</span> <span class="selector-tag">-D</span></span><br><span class="line"> </span><br><span class="line"><span class="selector-tag">file-loader</span> 解决<span class="selector-tag">css</span>等文件中引入图片路径的问题</span><br><span class="line"><span class="selector-tag">url-loader</span> 当图片较小的时候会把图片<span class="selector-tag">BASE64</span>编码，大于<span class="selector-tag">limit</span>参数的时候还是使用<span class="selector-tag">file-loader</span> 进行拷贝</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attribute">test</span>: /\.(png|jpg|jpeg|gif|svg)/,</span><br><span class="line">    <span class="attribute">use</span>: &#123;</span><br><span class="line">      <span class="attribute">loader</span>: <span class="string">'url-loader'</span>,</span><br><span class="line">      <span class="attribute">options</span>: &#123;</span><br><span class="line">        <span class="attribute">outputPath</span>: <span class="string">'images/'</span>, <span class="comment">// 图片输出的路径</span></span><br><span class="line">        <span class="attribute">limit</span>: <span class="number">10</span> * <span class="number">1024</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="14、处理字体"><a href="#14、处理字体" class="headerlink" title="14、处理字体"></a>14、处理字体</h3><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">        test: /\.(<span class="name">eot</span>|woff2?|ttf|svg)$/,</span><br><span class="line">        use: [</span><br><span class="line">          &#123;</span><br><span class="line">            loader: 'url-loader',</span><br><span class="line">            options: &#123;</span><br><span class="line">              name: '[name]-[hash:5].min.[ext]',</span><br><span class="line">              limit: <span class="number">5000</span>, // fonts file size &lt;= <span class="number">5</span>KB, use 'base64'; else, output svg file</span><br><span class="line">              publicPath: 'fonts/',</span><br><span class="line">              outputPath: 'fonts/'</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><h2 id="二、webpack优化"><a href="#二、webpack优化" class="headerlink" title="二、webpack优化"></a>二、webpack优化</h2><h3 id="1、alias对文件路径优化"><a href="#1、alias对文件路径优化" class="headerlink" title="1、alias对文件路径优化"></a>1、alias对文件路径优化</h3><ol><li>extension: 指定extension之后可以不用在require或是import的时候加文件扩展名,会依次尝试添加扩展名进行匹配</li><li>alias: 配置别名可以加快webpack查找模块的速度</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">resolve</span>: &#123;</span><br><span class="line">    <span class="attribute">extension</span>: [<span class="string">""</span>, <span class="string">".js"</span>, <span class="string">".jsx"</span>],</span><br><span class="line">    alias: &#123;</span><br><span class="line">      <span class="string">"@"</span>: path.<span class="built_in">join</span>(__dirname, <span class="string">"src"</span>),</span><br><span class="line">      pages: path.<span class="built_in">join</span>(__dirname, <span class="string">"src/pages"</span>),</span><br><span class="line">      router: path.<span class="built_in">join</span>(__dirname, <span class="string">"src/router"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><h3 id="14、使用静态资源路径publicPath-CDN"><a href="#14、使用静态资源路径publicPath-CDN" class="headerlink" title="14、使用静态资源路径publicPath(CDN)"></a>14、使用静态资源路径publicPath(CDN)</h3><p>CDN通过将资源部署到世界各地，使得用户可以就近访问资源，加快访问速度。要接入CDN，需要把网页的静态资源上传到CDN服务上，在访问这些资源时，使用CDN服务提供的URL。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">output</span>:&#123;</span><br><span class="line"> <span class="attribute">publicPatch</span>: <span class="string">'//【cdn】.com'</span>, //指定存放JS文件的CDN地址</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2、MiniCssExtractPlugin-，抽取-css-文件"><a href="#2、MiniCssExtractPlugin-，抽取-css-文件" class="headerlink" title="2、MiniCssExtractPlugin ，抽取 css 文件"></a>2、MiniCssExtractPlugin ，抽取 css 文件</h3><p>如果不做配置，我们的css是直接打包进js里面的，我们希望能单独生成css文件。 因为单独生成css,css可以和js并行下载，提高页面加载效率</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">cnpm install mini-css-extract-plugin -D</span><br><span class="line"> </span><br><span class="line">const MiniCssExtractPlugin = require(<span class="string">"mini-css-extract-plugin"</span>);</span><br><span class="line"> </span><br><span class="line"> &#123;</span><br><span class="line"><span class="symbol">        test:</span> /\.scss$/,</span><br><span class="line"><span class="symbol">        use:</span> [</span><br><span class="line">          <span class="comment">// "style-loader", // b不再需要style-loader要已经分离处理</span></span><br><span class="line">          MiniCssExtractPlugin.loader,</span><br><span class="line">          <span class="string">"css-loader"</span>, <span class="comment">// 编译css</span></span><br><span class="line">          <span class="string">"postcss-loader"</span>,</span><br><span class="line">          <span class="string">"sass-loader"</span> <span class="comment">// 编译scss</span></span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line"> </span><br><span class="line"><span class="symbol"> plugins:</span> [</span><br><span class="line">    new MiniCssExtractPlugin(&#123;</span><br><span class="line"><span class="symbol">      filename:</span> <span class="string">"[name].css"</span>,</span><br><span class="line"><span class="symbol">      chunkFilename:</span> <span class="string">"[id].css"</span></span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br></pre></td></tr></table></figure><h3 id="3、代码分割按需加载、提取公共代码"><a href="#3、代码分割按需加载、提取公共代码" class="headerlink" title="3、代码分割按需加载、提取公共代码"></a>3、代码分割按需加载、提取公共代码</h3><p>为什么要实现按需加载？</p><p>我们现在看到，打包完后，所有页面只生成了一个bundle.js,当我们首屏加载的时候，就会很慢。因为他也下载了别的页面的js了,也就是说，执行完毕之前，页面是 完！全！空！白！的！。 如果每个页面单独打包自己的js，就可以在进入页面时候再加载自己 的js，首屏加载就可以快很多</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">optimization</span>: &#123;</span><br><span class="line">    <span class="attribute">splitChunks</span>: &#123;</span><br><span class="line">      chunks: <span class="string">"all"</span>, // 所有的 chunks 代码公共的部分分离出来成为一个单独的文件</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><h3 id="5、文件压缩"><a href="#5、文件压缩" class="headerlink" title="5、文件压缩"></a>5、文件压缩</h3><p>webpack4只要在生产模式下， 代码就会自动压缩</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">mode:</span>productioin</span><br></pre></td></tr></table></figure><h3 id="6、暴露全局变量"><a href="#6、暴露全局变量" class="headerlink" title="6、暴露全局变量"></a>6、暴露全局变量</h3><p>可以直接在全局使用$变量</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> webpack.ProvidePlugin(&#123;</span><br><span class="line">      $: <span class="string">'jquery'</span>, <span class="comment">// npm</span></span><br><span class="line">      jQuery: <span class="string">'jQuery'</span> <span class="comment">// 本地Js文件</span></span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><h3 id="8、指定环境-定义环境变量"><a href="#8、指定环境-定义环境变量" class="headerlink" title="8、指定环境,定义环境变量"></a>8、指定环境,定义环境变量</h3><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">plugins:</span> [</span><br><span class="line">    <span class="keyword">new</span> webpack.DefinePlugin(&#123;</span><br><span class="line">      <span class="string">'process.env'</span>: &#123;</span><br><span class="line"><span class="symbol">        VUEP_BASE_URL:</span> JSON.stringify(<span class="string">'http://localhost:9000'</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="9、css-Tree-Shaking"><a href="#9、css-Tree-Shaking" class="headerlink" title="9、css Tree Shaking"></a>9、css Tree Shaking</h3><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">npm i <span class="built_in">glob</span>-<span class="keyword">all</span> purify-css purifycss-webpack --save-dev</span><br><span class="line"> </span><br><span class="line">const PurifyCSS = require(<span class="string">'purifycss-webpack'</span>)</span><br><span class="line">const <span class="built_in">glob</span> = require(<span class="string">'glob-all'</span>)</span><br><span class="line">plugin<span class="variable">s:</span>[</span><br><span class="line">    // 清除无用 css</span><br><span class="line">    <span class="keyword">new</span> PurifyCSS(&#123;</span><br><span class="line">      path<span class="variable">s:</span> <span class="built_in">glob</span>.<span class="keyword">sync</span>([</span><br><span class="line">        // 要做 CSS Tree Shaking 的路径文件</span><br><span class="line">        path.<span class="built_in">resolve</span>(__dirname, <span class="string">'./src/*.html'</span>), // 请注意，我们同样需要对 html 文件进行 tree shaking</span><br><span class="line">        path.<span class="built_in">resolve</span>(__dirname, <span class="string">'./src/*.js'</span>)</span><br><span class="line">      ])</span><br><span class="line">    &#125;)</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="10、js-Tree-Shaking"><a href="#10、js-Tree-Shaking" class="headerlink" title="10、js Tree Shaking"></a>10、js Tree Shaking</h3><p>清除到代码中无用的js代码，只支持import方式引入，不支持commonjs的方式引入</p><p><strong>只要mode是production就会生效，develpoment的tree shaking是不生效的，因为webpack为了方便你的调试</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">optimization</span>: &#123;</span><br><span class="line">    <span class="attribute">usedExports</span>:true,</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="11、DllPlugin插件打包第三方类库"><a href="#11、DllPlugin插件打包第三方类库" class="headerlink" title="11、DllPlugin插件打包第三方类库"></a>11、DllPlugin插件打包第三方类库</h3><p>项目中引入了很多第三方库，这些库在很长的一段时间内，基本不会更新，打包的时候分开打包来提升打包速度，而DllPlugin动态链接库插件，其原理就是把网页依赖的基础模块抽离出来打包到dll文件中，当需要导入的模块存在于某个dll中时，这个模块不再被打包，而是去dll中获取。</p><p>安装jquery，并在入口文件引入。新建webpack.dll.config.js文件</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* @desc 静态公共资源打包配置</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> path = require(<span class="string">'path'</span>)</span><br><span class="line"><span class="keyword">const</span> webpack = require(<span class="string">'webpack'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> src = path.resolve(<span class="built_in">process</span>.cwd(), <span class="string">'src'</span>); <span class="comment">// 源码目录</span></span><br><span class="line"><span class="keyword">const</span> evn = <span class="built_in">process</span>.env.NODE_ENV == <span class="string">"production"</span> ? <span class="string">"production"</span> : <span class="string">"development"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">module</span>.exports = &#123;</span><br><span class="line">    mode: <span class="string">'production'</span>,</span><br><span class="line">    entry: &#123;</span><br><span class="line">        <span class="comment">// 定义程序中打包公共文件的入口文件vendor.js</span></span><br><span class="line">        jquery: [<span class="string">'jquery'</span>]</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    output: &#123;</span><br><span class="line">        path: path.resolve(__dirname, <span class="string">'..'</span>, <span class="string">'dll'</span>),</span><br><span class="line">        filename: <span class="string">'[name].dll.js'</span>,</span><br><span class="line">        library: <span class="string">'[name]_[hash]'</span>,</span><br><span class="line">        libraryTarget: <span class="string">'this'</span></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    plugins: [</span><br><span class="line">        <span class="keyword">new</span> webpack.DllPlugin(&#123;</span><br><span class="line">            <span class="comment">// 定义程序中打包公共文件的入口文件vendor.js</span></span><br><span class="line">            context: <span class="built_in">process</span>.cwd(),</span><br><span class="line"></span><br><span class="line">            <span class="comment">// manifest.json文件的输出位置</span></span><br><span class="line">            path: path.resolve(__dirname, <span class="string">'..'</span>, <span class="string">'dll/[name]-manifest.json'</span>),</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 定义打包的公共vendor文件对外暴露的函数名</span></span><br><span class="line">            name: <span class="string">'[name]_[hash]'</span></span><br><span class="line">        &#125;)</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在package.json中添加</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"build:dll"</span>: <span class="string">"webpack --config ./build/webpack.dll.config.js"</span>,</span><br></pre></td></tr></table></figure><p>运行</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">run</span><span class="bash"> build:dll</span></span><br></pre></td></tr></table></figure><p>你会发现多了一个dll文件夹，里边有dll.js文件，这样我们就把我们的jquery这些已经单独打包了，接下来怎么使用呢？</p><p>需要再安装一个依赖 npm i add-asset-html-webpack-plugin，它会将我们打包后的 dll.js 文件注入到我们生成的 index.html 中.在 webpack.base.config.js 文件中进行更改。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">new</span> <span class="selector-tag">AddAssetHtmlWebpackPlugin</span>(&#123;</span><br><span class="line"> <span class="attribute">filepath</span>: path.<span class="built_in">resolve</span>(__dirname, <span class="string">'../dll/jquery.dll.js'</span>) // 对应的 dll 文件路径</span><br><span class="line"> &#125;),</span><br><span class="line"> <span class="selector-tag">new</span> <span class="selector-tag">webpack</span><span class="selector-class">.DllReferencePlugin</span>(&#123;</span><br><span class="line"> <span class="attribute">manifest</span>: path.<span class="built_in">resolve</span>(__dirname, <span class="string">'..'</span>, <span class="string">'dll/jquery-manifest.json'</span>)</span><br><span class="line"> &#125;)</span><br></pre></td></tr></table></figure><p>好了，你可有吧new webpack.DllReferencePlugin这个插件注释掉，打包试下，在放开打包试一下，我测试结果，注释钱5689，注释后，5302ms，才差了300ms?注意，我这里只有一个jquery包作为演示，要是你把很多个都抽离了出来呢？？？那岂不是很恐怖了。如果你看的有点迷迷糊糊，那推荐去线上看一下我的代码吧，一看便知</p><h3 id="12、使用happypack并发执行任务"><a href="#12、使用happypack并发执行任务" class="headerlink" title="12、使用happypack并发执行任务"></a>12、使用happypack并发执行任务</h3><p>运行在 Node.之上的Webpack是单线程模型的，也就是说Webpack需要一个一个地处理任务，不能同时处理多个任务。 Happy Pack 就能让Webpack做到这一点，它将任务分解给多个子进程去并发执行，子进程处理完后再将结果发送给主进程。</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">cnpm i -D happypack</span><br><span class="line"> </span><br><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line"> rules: [</span><br><span class="line">     &#123;</span><br><span class="line">        <span class="comment">// cnpm i babel-loader @babel/core @babel/preset-env -D</span></span><br><span class="line">        test: <span class="regexp">/\.jsx?$/</span>,</span><br><span class="line">        <span class="keyword">exclude</span>: <span class="regexp">/node_modules/</span>,</span><br><span class="line">        use: [</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="comment">// 一个loader对应一个id</span></span><br><span class="line">            loader: <span class="string">"happypack/loader?id=busongBabel"</span></span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">      ]</span><br><span class="line"> </span><br><span class="line"><span class="comment">//在plugins中增加</span></span><br><span class="line">plugins:[</span><br><span class="line">      <span class="keyword">new</span> HappyPack(&#123;</span><br><span class="line">      <span class="comment">// 用唯一的标识符id，来代表当前的HappyPack是用来处理一类特定的文件</span></span><br><span class="line">      id:<span class="string">'busongBabel'</span>,</span><br><span class="line">      <span class="comment">// 如何处理.js文件，用法和Loader配置中一样</span></span><br><span class="line">      loaders:[<span class="string">'babel-loader?cacheDirectory'</span>],</span><br><span class="line">      threadPool: HappyPackThreadPool,</span><br><span class="line">  &#125;)</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="13、PWA优化策略"><a href="#13、PWA优化策略" class="headerlink" title="13、PWA优化策略"></a>13、PWA优化策略</h3><p>简言之：在你第一次访问一个网站的时候，如果成功，做一个缓存，当服务器挂了之后，你依然能够访问这个网页 ，这就是PWA。那相信你也已经知道了，这个只需要在生产环境，才需要做PWA的处理，以防不测。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">cnpm i workbox-webpack-plugin -D</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> WorkboxPlugin = <span class="built_in">require</span>(<span class="string">'workbox-webpack-plugin'</span>) <span class="comment">// 引入 PWA 插件</span></span><br><span class="line"><span class="keyword">const</span> prodConfig = &#123;</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="comment">// 配置 PWA</span></span><br><span class="line">    <span class="keyword">new</span> WorkboxPlugin.GenerateSW(&#123;</span><br><span class="line">      clientsClaim: <span class="literal">true</span>,</span><br><span class="line">      skipWaiting: <span class="literal">true</span></span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">在入口文件加上</span><br><span class="line"><span class="comment">// 判断该浏览器支不支持 serviceWorker</span></span><br><span class="line"><span class="keyword">if</span> (<span class="string">'serviceWorker'</span> <span class="keyword">in</span> navigator) &#123;</span><br><span class="line">  <span class="built_in">window</span>.addEventListener(<span class="string">'load'</span>, <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    navigator.serviceWorker</span><br><span class="line">      .register(<span class="string">'/service-worker.js'</span>)</span><br><span class="line">      .then(<span class="function"><span class="params">registration</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'service-worker registed'</span>)</span><br><span class="line">      &#125;)</span><br><span class="line">      .catch(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'service-worker registed error'</span>)</span><br><span class="line">      &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置完后，你可以打包到dist目录下，在dist目录下启动一个静态服务器，访问首页，然后关闭这个服务器，你会惊讶的发现：网站竟然还能够访问，哈哈，是不是很神奇？</p><h3 id="15、合并提取webpack公共配置"><a href="#15、合并提取webpack公共配置" class="headerlink" title="15、合并提取webpack公共配置"></a>15、合并提取webpack公共配置</h3><p> 开发环境与生产环境以及webpack配置文件的分离，具体需要用到webpack-merge，用来 合并 webpack配置</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;一篇文章不写前言总感觉不太正式，大概介绍下我是怎么完成一个总的知识点的概括的把。其实很多人都有一看就会,一做就废的特点(当然也包括我在内),这个时候，你需要制定一个略微详细的计划，就比如我这篇会首先列出知识点，列出大的方向，制定思维导图，然后根据思维导图编写代码，计划明确，就会事半功倍，因此，希望你可以跟着本篇循序渐进的跟着代码走一遍，不管是真实开发，还是面试，都有的扯。好了，不扯了，可以先看下目录。现在开始&lt;/p&gt;
&lt;h2 id=&quot;一、基础配置&quot;&gt;&lt;a href=&quot;#一、基础配置&quot; class=&quot;headerlink&quot; title=&quot;一、基础配置&quot;&gt;&lt;/a&gt;一、基础配置&lt;/h2&gt;&lt;h3 id=&quot;1、init项目&quot;&gt;&lt;a href=&quot;#1、init项目&quot; class=&quot;headerlink&quot; title=&quot;1、init项目&quot;&gt;&lt;/a&gt;1、init项目&lt;/h3&gt;&lt;figure class=&quot;highlight stata&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;mkdir&lt;/span&gt; react-webpack4-cook&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;cd&lt;/span&gt; react-webpack4-cook&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;mkdir&lt;/span&gt; src&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;mkdir&lt;/span&gt; dist&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;npm init -&lt;span class=&quot;built_in&quot;&gt;y&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="webpack" scheme="https://chongdee.github.io/categories/webpack/"/>
    
    
      <category term="webpack" scheme="https://chongdee.github.io/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>Less常用公共样式封装</title>
    <link href="https://chongdee.github.io/2018/11/05/Less/Less%E5%B8%B8%E7%94%A8%E5%85%AC%E5%85%B1%E6%A0%B7%E5%BC%8F%E5%B0%81%E8%A3%85(zless)/"/>
    <id>https://chongdee.github.io/2018/11/05/Less/Less常用公共样式封装(zless)/</id>
    <published>2018-11-05T09:47:02.000Z</published>
    <updated>2021-05-08T17:03:39.385Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p>平常项目用到less样式封装，zless库（常用的less公共样式库）<br><a id="more"></a><br><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br></pre></td><td class="code"><pre><span class="line">/------------------------------------- ├ 布局 ┆ └------------------------------------/</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 盒子宽高</span></span><br><span class="line">.<span class="keyword">size</span>(@w, @h) &#123; width: @w; height: @h; &#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 最小尺寸, 兼容IE6</span></span><br><span class="line">.<span class="keyword">min</span>-width(@min-w) &#123; <span class="keyword">min</span>-width: @min-w; _width: @min-w; &#125;</span><br><span class="line">.<span class="keyword">min</span>-height(@min-h) &#123; <span class="keyword">min</span>-height: @min-h; _height: @min-h; &#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 内联块级元素, 兼容IE6</span></span><br><span class="line">.dib() &#123; display: inline-block; *display: inline; *zoom: <span class="number">1</span>; &#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 固定定位, 兼容IE6</span></span><br><span class="line">.fixed() &#123; position: fixed; _position: absolute; *zoom: <span class="number">1</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 统一盒模型</span></span><br><span class="line">.border-box() &#123;</span><br><span class="line">*, *:after, *:before &#123; -webkit-box-sizing: border-box; -moz-box-sizing: border-box; box-sizing: border-box; &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 文字图片居中</span></span><br><span class="line">.center(<span class="keyword">text</span>-x) &#123; <span class="keyword">text</span>-<span class="keyword">align</span>: center; &#125;</span><br><span class="line">.center(<span class="keyword">text</span>-y) &#123; display: table-cell; vertical-<span class="keyword">align</span>: middle; &#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 块级元素水平居中</span></span><br><span class="line">.center(auto-x) &#123; display: block; margin-left: auto; margin-right: auto; &#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 居中, 不确定尺寸, 不兼容 IE6</span></span><br><span class="line">.center(unknown) &#123; position: absolute; top: <span class="number">0</span>; left: <span class="number">0</span>; right: <span class="number">0</span>; bottom: <span class="number">0</span>; margin: auto; &#125;</span><br><span class="line">.center(unknown-x) &#123; position: absolute; left: <span class="number">0</span>; right: <span class="number">0</span>; margin-left: auto; margin-right: auto; &#125;</span><br><span class="line">.center(unknown-y) &#123; position: absolute; top: <span class="number">0</span>; bottom: <span class="number">0</span>; margin-top: auto; margin-bottom: auto; &#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 居中, 确定尺寸, 兼容 IE6</span></span><br><span class="line">.center(known, @w, @h) &#123;</span><br><span class="line">.<span class="keyword">size</span>(@w, @h);</span><br><span class="line">position: absolute; top: <span class="number">50</span>%; left: <span class="number">50</span>%; margin-top: -(@w / <span class="number">2</span>); margin-left: -(@h / <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line">.center(known-x, @w) &#123;</span><br><span class="line">width: @w;</span><br><span class="line">position: absolute; left: <span class="number">50</span>%; margin-left: -(@h / <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line">.center(known-y, @h) &#123;</span><br><span class="line">height: @h;</span><br><span class="line">position: absolute; top: <span class="number">50</span>%; margin-top: -(@w / <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 居中, CSS3 平移方式, 兼容性不行</span></span><br><span class="line">.center(translate) &#123; position: absolute; top: <span class="number">50</span>%; left: <span class="number">50</span>%; transform: translate(<span class="number">-50</span>%, <span class="number">-50</span>%); &#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 居中, Flex 方式, 兼容性不行</span></span><br><span class="line">.center(flex) &#123; display: flex; <span class="keyword">align</span>-items: center; justify-content: center; &#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 多个子项布局</span></span><br><span class="line">.list(<span class="keyword">float</span>, @w: <span class="number">25</span>%) &#123; <span class="keyword">float</span>: left; width: @w; &#125;</span><br><span class="line">.list(inline, @w: <span class="number">25</span>%) &#123; .dib(); width: @w; &#125;</span><br><span class="line">.list(flex) &#123; flex: <span class="number">1</span>; &#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 遮罩层, 全屏遮罩、区域遮罩</span></span><br><span class="line">.over-screen(fixed) &#123; .fixed(); top: <span class="number">0</span>; left: <span class="number">0</span>; right: <span class="number">0</span>; bottom: <span class="number">0</span>; &#125;</span><br><span class="line">.over-screen(absolute) &#123; position: absolute; top: <span class="number">0</span>; left: <span class="number">0</span>; right: <span class="number">0</span>; bottom: <span class="number">0</span>; &#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 容器宽高比固定</span></span><br><span class="line"><span class="comment">// 100* 1/1 = 100%</span></span><br><span class="line"><span class="comment">// 100* 3/4 = 75%</span></span><br><span class="line">.fixed-ratio(@padding-top: <span class="number">100</span>%) &#123;</span><br><span class="line">position: relative; width: <span class="number">100</span>%; height: <span class="number">0</span>; padding-top: @padding-top;</span><br><span class="line">img &#123; position: absolute; top: <span class="number">0</span>; left: <span class="number">0</span>; width: <span class="number">100</span>%; height: <span class="number">100</span>%; &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 扩展点击区域</span></span><br><span class="line">.extend-click() &#123;</span><br><span class="line">position: relative;</span><br><span class="line">&amp;:before &#123; content: <span class="string">''</span>; position: absolute; top: <span class="number">-10</span>px; left: <span class="number">-10</span>px; right: <span class="number">-10</span>px; bottom: <span class="number">-10</span>px; &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 定宽居中页面布局</span></span><br><span class="line">.<span class="keyword">layout</span>-page(@width: <span class="number">1200</span>px) &#123; width: @width; margin-left: auto; margin-right: auto; &#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 侧边栏</span></span><br><span class="line"><span class="comment">// 主要区域：overflow: hidden; margin-left: xx; margin-right: xx;</span></span><br><span class="line">.sidebar(left, @width) &#123; position: absolute; top: <span class="number">0</span>; left: <span class="number">0</span>; width: @width; &#125;</span><br><span class="line">.sidebar(right, @width) &#123; position: absolute; top: <span class="number">0</span>; right: <span class="number">0</span>; width: @width; &#125;</span><br><span class="line"> </span><br><span class="line">/------------------------------------- ├ 字体 ┆ └------------------------------------/</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 字体大小</span></span><br><span class="line">.fz(@fz) &#123; font-<span class="keyword">size</span>: @fz; &#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 字体大小与行高</span></span><br><span class="line">.fz(@fz, @lh) &#123; font-<span class="keyword">size</span>: @fz; line-height: @lh; &#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 字体大小、行高、高度</span></span><br><span class="line">.fz(@fz, @h, @lh: @h) &#123; font-<span class="keyword">size</span>: @fz; height: @h; line-height: @lh; &#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 行高与高度</span></span><br><span class="line">.lh(@h, @lh: @h) &#123; height: @h; line-height: @lh; &#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 字体颜色, 包括链接与非链接</span></span><br><span class="line">.<span class="keyword">color</span>(@color) &#123; <span class="keyword">color</span>: @color;&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 字体颜色 + 自身 Hover</span></span><br><span class="line">.<span class="keyword">color</span>(@color, @hovercolor) &#123;</span><br><span class="line"><span class="keyword">color</span>: @color;</span><br><span class="line">&amp;:hover &#123; <span class="keyword">color</span>: @hovercolor; &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 字体颜色 + 链接 Hover</span></span><br><span class="line">.<span class="keyword">color</span>(@color, @acolor, @hovercolor) &#123;</span><br><span class="line"><span class="keyword">color</span>: @color;</span><br><span class="line">a &#123;</span><br><span class="line"><span class="keyword">color</span>: @acolor;</span><br><span class="line">&amp;:hover &#123; <span class="keyword">color</span>: @hovercolor; &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 正常字体样式</span></span><br><span class="line">.normal-font() &#123; font-weight: normal; font-style: normal; &#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 辅助性文字（灰色）</span></span><br><span class="line">.assist-font(@color: #b0b0b0, @fz: <span class="number">14</span>px) &#123; <span class="keyword">color</span>: @color; font-<span class="keyword">size</span>: @fz; &#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 禁止换行, 文本溢出省略号显示 (一行)</span></span><br><span class="line">.ellipsis() &#123;</span><br><span class="line">white-space: normal; word-wrap: <span class="keyword">break</span>-word; word-<span class="keyword">break</span>: <span class="keyword">break</span>-all;</span><br><span class="line">-o-<span class="keyword">text</span>-overflow: ellipsis; -ms-<span class="keyword">text</span>-overflow: ellipsis; <span class="keyword">text</span>-overflow:ellipsis; overflow:hidden;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 文本溢出省略号显示 (多行)</span></span><br><span class="line"><span class="comment">// 只支持 webkit 浏览器, 解决方案：高度 = 行高*行数</span></span><br><span class="line"><span class="comment">// height: 90px; line-height: 30px; -webkit-line-clamp: 3;</span></span><br><span class="line">.ellipsis-mult(@n: <span class="number">3</span>) &#123;</span><br><span class="line">display: -webkit-box; -webkit-box-orient: vertical;-webkit-line-<span class="keyword">clamp</span>: @n; word-<span class="keyword">break</span>: <span class="keyword">break</span>-all;</span><br><span class="line">-o-<span class="keyword">text</span>-overflow: ellipsis; -ms-<span class="keyword">text</span>-overflow: ellipsis; <span class="keyword">text</span>-overflow:ellipsis; overflow: hidden;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 书写模式：牌匾从右至左水平单行排版效果、文笺从右至左、从上至下排版效果</span></span><br><span class="line">.retext(x) &#123; direction: rtl; unicode-bidi: bidi-override; &#125;</span><br><span class="line">.retext(y) &#123; writing-mode: tb-rl; writing-mode: vertical-rl; &#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 文字透明</span></span><br><span class="line">.transparent-<span class="keyword">text</span>() &#123; font: <span class="number">0</span>/<span class="number">0</span> serif; <span class="keyword">text</span>-shadow: none; <span class="keyword">color</span>: transparent; &#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 文字隐藏（常用于SEO优化）</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"> </span><br><span class="line">xx</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">.hidden-<span class="keyword">text</span>() &#123; <span class="keyword">text</span>-indent : <span class="number">-9999</span>px; overflow: hidden; <span class="keyword">text</span>-<span class="keyword">align</span>: left; &#125;</span><br><span class="line"><span class="comment">// 文字外发光效果</span></span><br><span class="line">.glow-<span class="keyword">text</span>(@r: <span class="number">10</span>px, @color: gold) &#123; <span class="keyword">text</span>-shadow: <span class="number">0</span> <span class="number">0</span> @r @color; &#125;</span><br><span class="line"> </span><br><span class="line">/------------------------------------- ├ 图像 ┆ └------------------------------------/</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 用 max-width 来防止图片撑破容器</span></span><br><span class="line">.<span class="keyword">max</span>-img() &#123; display: block; <span class="keyword">max</span>-width: <span class="number">100</span>%; height: auto; &#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 2x 3x 背景图片</span></span><br><span class="line">.bg-<span class="keyword">image</span>(@url) &#123;</span><br><span class="line">background-<span class="keyword">image</span>: url(<span class="string">"@url + '@2x.png'"</span>);</span><br><span class="line">@media (-webkit-<span class="keyword">min</span>-device-pixel-ratio: <span class="number">3</span>), (<span class="keyword">min</span>-device-pixel-ratio: <span class="number">3</span>) &#123;</span><br><span class="line">background-<span class="keyword">image</span>: url(<span class="string">"@url + '@3x.png'"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 全屏大图背景</span></span><br><span class="line">.fullscreen-bg(@url) &#123;</span><br><span class="line">width: <span class="number">100</span>vw;</span><br><span class="line">height: <span class="number">100</span>vh;</span><br><span class="line">background: url(@url) no-repeat <span class="number">50</span>% <span class="number">50</span>%;</span><br><span class="line">background-<span class="keyword">size</span>: cover;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 滤镜: 将彩色照片显示为黑白照片</span></span><br><span class="line">.grayscale() &#123;</span><br><span class="line"><span class="keyword">filter</span>: grayscale(<span class="number">100</span>%);</span><br><span class="line">-webkit-<span class="keyword">filter</span>: grayscale(<span class="number">100</span>%);</span><br><span class="line">-moz-<span class="keyword">filter</span>: grayscale(<span class="number">100</span>%);</span><br><span class="line">-ms-<span class="keyword">filter</span>: grayscale(<span class="number">100</span>%);</span><br><span class="line">-o-<span class="keyword">filter</span>: grayscale(<span class="number">100</span>%);</span><br><span class="line">&#125;</span><br><span class="line">/------------------------------------- ├ 动效 ┆ └------------------------------------/</span><br><span class="line"><span class="comment">// 链接默认无下划线，hover后有下划线的样式</span></span><br><span class="line">.hover-link() &#123;</span><br><span class="line"><span class="keyword">text</span>-decoration: none;</span><br><span class="line">&amp;:hover &#123; <span class="keyword">text</span>-decoration: underline; &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 将链接变成默认的文字样式</span></span><br><span class="line">.unstyled-link() &#123;</span><br><span class="line"><span class="keyword">color</span>: inherit;</span><br><span class="line">cursor: inherit;</span><br><span class="line"><span class="keyword">text</span>-decoration: inherit;</span><br><span class="line">&amp;:active, &amp;:focus &#123; outline: none; &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 盒子阴影</span></span><br><span class="line"><span class="comment">// box-shadow: 水平阴影的位置, 垂直阴影的位置, 模糊距离, 阴影的大小, 阴影的颜色, 阴影开始方向（默认是从里往外，设置inset就是从外往里）;</span></span><br><span class="line"><span class="comment">// box-shadow: h-shadow v-shadow blur spread color inset;</span></span><br><span class="line">.box-shadow() &#123;</span><br><span class="line">box-shadow: <span class="number">0</span>px <span class="number">14</span>px <span class="number">26</span>px <span class="number">0</span>px rgba(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 盒子 Hover</span></span><br><span class="line">.box-hover() &#123;</span><br><span class="line"><span class="comment">// box-shadow: 0px 1px 2px 0px rgba(84, 107, 107, .4);</span></span><br><span class="line">transition: all <span class="number">.2</span>s linear;</span><br><span class="line">&amp;:hover &#123;</span><br><span class="line">box-shadow: <span class="number">0</span> <span class="number">15</span>px <span class="number">30</span>px rgba(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">.1</span>);</span><br><span class="line">transform: translate3d(<span class="number">0</span>, <span class="number">-2</span>px, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">.box-hover2() &#123;</span><br><span class="line">transition: transform <span class="number">.5</span>s ease;</span><br><span class="line">&amp;:hover &#123;</span><br><span class="line">transform: translateX(<span class="number">10</span>px);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 三维闪动 bug 处理</span></span><br><span class="line">.transform-fix() &#123; -webkit-backface-visibility: hidden; -webkit-transform-style: preserve<span class="number">-3</span>d; &#125;</span><br><span class="line"><span class="comment">// Animation</span></span><br><span class="line">.ani(@name, @time: <span class="number">1</span>s, @ease: ease-<span class="keyword">in</span>-out, @fillmode: forwards) &#123;</span><br><span class="line">animation-name: @name;</span><br><span class="line">animation-duration: @time;</span><br><span class="line">animation-timing-function: @ease;</span><br><span class="line">animation-fill-mode: @fillmode;</span><br><span class="line">&#125;</span><br><span class="line">/------------------------------------- ├ 功能 ┆ └------------------------------------/</span><br><span class="line"><span class="comment">// 浮动, 兼容 IE6</span></span><br><span class="line">.fl() &#123; <span class="keyword">float</span>: left; *display: inline; _display:inline; &#125;</span><br><span class="line">.fr() &#123; <span class="keyword">float</span>: right; *display: inline; _display:inline; &#125;</span><br><span class="line"><span class="comment">// 清除浮动</span></span><br><span class="line">.clearfix() &#123;</span><br><span class="line">*zoom: <span class="number">1</span>;</span><br><span class="line">&amp;:after &#123; display: block; <span class="keyword">clear</span>: both; content: <span class="string">''</span>; visibility: hidden; height: <span class="number">0</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line">.clearfix(table) &#123;</span><br><span class="line">*zoom: <span class="number">1</span>;</span><br><span class="line">&amp;:before, &amp;:after &#123; content: <span class="string">" "</span>; display: table; <span class="keyword">clear</span>: both; &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 禁止文本被选择</span></span><br><span class="line">.user-<span class="keyword">select</span>() &#123; -webkit-user-<span class="keyword">select</span>: none; -moz-user-<span class="keyword">select</span>: none; -ms-user-<span class="keyword">select</span>: none; user-<span class="keyword">select</span>: none; &#125;</span><br><span class="line"><span class="comment">// 隐藏鼠标手势</span></span><br><span class="line">.<span class="keyword">hide</span>-cursor() &#123; cursor: none !important; &#125;</span><br><span class="line"><span class="comment">// 鼠标禁用样式，但仍然可以触发事件</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line">.disabled() &#123; cursor: not-allowed; &#125;</span><br><span class="line"><span class="comment">// 禁用元素事件</span></span><br><span class="line"><span class="comment">// 1. 阻止任何点击动作的执行</span></span><br><span class="line"><span class="comment">// 2. 使链接显示为默认光标(cursor:default)</span></span><br><span class="line"><span class="comment">// 3. 阻止触发hover和active状态</span></span><br><span class="line"><span class="comment">// 4. 阻止JavaScript点击事件的触发</span></span><br><span class="line">.pointer-events() &#123; pointer-events: none; &#125;</span><br><span class="line"><span class="comment">// 模糊</span></span><br><span class="line">.blur(@blur: <span class="number">10</span>px) &#123;</span><br><span class="line"><span class="keyword">filter</span>: blur(@blur);</span><br><span class="line">-webkit-<span class="keyword">filter</span>: blur(@blur);</span><br><span class="line">-moz-<span class="keyword">filter</span>: blur(@blur);</span><br><span class="line">-o-<span class="keyword">filter</span>: blur(@blur);</span><br><span class="line">-ms-<span class="keyword">filter</span>: blur(@blur);</span><br><span class="line"><span class="keyword">filter</span>: progid:DXImageTransform.Microsoft.Blur(PixelRadius=<span class="string">'@&#123;blur&#125;'</span>);</span><br><span class="line">*zoom: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 透明度, 兼容 IE8</span></span><br><span class="line">.opacity(@opacity: <span class="number">20</span>) &#123; opacity: @opacity / <span class="number">100</span>; <span class="keyword">filter</span>: alpha(opacity=@opacity); &#125;</span><br><span class="line"><span class="comment">// 用伪类来显示打印时 a 标签的链接</span></span><br><span class="line">.<span class="keyword">print</span>-link() &#123;</span><br><span class="line">@media <span class="keyword">print</span> &#123;</span><br><span class="line">a[href]:after &#123; content: <span class="string">" ("</span> attr(href) <span class="string">") "</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 隔行换色</span></span><br><span class="line">.zebra-lists(odd, @color) &#123;</span><br><span class="line">&amp;.odd &#123;</span><br><span class="line">&gt;li:nth-child(odd) &#123; background-<span class="keyword">color</span>: @color; &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">.zebra-lists(even, @color) &#123;</span><br><span class="line">&amp;.even &#123;</span><br><span class="line">&gt;li:nth-child(even) &#123; background: green; &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 首字下沉</span></span><br><span class="line">.first-letter(@font-<span class="keyword">size</span>: <span class="number">6</span>em) &#123;</span><br><span class="line">&amp;::first-letter&#123;</span><br><span class="line"><span class="keyword">float</span>: left;</span><br><span class="line">line-height: <span class="number">1</span>;</span><br><span class="line">font-<span class="keyword">size</span>: @font-<span class="keyword">size</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 特殊标记段落第一行</span></span><br><span class="line">.first-line() &#123;</span><br><span class="line">&amp;::first-line&#123;</span><br><span class="line"><span class="keyword">color</span>: red</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 美化选中文本</span></span><br><span class="line">.beauty-<span class="keyword">select</span>() &#123;</span><br><span class="line">&amp;::selection&#123;</span><br><span class="line"><span class="keyword">color</span>: #fff;</span><br><span class="line">background-<span class="keyword">color</span>: #<span class="number">6</span>bc30d;</span><br><span class="line"><span class="keyword">text</span>-shadow: none;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 美化占位符 placeholder 样式</span></span><br><span class="line">.beauty-placeholder(@fz, @color: #<span class="number">999</span>, @align: left) &#123;</span><br><span class="line">&amp;:-moz-placeholder &#123; font-<span class="keyword">size</span>: @fz; <span class="keyword">color</span>: @color; <span class="keyword">text</span>-<span class="keyword">align</span>: @align; &#125;</span><br><span class="line">&amp;:-ms-input-placeholder &#123; font-<span class="keyword">size</span>: @fz; <span class="keyword">color</span>: @color; <span class="keyword">text</span>-<span class="keyword">align</span>: @align; &#125;</span><br><span class="line">&amp;::-webkit-input-placeholder &#123; font-<span class="keyword">size</span>: @fz; <span class="keyword">color</span>: @color; <span class="keyword">text</span>-<span class="keyword">align</span>: @align; &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 美化占位符 placeholder 样式（自定义属性和值）</span></span><br><span class="line">.beauty-placeholder(custom, @property, @value) &#123;</span><br><span class="line">&amp;:-moz-placeholder &#123; @&#123;property&#125;: @value; &#125;</span><br><span class="line">&amp;:-ms-input-placeholder &#123; @&#123;property&#125;: @value; &#125;</span><br><span class="line">&amp;::-webkit-input-placeholder &#123; @&#123;property&#125;: @value; &#125;</span><br><span class="line">&#125;</span><br><span class="line">/------------------------------------- ├ 图形 ┆ └------------------------------------/</span><br><span class="line"><span class="comment">// 三角形</span></span><br><span class="line">.triangle(@width: <span class="number">4</span>px,@color: #<span class="number">000</span>) &#123;</span><br><span class="line">display: inline-block;</span><br><span class="line">width: <span class="number">0</span>;</span><br><span class="line">height: <span class="number">0</span>;</span><br><span class="line">vertical-<span class="keyword">align</span>: middle;</span><br><span class="line">border-top: @width solid @color;</span><br><span class="line">border-left: @width solid transparent;</span><br><span class="line">border-right: @width solid transparent;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 三角形箭头气泡效果, IE6-7 无表现</span></span><br><span class="line">.arrow(top, @w: <span class="number">10</span>px, @color, @x: <span class="number">50</span>%) &#123;</span><br><span class="line">position: relative;</span><br><span class="line">&amp;:before &#123; position: absolute; bottom: <span class="number">100</span>%; left: @x; content: <span class="string">" "</span>; height: <span class="number">0</span>; width: <span class="number">0</span>; pointer-events: none; border-style: solid; border-<span class="keyword">color</span>: transparent; border-bottom-<span class="keyword">color</span>: @color; border-width: <span class="keyword">unit</span>(@w, px); @margin: -@w; margin-left: <span class="keyword">unit</span>(@margin, px); &#125;</span><br><span class="line">&#125;</span><br><span class="line">.arrow(right, @w: <span class="number">10</span>px, @color, @y: <span class="number">50</span>%) &#123;</span><br><span class="line">position: relative;</span><br><span class="line">&amp;:before &#123; position: absolute; left: <span class="number">100</span>%; top: @y; content: <span class="string">" "</span>; height: <span class="number">0</span>; width: <span class="number">0</span>; pointer-events: none; border-style: solid; border-<span class="keyword">color</span>: transparent; border-left-<span class="keyword">color</span>: @color; border-width: <span class="keyword">unit</span>(@w, px); @margin: -@w; margin-top: <span class="keyword">unit</span>(@margin, px); &#125;</span><br><span class="line">&#125;</span><br><span class="line">.arrow(bottom, @w: <span class="number">10</span>px, @color, @x: <span class="number">50</span>%) &#123;</span><br><span class="line">position: relative;</span><br><span class="line">&amp;:before &#123; position: absolute; top: <span class="number">100</span>%; left: @x; content: <span class="string">" "</span>; height: <span class="number">0</span>; width: <span class="number">0</span>; pointer-events: none; border-style: solid; border-<span class="keyword">color</span>: transparent; border-top-<span class="keyword">color</span>: @color; border-width: <span class="keyword">unit</span>(@w, px); @margin: -@w; margin-left: <span class="keyword">unit</span>(@margin, px); &#125;</span><br><span class="line">&#125;</span><br><span class="line">.arrow(left, @w: <span class="number">10</span>px, @color, @y: <span class="number">50</span>%) &#123;</span><br><span class="line">position: relative;</span><br><span class="line">&amp;:before &#123; position: absolute; right: <span class="number">100</span>%; top: @y; content: <span class="string">" "</span>; height: <span class="number">0</span>; width: <span class="number">0</span>; pointer-events: none; border-style: solid; border-<span class="keyword">color</span>: transparent; border-right-<span class="keyword">color</span>: @color; border-width: <span class="keyword">unit</span>(@w, px); @margin: -@w; margin-top: <span class="keyword">unit</span>(@margin, px); &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 三角形箭头气泡效果, 带边框</span></span><br><span class="line">.arrow-with-border(top, @w: <span class="number">10</span>px, @color, @border-w: <span class="number">1</span>px, @border-<span class="keyword">color</span>, @x: <span class="number">50</span>%) &#123;</span><br><span class="line">position: relative;</span><br><span class="line">&amp;:before, &amp;:after &#123; bottom: <span class="number">100</span>%; left: @x; content: <span class="string">" "</span>; height: <span class="number">0</span>; width: <span class="number">0</span>; position: absolute; pointer-events: none; border-style: solid; border-<span class="keyword">color</span>: transparent; &#125;</span><br><span class="line">&amp;:after &#123; border-bottom-<span class="keyword">color</span>: @color; border-width: <span class="keyword">unit</span>(@w, px); @margin: -@w; margin-left: <span class="keyword">unit</span>(@margin, px); &#125;</span><br><span class="line">&amp;:before &#123; border-bottom-<span class="keyword">color</span>: @border-<span class="keyword">color</span>; @arrbo: @w+@border-w; border-width: <span class="keyword">unit</span>(@arrbo, px); @margin-bo: -@arrbo; margin-left: <span class="keyword">unit</span>(@margin-bo, px); &#125;</span><br><span class="line">&#125;</span><br><span class="line">.arrow-with-border(bottom, @w: <span class="number">10</span>px, @color, @border-w: <span class="number">1</span>px, @border-<span class="keyword">color</span>, @x: <span class="number">50</span>%) &#123;</span><br><span class="line">position: relative;</span><br><span class="line">&amp;:before, &amp;:after &#123; top: <span class="number">100</span>%; left: @x; content: <span class="string">" "</span>; height: <span class="number">0</span>; width: <span class="number">0</span>; position: absolute; pointer-events: none; border-style: solid; border-<span class="keyword">color</span>: transparent; &#125;</span><br><span class="line">&amp;:after &#123; border-top-<span class="keyword">color</span>: @color; border-width: <span class="keyword">unit</span>(@w, px); @margin: -@w; margin-left: <span class="keyword">unit</span>(@margin, px); &#125;</span><br><span class="line">&amp;:before &#123; border-top-<span class="keyword">color</span>: @border-<span class="keyword">color</span>; @arrbo: @w+@border-w; border-width: <span class="keyword">unit</span>(@arrbo, px); @margin-bo: -@arrbo; margin-left: <span class="keyword">unit</span>(@margin-bo, px); &#125;</span><br><span class="line">&#125;</span><br><span class="line">.arrow-with-border(left, @w: <span class="number">10</span>px, @color, @border-w: <span class="number">1</span>px, @border-<span class="keyword">color</span>, @y: <span class="number">50</span>%) &#123;</span><br><span class="line">position: relative;</span><br><span class="line">&amp;:before, &amp;:after &#123; top: @y; right: <span class="number">100</span>%; content: <span class="string">" "</span>; height: <span class="number">0</span>; width: <span class="number">0</span>; position: absolute; pointer-events: none; border-style: solid; border-<span class="keyword">color</span>: transparent; &#125;</span><br><span class="line">&amp;:after &#123; border-right-<span class="keyword">color</span>: @color; border-width: <span class="keyword">unit</span>(@w, px); @margin: -@w; margin-top: <span class="keyword">unit</span>(@margin, px); &#125;</span><br><span class="line">&amp;:before &#123; border-right-<span class="keyword">color</span>: @border-<span class="keyword">color</span>; @arrbo: @w+@border-w; border-width: <span class="keyword">unit</span>(@arrbo, px); @margin-bo: -@arrbo; margin-top: <span class="keyword">unit</span>(@margin-bo, px); &#125;</span><br><span class="line">&#125;</span><br><span class="line">.arrow-with-border(right, @w: <span class="number">10</span>px, @color, @border-w: <span class="number">1</span>px, @border-<span class="keyword">color</span>, @y: <span class="number">50</span>%) &#123;</span><br><span class="line">position: relative;</span><br><span class="line">&amp;:before, &amp;:after &#123; top: @y; left: <span class="number">100</span>%; content: <span class="string">" "</span>; height: <span class="number">0</span>; width: <span class="number">0</span>; position: absolute; pointer-events: none; border-style: solid; border-<span class="keyword">color</span>: transparent; &#125;</span><br><span class="line">&amp;:after &#123; border-left-<span class="keyword">color</span>: @color; border-width: <span class="keyword">unit</span>(@w, px); @margin: -@w; margin-top: <span class="keyword">unit</span>(@margin, px); &#125;</span><br><span class="line">&amp;:before &#123; border-left-<span class="keyword">color</span>: @border-<span class="keyword">color</span>; @arrbo: @w+@border-w; border-width: <span class="keyword">unit</span>(@arrbo, px); @margin-bo: -@arrbo; margin-top: <span class="keyword">unit</span>(@margin-bo, px); &#125;</span><br><span class="line">&#125;</span><br><span class="line">/------------------------------------- ├ 组件 ┆ └------------------------------------/</span><br><span class="line"><span class="comment">// 吸顶导航</span></span><br><span class="line">.fix-header(@h: <span class="number">70</span>px) &#123;</span><br><span class="line">.fixed();</span><br><span class="line">top: <span class="number">0</span>;</span><br><span class="line">left: <span class="number">0</span>;</span><br><span class="line">width: <span class="number">100</span>%;</span><br><span class="line">height: @h;</span><br><span class="line">z-index: <span class="number">1000</span>;</span><br><span class="line"><span class="comment">// background-color: rgba(256, 256, 256, .92);</span></span><br><span class="line"><span class="comment">// border-bottom: 1px solid rgba(7, 17, 27, 0.1);</span></span><br><span class="line"><span class="comment">// box-shadow: 0px 0px 20px rgba(0,0,0,0.2);</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 吸底导航</span></span><br><span class="line">.fix-header(@h: <span class="number">70</span>px) &#123;</span><br><span class="line">.fixed();</span><br><span class="line">left: <span class="number">0</span>;</span><br><span class="line">bottom: <span class="number">0</span>;</span><br><span class="line">width: <span class="number">100</span>%;</span><br><span class="line">height: @h;</span><br><span class="line">z-index: <span class="number">1000</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输入框</span></span><br><span class="line">.input-<span class="keyword">text</span>() &#123;</span><br><span class="line">display: block;</span><br><span class="line">width: <span class="number">100</span>%;</span><br><span class="line">padding: <span class="number">4</span>px <span class="number">8</span>px;</span><br><span class="line">font-<span class="keyword">size</span>: <span class="number">14</span>px;</span><br><span class="line">line-height: <span class="number">1.42858</span>;</span><br><span class="line"><span class="keyword">color</span>: #<span class="number">333</span>;</span><br><span class="line">border: <span class="number">1</span>px solid #ddd;</span><br><span class="line">background-<span class="keyword">color</span>: #fff;</span><br><span class="line">border-radius: <span class="number">3</span>px;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 分割线</span></span><br><span class="line"><span class="comment">// |/-</span></span><br><span class="line">.<span class="keyword">separator</span>() &#123;</span><br><span class="line">margin: <span class="number">0</span> <span class="number">10</span>px;</span><br><span class="line"><span class="keyword">color</span>: #<span class="number">999</span>;</span><br><span class="line">font-<span class="keyword">size</span>: <span class="number">14</span>px;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 分割线 / (面包屑导航)</span></span><br><span class="line">.separator2() &#123;</span><br><span class="line">&amp;:before &#123;</span><br><span class="line">padding: <span class="number">0</span> <span class="number">5</span>px;</span><br><span class="line"><span class="keyword">color</span>: #ccc;</span><br><span class="line">content: <span class="string">"/\00a0"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 支付宝：我也是有底线的</span></span><br><span class="line">.hr() &#123;</span><br><span class="line">height: <span class="number">1</span>px;</span><br><span class="line">margin: <span class="number">10</span>px <span class="number">0</span>;</span><br><span class="line">border: <span class="number">0</span>;</span><br><span class="line"><span class="keyword">clear</span>: both;</span><br><span class="line">background-<span class="keyword">color</span>: #e2e2e2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 改装的 fieldset</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line">返璞归真</span><br><span class="line">.fieldset() &#123;</span><br><span class="line">border-<span class="keyword">color</span>: #d2d2d2;</span><br><span class="line">border-width: <span class="number">1</span>px <span class="number">0</span> <span class="number">0</span>;</span><br><span class="line">border-style: solid;</span><br><span class="line">legend &#123;</span><br><span class="line">padding: <span class="number">0</span> <span class="number">20</span>px;</span><br><span class="line"><span class="keyword">text</span>-<span class="keyword">align</span>: center;</span><br><span class="line">font-<span class="keyword">size</span>: <span class="number">20</span>px;</span><br><span class="line">font-weight: <span class="number">300</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 引用区块（模仿 Layui）</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line">Lorem ipsum dolor sit amet.</span><br><span class="line">.blockquote() &#123;</span><br><span class="line">margin-bottom: <span class="number">10</span>px;</span><br><span class="line">padding: <span class="number">15</span>px;</span><br><span class="line">line-height: <span class="number">22</span>px;</span><br><span class="line">border-left: <span class="number">5</span>px solid #<span class="number">009688</span>;</span><br><span class="line">border-radius: <span class="number">0</span> <span class="number">2</span>px <span class="number">2</span>px <span class="number">0</span>;</span><br><span class="line">background-<span class="keyword">color</span>: #f2f2f2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 徽章 (椭圆、小圆点)</span></span><br><span class="line"><span class="comment">// 10</span></span><br><span class="line">.badge(...) &#123;</span><br><span class="line">position: relative;</span><br><span class="line">display: inline-block;</span><br><span class="line">font-<span class="keyword">size</span>: <span class="number">12</span>px;</span><br><span class="line"><span class="keyword">color</span>: #fff;</span><br><span class="line">background-<span class="keyword">color</span>: #FF5722;</span><br><span class="line">&#125;</span><br><span class="line">.badge(ellipse) &#123;</span><br><span class="line"><span class="keyword">min</span>-width: <span class="number">8</span>px;</span><br><span class="line">height: <span class="number">18</span>px;</span><br><span class="line">padding: <span class="number">2</span>px <span class="number">6</span>px;</span><br><span class="line"><span class="keyword">text</span>-<span class="keyword">align</span>: center;</span><br><span class="line">line-height: <span class="number">18</span>px;</span><br><span class="line">border-radius: <span class="number">9</span>px;</span><br><span class="line">&#125;</span><br><span class="line">.badge(<span class="keyword">dot</span>) &#123;</span><br><span class="line">width: <span class="number">8</span>px;</span><br><span class="line">height: <span class="number">8</span>px;</span><br><span class="line">border-radius: <span class="number">50</span>%;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 关闭按钮</span></span><br><span class="line"><span class="comment">// ×</span></span><br><span class="line">.close() &#123;</span><br><span class="line">position: relative;</span><br><span class="line">-webkit-appearance: none;</span><br><span class="line">padding: <span class="number">0</span>;</span><br><span class="line">cursor: pointer;</span><br><span class="line">background: <span class="number">0</span> <span class="number">0</span>;</span><br><span class="line">border: <span class="number">0</span>;</span><br><span class="line">font-<span class="keyword">size</span>: <span class="number">20</span>px;</span><br><span class="line">font-weight: <span class="number">700</span>;</span><br><span class="line">line-height: <span class="number">1</span>;</span><br><span class="line"><span class="keyword">color</span>: #<span class="number">000</span>;</span><br><span class="line"><span class="keyword">text</span>-shadow: <span class="number">0</span> <span class="number">1</span>px <span class="number">0</span> #fff;</span><br><span class="line"><span class="keyword">filter</span>: alpha(opacity=<span class="number">20</span>);</span><br><span class="line">opacity: <span class="number">.2</span>;</span><br><span class="line">&amp;:hover &#123;</span><br><span class="line"><span class="keyword">color</span>: #<span class="number">000</span>;</span><br><span class="line"><span class="keyword">text</span>-decoration: none;</span><br><span class="line">cursor: pointer;</span><br><span class="line"><span class="keyword">filter</span>: alpha(opacity=<span class="number">50</span>);</span><br><span class="line">opacity: <span class="number">.5</span>;</span><br><span class="line">&#125;</span><br><span class="line">&amp;:before &#123;</span><br><span class="line">content: <span class="string">''</span>;</span><br><span class="line">position: absolute;</span><br><span class="line">top: <span class="number">-10</span>px;</span><br><span class="line">left: <span class="number">-10</span>px;</span><br><span class="line">right: <span class="number">-10</span>px;</span><br><span class="line">bottom: <span class="number">-10</span>px;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 1 像素边框问题</span></span><br><span class="line">.onepx(...) &#123;</span><br><span class="line">position: relative;</span><br><span class="line">&amp;:after &#123;</span><br><span class="line">content: <span class="string">''</span>;</span><br><span class="line">display: block;</span><br><span class="line">position: absolute;</span><br><span class="line">left: <span class="number">0</span>;</span><br><span class="line">width: <span class="number">100</span>%;</span><br><span class="line">border-top: <span class="number">1</span>px solid rgba(<span class="number">7</span>, <span class="number">17</span>, <span class="number">27</span>, <span class="number">0.1</span>);</span><br><span class="line">transform: scaleY(<span class="number">0.5</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">.onepx(top) &#123; &amp;:after &#123; top: <span class="number">0</span>; &#125; &#125;</span><br><span class="line">.onepx(bottom) &#123; &amp;:after &#123; bottom: <span class="number">0</span>; &#125; &#125;</span><br><span class="line">.onepx-easy(top, @color: #ccc) &#123; box-shadow: inset <span class="number">0</span>px <span class="number">-1</span>px <span class="number">1</span>px <span class="number">-1</span>px @color; &#125;</span><br><span class="line">.onepx-easy(bottom, @color: #ccc) &#123; box-shadow: inset <span class="number">0</span>px <span class="number">1</span>px <span class="number">1</span>px <span class="number">-1</span>px @color; &#125;</span><br></pre></td></tr></table></figure></p><p>zless库<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// =============================================</span></span><br><span class="line"><span class="comment">// @des:            zless</span></span><br><span class="line"><span class="comment">// @author:         Busy</span></span><br><span class="line"><span class="comment">// @url:            www.aibusy.com || www.moyu-edu.com</span></span><br><span class="line"><span class="comment">// @time:           2013-12-08</span></span><br><span class="line"><span class="comment">// @lastTime          2016-12-10</span></span><br><span class="line"><span class="comment">// @version         0.6 beta</span></span><br><span class="line"><span class="comment">// =============================================</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// common reset use kissy reset</span></span><br><span class="line"><span class="selector-class">.reset</span>()&#123;</span><br><span class="line">    <span class="selector-tag">body</span>, <span class="selector-tag">div</span>, <span class="selector-tag">dl</span>, <span class="selector-tag">dt</span>, <span class="selector-tag">dd</span>, <span class="selector-tag">ul</span>, <span class="selector-tag">ol</span>, <span class="selector-tag">li</span>, <span class="selector-tag">h1</span>, <span class="selector-tag">h2</span>, <span class="selector-tag">h3</span>, <span class="selector-tag">h4</span>, <span class="selector-tag">h5</span>, <span class="selector-tag">h6</span>, <span class="selector-tag">pre</span>, <span class="selector-tag">code</span>, <span class="selector-tag">form</span>, <span class="selector-tag">fieldset</span>, <span class="selector-tag">legend</span>, <span class="selector-tag">input</span>, <span class="selector-tag">textarea</span>, <span class="selector-tag">p</span>, <span class="selector-tag">blockquote</span>, <span class="selector-tag">th</span>, <span class="selector-tag">td</span>, <span class="selector-tag">hr</span>, <span class="selector-tag">button</span>, <span class="selector-tag">article</span>, <span class="selector-tag">aside</span>, <span class="selector-tag">details</span>, <span class="selector-tag">figcaption</span>, <span class="selector-tag">figure</span>, <span class="selector-tag">footer</span>, <span class="selector-tag">header</span>, <span class="selector-tag">hgroup</span>, <span class="selector-tag">menu</span>, <span class="selector-tag">nav</span>, <span class="selector-tag">section</span>&#123;<span class="attribute">margin</span>: <span class="number">0</span>;<span class="attribute">padding</span>: <span class="number">0</span>;&#125;</span><br><span class="line">    <span class="selector-tag">body</span>&#123; <span class="attribute">margin</span>:<span class="number">0</span> auto; <span class="attribute">font-family</span>: <span class="string">"Helvetica Neue"</span>,Helvetica,Arial,<span class="string">"微软雅黑"</span>,sans-serif;<span class="attribute">color</span>:<span class="number">#222</span>; <span class="attribute">font-size</span>:<span class="number">12px</span>;&#125;</span><br><span class="line">    <span class="selector-tag">body</span>, <span class="selector-tag">button</span>, <span class="selector-tag">input</span>, <span class="selector-tag">select</span>, <span class="selector-tag">textarea</span> &#123;<span class="attribute">outline</span>:none;&#125;</span><br><span class="line">    <span class="selector-tag">input</span>, <span class="selector-tag">select</span>, <span class="selector-tag">textarea</span> &#123;<span class="attribute">font-size</span>: <span class="number">100%</span>;&#125;<span class="selector-tag">textarea</span>&#123;<span class="attribute">resize</span>:none;&#125;</span><br><span class="line">    <span class="selector-tag">table</span> &#123;<span class="attribute">border-collapse</span>:collapse; <span class="attribute">border-spacing</span>:<span class="number">0</span>;&#125;</span><br><span class="line">    <span class="selector-tag">th</span> &#123;<span class="attribute">text-align</span>: inherit;&#125;</span><br><span class="line">    <span class="selector-tag">fieldset</span>, <span class="selector-tag">img</span> &#123;<span class="attribute">border</span>: <span class="number">0</span>;&#125;</span><br><span class="line">    <span class="selector-tag">img</span>&#123;<span class="attribute">vertical-align</span>:middle;&#125;</span><br><span class="line">    <span class="selector-tag">iframe</span> &#123;<span class="attribute">display</span>: block;&#125;</span><br><span class="line">    <span class="selector-tag">abbr</span>, <span class="selector-tag">acronym</span> &#123;<span class="attribute">border</span>: <span class="number">0</span>;<span class="attribute">font-variant</span>: normal;&#125;</span><br><span class="line">    <span class="selector-tag">del</span> &#123;<span class="attribute">text-decoration</span>: line-through;&#125;</span><br><span class="line">    <span class="selector-tag">address</span>, <span class="selector-tag">caption</span>, <span class="selector-tag">cite</span>, <span class="selector-tag">code</span>, <span class="selector-tag">dfn</span>, <span class="selector-tag">em</span>, <span class="selector-tag">th</span>, <span class="selector-tag">var</span> &#123;<span class="attribute">font-style</span>: normal;<span class="attribute">font-weight</span>: <span class="number">500</span>;&#125;</span><br><span class="line">    <span class="selector-tag">menu</span>,<span class="selector-tag">ol</span>, <span class="selector-tag">ul</span> &#123;<span class="attribute">list-style</span>: none;&#125;</span><br><span class="line">    <span class="selector-tag">caption</span>, <span class="selector-tag">th</span> &#123;<span class="attribute">text-align</span>: left;&#125;</span><br><span class="line">    <span class="selector-tag">h1</span>, <span class="selector-tag">h2</span>, <span class="selector-tag">h3</span>, <span class="selector-tag">h4</span>, <span class="selector-tag">h5</span>, <span class="selector-tag">h6</span> &#123;<span class="attribute">font-size</span>: <span class="number">100%</span>;<span class="attribute">font-weight</span>: <span class="number">500</span>;&#125;</span><br><span class="line">    <span class="attribute">a</span>:hover &#123;<span class="attribute">text-decoration</span>:none;<span class="attribute">cursor</span>:pointer;&#125;</span><br><span class="line">    <span class="selector-tag">ins</span>, <span class="selector-tag">a</span>,<span class="selector-tag">a</span><span class="selector-pseudo">:visited</span> &#123;<span class="attribute">text-decoration</span>: none;<span class="attribute">outline</span>:none;&#125;</span><br><span class="line">    <span class="selector-tag">i</span>&#123;<span class="attribute">font-style</span>:normal;&#125;</span><br><span class="line">    <span class="selector-tag">button</span>, <span class="selector-tag">input</span>, <span class="selector-tag">select</span>, <span class="selector-tag">textarea</span> &#123;<span class="attribute">margin</span>: <span class="number">0</span>;<span class="attribute">font-size</span>: <span class="number">100%</span>;<span class="attribute">vertical-align</span>: middle;<span class="attribute">font-family</span>:<span class="string">"Helvetica Neue"</span>,Helvetica,Arial,<span class="string">"微软雅黑"</span>,sans-serif;&#125;</span><br><span class="line">    <span class="comment">/*input[type="checkbox"]&#123; background:#2460aa; color:#fff; -webkit-text-shadow:none; border-color:#2157db; margin-right:0.08rem; border-radius:2px; -webkit-box-shadow:none;&#125;*/</span></span><br><span class="line">    <span class="comment">/*去除ios浏览器中input button的风格*/</span></span><br><span class="line">    <span class="selector-tag">button</span>, <span class="selector-tag">input</span><span class="selector-attr">[type="button"]</span>, <span class="selector-tag">input</span><span class="selector-attr">[type="reset"]</span>, <span class="selector-tag">input</span><span class="selector-attr">[type="submit"]</span> &#123;</span><br><span class="line">        <span class="attribute">-webkit-appearance</span>:none;</span><br><span class="line">        <span class="attribute">outline</span>:none</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*移除html5 input="number"的小箭头*/</span></span><br><span class="line">    <span class="attribute">input</span>::-webkit-outer-spin-button,</span><br><span class="line">    <span class="attribute">input</span>::-webkit-inner-spin-button&#123;</span><br><span class="line">        <span class="attribute">-webkit-appearance</span>: none <span class="meta">!important</span>;</span><br><span class="line">        <span class="attribute">margin</span>: <span class="number">0</span>; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-tag">input</span><span class="selector-attr">[type="number"]</span>&#123;<span class="attribute">-moz-appearance</span>:textfield;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.reset-sina</span>()&#123;</span><br><span class="line">  <span class="selector-tag">html</span>, <span class="selector-tag">body</span>, <span class="selector-tag">ul</span>, <span class="selector-tag">li</span>, <span class="selector-tag">ol</span>, <span class="selector-tag">dl</span>, <span class="selector-tag">dd</span>, <span class="selector-tag">dt</span>, <span class="selector-tag">p</span>, <span class="selector-tag">h1</span>, <span class="selector-tag">h2</span>, <span class="selector-tag">h3</span>, <span class="selector-tag">h4</span>, <span class="selector-tag">h5</span>, <span class="selector-tag">h6</span>, <span class="selector-tag">form</span>, <span class="selector-tag">fieldset</span>, <span class="selector-tag">legend</span>, <span class="selector-tag">img</span> &#123; <span class="attribute">margin</span>:<span class="number">0</span>; <span class="attribute">padding</span>:<span class="number">0</span>; &#125;</span><br><span class="line">  <span class="selector-tag">fieldset</span>, <span class="selector-tag">img</span> &#123; <span class="attribute">border</span>:none; &#125;</span><br><span class="line">  <span class="selector-tag">img</span>&#123;<span class="attribute">display</span>: block;&#125;</span><br><span class="line">  <span class="selector-tag">address</span>, <span class="selector-tag">caption</span>, <span class="selector-tag">cite</span>, <span class="selector-tag">code</span>, <span class="selector-tag">dfn</span>, <span class="selector-tag">th</span>, <span class="selector-tag">var</span> &#123; <span class="attribute">font-style</span>:normal; <span class="attribute">font-weight</span>:normal; &#125;</span><br><span class="line">  <span class="selector-tag">ul</span>, <span class="selector-tag">ol</span> &#123; <span class="attribute">list-style</span>:none; &#125;</span><br><span class="line">  <span class="selector-tag">input</span> &#123; <span class="attribute">padding-top</span>:<span class="number">0</span>; <span class="attribute">padding-bottom</span>:<span class="number">0</span>; <span class="attribute">font-family</span>: <span class="string">"SimSun"</span>,<span class="string">"宋体"</span>;&#125;</span><br><span class="line">  <span class="attribute">input</span>::-moz-focus-inner &#123; <span class="attribute">border</span>:none; <span class="attribute">padding</span>:<span class="number">0</span>; &#125;</span><br><span class="line">  <span class="selector-tag">select</span>, <span class="selector-tag">input</span> &#123; <span class="attribute">vertical-align</span>:middle; &#125;</span><br><span class="line">  <span class="selector-tag">select</span>, <span class="selector-tag">input</span>, <span class="selector-tag">textarea</span> &#123; <span class="attribute">font-size</span>:<span class="number">12px</span>; <span class="attribute">margin</span>:<span class="number">0</span>; &#125;</span><br><span class="line">  <span class="selector-tag">input</span><span class="selector-attr">[type="text"]</span>, <span class="selector-tag">input</span><span class="selector-attr">[type="password"]</span>, <span class="selector-tag">textarea</span> &#123; <span class="attribute">outline-style</span>:none; <span class="attribute">-webkit-appearance</span>:none; &#125;</span><br><span class="line">  <span class="selector-tag">textarea</span> &#123; <span class="attribute">resize</span>:none; &#125;</span><br><span class="line">  <span class="selector-tag">input</span>,<span class="selector-tag">textarea</span>&#123;<span class="attribute">background</span>: none; <span class="attribute">border</span>: none;&#125;</span><br><span class="line">  <span class="selector-tag">table</span> &#123; <span class="attribute">border-collapse</span>:collapse; &#125;</span><br><span class="line">  <span class="selector-tag">body</span> &#123; <span class="attribute">color</span>:<span class="number">#333</span>; <span class="attribute">font</span>:<span class="number">12px</span>/<span class="number">20px</span> <span class="string">"SimSun"</span>,<span class="string">"宋体"</span>,<span class="string">"Arial Narrow"</span>,HELVETICA; <span class="attribute">background</span>:<span class="number">#fff</span>; &#125;</span><br><span class="line">  <span class="selector-tag">a</span> &#123; <span class="attribute">color</span>:<span class="number">#666</span>; <span class="attribute">text-decoration</span>:none; &#125;</span><br><span class="line">  <span class="attribute">a</span>:visited &#123; <span class="attribute">color</span>:<span class="number">#666</span>; &#125;</span><br><span class="line">  <span class="attribute">a</span>:hover, <span class="attribute">a</span>:active, <span class="attribute">a</span>:focus &#123; <span class="attribute">color</span>:<span class="number">#ff8400</span>; <span class="attribute">text-decoration</span>:underline; &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//去除a和label的虚线</span></span><br><span class="line"><span class="selector-class">.remove_dotted</span>()&#123;</span><br><span class="line">  <span class="selector-tag">a</span>,<span class="selector-tag">label</span> &#123;<span class="attribute">blr</span>:<span class="string">~'expression(this.onFocus=this.blur())'</span>&#125;</span><br><span class="line">  <span class="selector-tag">a</span>,<span class="selector-tag">label</span> &#123;<span class="attribute">outline</span>:none;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//浮动</span></span><br><span class="line"><span class="selector-class">.fl</span>(<span class="variable">@f</span>:left;)&#123;</span><br><span class="line">    <span class="attribute">float</span>: <span class="variable">@f</span>;</span><br><span class="line">    <span class="attribute">display</span>: inline;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.fr</span>(<span class="variable">@f</span>:right)&#123;</span><br><span class="line">  <span class="attribute">float</span>: <span class="variable">@f</span>;</span><br><span class="line">  <span class="attribute">display</span>: inline;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//定位</span></span><br><span class="line"><span class="selector-class">.rel</span>(<span class="variable">@rel</span>:relative)&#123;</span><br><span class="line">  <span class="attribute">position</span>: <span class="variable">@rel</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.abs</span>(<span class="variable">@abs</span>:absolute)&#123;</span><br><span class="line">  <span class="attribute">position</span>: <span class="variable">@abs</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.fix</span>(<span class="variable">@fix</span>:fixed)&#123;</span><br><span class="line">  <span class="attribute">position</span>: <span class="variable">@fix</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//全局定位</span></span><br><span class="line"><span class="selector-class">.pos</span> (r)&#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.pos</span> (a)&#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.pos</span> (f)&#123;</span><br><span class="line">  <span class="attribute">position</span>: fixed;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.pos-box</span>(<span class="variable">@w</span>:<span class="number">500px</span>,<span class="variable">@h</span>:<span class="number">400px</span>,<span class="variable">@pos</span>:absolute)&#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="variable">@w</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="variable">@h</span>;</span><br><span class="line">  <span class="attribute">position</span>: <span class="variable">@pos</span>;</span><br><span class="line">  <span class="attribute">left</span>:<span class="number">0</span>;</span><br><span class="line">  <span class="attribute">top</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//定位居中</span></span><br><span class="line"><span class="selector-class">.pos-box-cc</span>(<span class="variable">@w</span>:<span class="number">600px</span>,<span class="variable">@h</span>:<span class="number">360px</span>,<span class="variable">@pos</span>:absolute)&#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="variable">@w</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="variable">@h</span>;</span><br><span class="line">  <span class="attribute">position</span>: <span class="variable">@pos</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">margin-left</span>: -<span class="variable">@w</span> / <span class="number">2</span>;</span><br><span class="line">  <span class="attribute">margin-top</span>: -<span class="variable">@h</span> / <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//布局</span></span><br><span class="line"><span class="selector-class">.bc</span>()&#123;</span><br><span class="line">  <span class="attribute">margin-left</span>: auto;</span><br><span class="line">  <span class="attribute">margin-right</span>: auto;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.bc-d</span>(<span class="variable">@w</span>:<span class="number">500px</span>)&#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="variable">@w</span>;</span><br><span class="line">  <span class="selector-class">.bc</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.wh</span>(<span class="variable">@w</span>)&#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="variable">@w</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="variable">@w</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.w-be-h</span>(<span class="variable">@w</span>)&#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="variable">@w</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="variable">@w</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.z-index</span>(<span class="variable">@index</span>:<span class="number">1</span>)&#123;</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="variable">@index</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//高度100%</span></span><br><span class="line"><span class="selector-class">.h100</span>()&#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//文字垂直居中</span></span><br><span class="line"><span class="selector-class">.txt-ver</span>(<span class="variable">@h</span>)&#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="variable">@h</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="variable">@h</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 同.txt-ver</span></span><br><span class="line"><span class="selector-class">.l-h</span>(<span class="variable">@h</span>)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="variable">@h</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="variable">@h</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//display</span></span><br><span class="line"><span class="selector-class">.d-b</span>()&#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.db</span>()&#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.d-i</span>()&#123;</span><br><span class="line">  <span class="attribute">display</span>: inline;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.di</span>()&#123;</span><br><span class="line">  <span class="attribute">display</span>: inline;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.d-ib</span>()&#123;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.dib</span>()&#123;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.d-ib7</span>()&#123;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  *<span class="attribute">display</span>: inline;</span><br><span class="line">  *<span class="attribute">zoom</span>:<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.dib7</span>()&#123;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  *<span class="attribute">display</span>: inline;</span><br><span class="line">  *<span class="attribute">zoom</span>:<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.d-t</span>()&#123;</span><br><span class="line">  <span class="attribute">display</span>:table;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.dt</span>()&#123;</span><br><span class="line">  <span class="attribute">display</span>:table;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.d-n</span>()&#123;</span><br><span class="line">  <span class="attribute">display</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.dn</span>()&#123;</span><br><span class="line">  <span class="attribute">display</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//font family</span></span><br><span class="line"><span class="selector-class">.font-apple</span>()&#123;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">'punctuation'</span>, <span class="string">'PingFangSC-Regular'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.font-all</span>()&#123;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">'punctuation'</span>, <span class="string">'PingFangSC-Regular'</span>, <span class="string">"Microsoft YaHei"</span>, <span class="string">"微软雅黑"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.font-fm</span>()&#123;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">"Microsoft Yahei"</span>,<span class="string">"微软雅黑"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.font-fs</span>()&#123;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">"SimSun"</span>,<span class="string">"宋体"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.font-fa</span>()&#123;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">"Arial"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.font-fv</span>()&#123;</span><br><span class="line">  <span class="attribute">font-family</span>:Verdana;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//font weight</span></span><br><span class="line"><span class="selector-class">.font-w700</span>()&#123;</span><br><span class="line">  <span class="attribute">font-weight</span>: <span class="number">700</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.font-wb</span>()&#123;</span><br><span class="line">  <span class="attribute">font-weight</span>: bold;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.font-w400</span>()&#123;</span><br><span class="line">  <span class="attribute">font-weight</span>: <span class="number">400</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.font-wn</span>()&#123;</span><br><span class="line">  <span class="attribute">font-weight</span>: normal;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//font size</span></span><br><span class="line"><span class="selector-class">.font-s</span>(<span class="variable">@p</span>: <span class="number">12px</span>)&#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="variable">@p</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.font-s0</span>()&#123;<span class="attribute">font-size</span>: <span class="number">0px</span>;&#125;</span><br><span class="line"><span class="selector-class">.font-s1</span>()&#123;<span class="attribute">font-size</span>: <span class="number">1px</span>;&#125;</span><br><span class="line"><span class="selector-class">.font-s2</span>()&#123;<span class="attribute">font-size</span>: <span class="number">2px</span>;&#125;</span><br><span class="line"><span class="selector-class">.font-s3</span>()&#123;<span class="attribute">font-size</span>: <span class="number">3px</span>;&#125;</span><br><span class="line"><span class="selector-class">.font-s4</span>()&#123;<span class="attribute">font-size</span>: <span class="number">4px</span>;&#125;</span><br><span class="line"><span class="selector-class">.font-s5</span>()&#123;<span class="attribute">font-size</span>: <span class="number">5px</span>;&#125;</span><br><span class="line"><span class="selector-class">.font-s6</span>()&#123;<span class="attribute">font-size</span>: <span class="number">6px</span>;&#125;</span><br><span class="line"><span class="selector-class">.font-s7</span>()&#123;<span class="attribute">font-size</span>: <span class="number">7px</span>;&#125;</span><br><span class="line"><span class="selector-class">.font-s8</span>()&#123;<span class="attribute">font-size</span>: <span class="number">8px</span>;&#125;</span><br><span class="line"><span class="selector-class">.font-s9</span>()&#123;<span class="attribute">font-size</span>: <span class="number">9px</span>;&#125;</span><br><span class="line"><span class="selector-class">.font-s10</span>()&#123;<span class="attribute">font-size</span>: <span class="number">10px</span>;&#125;</span><br><span class="line"><span class="selector-class">.font-s11</span>()&#123;<span class="attribute">font-size</span>: <span class="number">11px</span>;&#125;</span><br><span class="line"><span class="selector-class">.font-s12</span>()&#123;<span class="attribute">font-size</span>: <span class="number">12px</span>;&#125;</span><br><span class="line"><span class="selector-class">.font-s13</span>()&#123;<span class="attribute">font-size</span>: <span class="number">13px</span>;&#125;</span><br><span class="line"><span class="selector-class">.font-s14</span>()&#123;<span class="attribute">font-size</span>: <span class="number">14px</span>;&#125;</span><br><span class="line"><span class="selector-class">.font-s15</span>()&#123;<span class="attribute">font-size</span>: <span class="number">15px</span>;&#125;</span><br><span class="line"><span class="selector-class">.font-s16</span>()&#123;<span class="attribute">font-size</span>: <span class="number">16px</span>;&#125;</span><br><span class="line"><span class="selector-class">.font-s17</span>()&#123;<span class="attribute">font-size</span>: <span class="number">17px</span>;&#125;</span><br><span class="line"><span class="selector-class">.font-s18</span>()&#123;<span class="attribute">font-size</span>: <span class="number">18px</span>;&#125;</span><br><span class="line"><span class="selector-class">.font-s19</span>()&#123;<span class="attribute">font-size</span>: <span class="number">19px</span>;&#125;</span><br><span class="line"><span class="selector-class">.font-s20</span>()&#123;<span class="attribute">font-size</span>: <span class="number">20px</span>;&#125;</span><br><span class="line"><span class="selector-class">.font-s21</span>()&#123;<span class="attribute">font-size</span>: <span class="number">21px</span>;&#125;</span><br><span class="line"><span class="selector-class">.font-s22</span>()&#123;<span class="attribute">font-size</span>: <span class="number">22px</span>;&#125;</span><br><span class="line"><span class="selector-class">.font-s23</span>()&#123;<span class="attribute">font-size</span>: <span class="number">23px</span>;&#125;</span><br><span class="line"><span class="selector-class">.font-s24</span>()&#123;<span class="attribute">font-size</span>: <span class="number">24px</span>;&#125;</span><br><span class="line"><span class="selector-class">.font-s25</span>()&#123;<span class="attribute">font-size</span>: <span class="number">25px</span>;&#125;</span><br><span class="line"><span class="selector-class">.font-s26</span>()&#123;<span class="attribute">font-size</span>: <span class="number">26px</span>;&#125;</span><br><span class="line"><span class="selector-class">.font-s27</span>()&#123;<span class="attribute">font-size</span>: <span class="number">27px</span>;&#125;</span><br><span class="line"><span class="selector-class">.font-s28</span>()&#123;<span class="attribute">font-size</span>: <span class="number">28px</span>;&#125;</span><br><span class="line"><span class="selector-class">.font-s29</span>()&#123;<span class="attribute">font-size</span>: <span class="number">29px</span>;&#125;</span><br><span class="line"><span class="selector-class">.font-s30</span>()&#123;<span class="attribute">font-size</span>: <span class="number">30px</span>;&#125;</span><br><span class="line"><span class="selector-class">.font-s31</span>()&#123;<span class="attribute">font-size</span>: <span class="number">31px</span>;&#125;</span><br><span class="line"><span class="selector-class">.font-s32</span>()&#123;<span class="attribute">font-size</span>: <span class="number">32px</span>;&#125;</span><br><span class="line"><span class="selector-class">.font-s33</span>()&#123;<span class="attribute">font-size</span>: <span class="number">33px</span>;&#125;</span><br><span class="line"><span class="selector-class">.font-s34</span>()&#123;<span class="attribute">font-size</span>: <span class="number">34px</span>;&#125;</span><br><span class="line"><span class="selector-class">.font-s35</span>()&#123;<span class="attribute">font-size</span>: <span class="number">35px</span>;&#125;</span><br><span class="line"><span class="selector-class">.font-s36</span>()&#123;<span class="attribute">font-size</span>: <span class="number">36px</span>;&#125;</span><br><span class="line"><span class="selector-class">.font-s37</span>()&#123;<span class="attribute">font-size</span>: <span class="number">37px</span>;&#125;</span><br><span class="line"><span class="selector-class">.font-s38</span>()&#123;<span class="attribute">font-size</span>: <span class="number">38px</span>;&#125;</span><br><span class="line"><span class="selector-class">.font-s39</span>()&#123;<span class="attribute">font-size</span>: <span class="number">39px</span>;&#125;</span><br><span class="line"><span class="selector-class">.font-s40</span>()&#123;<span class="attribute">font-size</span>: <span class="number">40px</span>;&#125;</span><br><span class="line"><span class="selector-class">.font-s41</span>()&#123;<span class="attribute">font-size</span>: <span class="number">41px</span>;&#125;</span><br><span class="line"><span class="selector-class">.font-s42</span>()&#123;<span class="attribute">font-size</span>: <span class="number">42px</span>;&#125;</span><br><span class="line"><span class="selector-class">.font-s43</span>()&#123;<span class="attribute">font-size</span>: <span class="number">43px</span>;&#125;</span><br><span class="line"><span class="selector-class">.font-s44</span>()&#123;<span class="attribute">font-size</span>: <span class="number">44px</span>;&#125;</span><br><span class="line"><span class="selector-class">.font-s45</span>()&#123;<span class="attribute">font-size</span>: <span class="number">45px</span>;&#125;</span><br><span class="line"><span class="selector-class">.font-s46</span>()&#123;<span class="attribute">font-size</span>: <span class="number">46px</span>;&#125;</span><br><span class="line"><span class="selector-class">.font-s47</span>()&#123;<span class="attribute">font-size</span>: <span class="number">47px</span>;&#125;</span><br><span class="line"><span class="selector-class">.font-s48</span>()&#123;<span class="attribute">font-size</span>: <span class="number">48px</span>;&#125;</span><br><span class="line"><span class="selector-class">.font-s49</span>()&#123;<span class="attribute">font-size</span>: <span class="number">49px</span>;&#125;</span><br><span class="line"><span class="selector-class">.font-s50</span>()&#123;<span class="attribute">font-size</span>: <span class="number">50px</span>;&#125;</span><br><span class="line"><span class="selector-class">.font-s51</span>()&#123;<span class="attribute">font-size</span>: <span class="number">51px</span>;&#125;</span><br><span class="line"><span class="selector-class">.font-s52</span>()&#123;<span class="attribute">font-size</span>: <span class="number">52px</span>;&#125;</span><br><span class="line"><span class="selector-class">.font-s53</span>()&#123;<span class="attribute">font-size</span>: <span class="number">53px</span>;&#125;</span><br><span class="line"><span class="selector-class">.font-s54</span>()&#123;<span class="attribute">font-size</span>: <span class="number">54px</span>;&#125;</span><br><span class="line"><span class="selector-class">.font-s55</span>()&#123;<span class="attribute">font-size</span>: <span class="number">55px</span>;&#125;</span><br><span class="line"><span class="selector-class">.font-s56</span>()&#123;<span class="attribute">font-size</span>: <span class="number">56px</span>;&#125;</span><br><span class="line"><span class="selector-class">.font-s57</span>()&#123;<span class="attribute">font-size</span>: <span class="number">57px</span>;&#125;</span><br><span class="line"><span class="selector-class">.font-s58</span>()&#123;<span class="attribute">font-size</span>: <span class="number">58px</span>;&#125;</span><br><span class="line"><span class="selector-class">.font-s59</span>()&#123;<span class="attribute">font-size</span>: <span class="number">59px</span>;&#125;</span><br><span class="line"><span class="selector-class">.font-s60</span>()&#123;<span class="attribute">font-size</span>: <span class="number">60px</span>;&#125;</span><br><span class="line"><span class="selector-class">.font-s61</span>()&#123;<span class="attribute">font-size</span>: <span class="number">61px</span>;&#125;</span><br><span class="line"><span class="selector-class">.font-s62</span>()&#123;<span class="attribute">font-size</span>: <span class="number">62px</span>;&#125;</span><br><span class="line"><span class="selector-class">.font-s63</span>()&#123;<span class="attribute">font-size</span>: <span class="number">63px</span>;&#125;</span><br><span class="line"><span class="selector-class">.font-s64</span>()&#123;<span class="attribute">font-size</span>: <span class="number">64px</span>;&#125;</span><br><span class="line"><span class="selector-class">.font-s65</span>()&#123;<span class="attribute">font-size</span>: <span class="number">65px</span>;&#125;</span><br><span class="line"><span class="selector-class">.font-s66</span>()&#123;<span class="attribute">font-size</span>: <span class="number">66px</span>;&#125;</span><br><span class="line"><span class="selector-class">.font-s67</span>()&#123;<span class="attribute">font-size</span>: <span class="number">67px</span>;&#125;</span><br><span class="line"><span class="selector-class">.font-s68</span>()&#123;<span class="attribute">font-size</span>: <span class="number">68px</span>;&#125;</span><br><span class="line"><span class="selector-class">.font-s69</span>()&#123;<span class="attribute">font-size</span>: <span class="number">69px</span>;&#125;</span><br><span class="line"><span class="selector-class">.font-s70</span>()&#123;<span class="attribute">font-size</span>: <span class="number">70px</span>;&#125;</span><br><span class="line"><span class="selector-class">.font-s71</span>()&#123;<span class="attribute">font-size</span>: <span class="number">71px</span>;&#125;</span><br><span class="line"><span class="selector-class">.font-s72</span>()&#123;<span class="attribute">font-size</span>: <span class="number">72px</span>;&#125;</span><br><span class="line"><span class="selector-class">.font-s73</span>()&#123;<span class="attribute">font-size</span>: <span class="number">73px</span>;&#125;</span><br><span class="line"><span class="selector-class">.font-s74</span>()&#123;<span class="attribute">font-size</span>: <span class="number">74px</span>;&#125;</span><br><span class="line"><span class="selector-class">.font-s75</span>()&#123;<span class="attribute">font-size</span>: <span class="number">75px</span>;&#125;</span><br><span class="line"><span class="selector-class">.font-s76</span>()&#123;<span class="attribute">font-size</span>: <span class="number">76px</span>;&#125;</span><br><span class="line"><span class="selector-class">.font-s77</span>()&#123;<span class="attribute">font-size</span>: <span class="number">77px</span>;&#125;</span><br><span class="line"><span class="selector-class">.font-s78</span>()&#123;<span class="attribute">font-size</span>: <span class="number">78px</span>;&#125;</span><br><span class="line"><span class="selector-class">.font-s79</span>()&#123;<span class="attribute">font-size</span>: <span class="number">79px</span>;&#125;</span><br><span class="line"><span class="selector-class">.font-s80</span>()&#123;<span class="attribute">font-size</span>: <span class="number">80px</span>;&#125;</span><br><span class="line"><span class="selector-class">.font-s81</span>()&#123;<span class="attribute">font-size</span>: <span class="number">81px</span>;&#125;</span><br><span class="line"><span class="selector-class">.font-s82</span>()&#123;<span class="attribute">font-size</span>: <span class="number">82px</span>;&#125;</span><br><span class="line"><span class="selector-class">.font-s83</span>()&#123;<span class="attribute">font-size</span>: <span class="number">83px</span>;&#125;</span><br><span class="line"><span class="selector-class">.font-s84</span>()&#123;<span class="attribute">font-size</span>: <span class="number">84px</span>;&#125;</span><br><span class="line"><span class="selector-class">.font-s85</span>()&#123;<span class="attribute">font-size</span>: <span class="number">85px</span>;&#125;</span><br><span class="line"><span class="selector-class">.font-s86</span>()&#123;<span class="attribute">font-size</span>: <span class="number">86px</span>;&#125;</span><br><span class="line"><span class="selector-class">.font-s87</span>()&#123;<span class="attribute">font-size</span>: <span class="number">87px</span>;&#125;</span><br><span class="line"><span class="selector-class">.font-s88</span>()&#123;<span class="attribute">font-size</span>: <span class="number">88px</span>;&#125;</span><br><span class="line"><span class="selector-class">.font-s89</span>()&#123;<span class="attribute">font-size</span>: <span class="number">89px</span>;&#125;</span><br><span class="line"><span class="selector-class">.font-s90</span>()&#123;<span class="attribute">font-size</span>: <span class="number">90px</span>;&#125;</span><br><span class="line"><span class="selector-class">.font-s91</span>()&#123;<span class="attribute">font-size</span>: <span class="number">91px</span>;&#125;</span><br><span class="line"><span class="selector-class">.font-s92</span>()&#123;<span class="attribute">font-size</span>: <span class="number">92px</span>;&#125;</span><br><span class="line"><span class="selector-class">.font-s93</span>()&#123;<span class="attribute">font-size</span>: <span class="number">93px</span>;&#125;</span><br><span class="line"><span class="selector-class">.font-s94</span>()&#123;<span class="attribute">font-size</span>: <span class="number">94px</span>;&#125;</span><br><span class="line"><span class="selector-class">.font-s95</span>()&#123;<span class="attribute">font-size</span>: <span class="number">95px</span>;&#125;</span><br><span class="line"><span class="selector-class">.font-s96</span>()&#123;<span class="attribute">font-size</span>: <span class="number">96px</span>;&#125;</span><br><span class="line"><span class="selector-class">.font-s97</span>()&#123;<span class="attribute">font-size</span>: <span class="number">97px</span>;&#125;</span><br><span class="line"><span class="selector-class">.font-s98</span>()&#123;<span class="attribute">font-size</span>: <span class="number">98px</span>;&#125;</span><br><span class="line"><span class="selector-class">.font-s99</span>()&#123;<span class="attribute">font-size</span>: <span class="number">99px</span>;&#125;</span><br><span class="line"><span class="selector-class">.font-s100</span>()&#123;<span class="attribute">font-size</span>: <span class="number">100px</span>;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//background</span></span><br><span class="line"><span class="selector-class">.bg</span>(<span class="variable">@url</span>)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attribute">background</span>: url(<span class="string">@url</span>) <span class="number">0</span> <span class="number">0</span> repeat;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.bg-m</span>(<span class="variable">@url</span>,<span class="variable">@x</span>:<span class="number">0</span>,<span class="variable">@y</span>:<span class="number">0</span>,<span class="variable">@repeat</span>:no-repeat)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attribute">background</span>: url(<span class="string">@url</span>) <span class="variable">@x</span> <span class="variable">@y</span> <span class="variable">@repeat</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.bgi</span>(<span class="variable">@url</span>)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attribute">background-image</span>: url(<span class="string">@url</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.bgp</span>(<span class="variable">@x</span>:<span class="number">0</span>,<span class="variable">@y</span>:<span class="number">0</span>)&#123;</span><br><span class="line">  <span class="attribute">background-position</span>: <span class="variable">@x</span> <span class="variable">@y</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.bgr-r</span>()&#123;</span><br><span class="line">  <span class="attribute">background-repeat</span>: repeat;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.bgr-x</span>()&#123;</span><br><span class="line">  <span class="attribute">background-repeat</span>: repeat-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.bgr-y</span>()&#123;</span><br><span class="line">  <span class="attribute">background-repeat</span>: repeat-y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.bgr-no</span>()&#123;</span><br><span class="line">  <span class="attribute">background-repeat</span>: no-repeat;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.bga-fix</span>()&#123;</span><br><span class="line">  <span class="attribute">background-attachment</span>: fixed;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//lis</span></span><br><span class="line"><span class="selector-class">.list-sn</span>()&#123;</span><br><span class="line">  <span class="attribute">list-style</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//text</span></span><br><span class="line"><span class="selector-class">.text-n</span>(<span class="variable">@p</span>: none)&#123;</span><br><span class="line">  <span class="attribute">text-decoration</span>: <span class="variable">@p</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//添加下划线</span></span><br><span class="line"><span class="selector-class">.tu</span>()&#123;</span><br><span class="line">  <span class="attribute">text-decoration</span>: underline;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.tn</span>()&#123;</span><br><span class="line">  <span class="attribute">text-decoration</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.tl</span>()&#123;</span><br><span class="line">  <span class="attribute">text-align</span>: left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.text-l</span>()&#123;</span><br><span class="line">  <span class="attribute">text-align</span>: left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.tc</span>()&#123;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.text-c</span>()&#123;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.tr</span>()&#123;</span><br><span class="line">  <span class="attribute">text-align</span>: right;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.text-r</span>()&#123;</span><br><span class="line">  <span class="attribute">text-align</span>: right;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//特殊需求</span></span><br><span class="line"><span class="selector-class">.min-width</span>(<span class="variable">@width</span>)&#123;</span><br><span class="line">  <span class="attribute">min-width</span>: <span class="variable">@width</span>;</span><br><span class="line">  <span class="attribute">_width</span>:<span class="variable">@width</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.max-width</span>(<span class="variable">@width</span>,<span class="variable">@id</span>)&#123;</span><br><span class="line">  <span class="attribute">max-width</span>: <span class="variable">@width</span>;</span><br><span class="line">  <span class="attribute">_width</span>:<span class="string">~'expression(document.getElementById("@&#123;id&#125;").offsetHeight&gt;parseInt("@&#123;width&#125;")?"@&#123;width&#125;": "auto")'</span>;</span><br><span class="line">  <span class="attribute">overflow</span>:hidden;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.min-height</span>(<span class="variable">@height</span>)&#123;</span><br><span class="line">  <span class="attribute">min-height</span>: <span class="variable">@height</span>;</span><br><span class="line">  <span class="attribute">_height</span>:<span class="variable">@height</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.max-height</span>(<span class="variable">@height</span>,<span class="variable">@id</span>)&#123;</span><br><span class="line">  <span class="attribute">max-height</span>: <span class="variable">@height</span>;</span><br><span class="line">  <span class="attribute">_height</span>:<span class="string">~'expression(document.getElementById("@&#123;id&#125;").offsetHeight&gt;parseInt("@&#123;height&#125;")?"@&#123;height&#125;": "auto")'</span>;</span><br><span class="line">  <span class="attribute">overflow</span>:hidden;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//三角</span></span><br><span class="line"><span class="selector-class">.triangle</span> (top,<span class="variable">@w</span>:<span class="number">5px</span>,<span class="variable">@color</span>:<span class="number">#ccc</span>)&#123;</span><br><span class="line">  <span class="attribute">border-style</span>:solid dashed dashed dashed;</span><br><span class="line">  <span class="attribute">border-color</span>:<span class="variable">@color</span> transparent transparent transparent;</span><br><span class="line">  <span class="attribute">border-width</span>:<span class="variable">@w</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.triangle</span> (right,<span class="variable">@w</span>:<span class="number">5px</span>,<span class="variable">@color</span>:<span class="number">#ccc</span>)&#123;</span><br><span class="line">  <span class="attribute">border-style</span>:dashed solid dashed dashed;</span><br><span class="line">  <span class="attribute">border-color</span>:transparent <span class="variable">@color</span> transparent transparent;</span><br><span class="line">  <span class="attribute">border-width</span>:<span class="variable">@w</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.triangle</span> (bottom,<span class="variable">@w</span>:<span class="number">5px</span>,<span class="variable">@color</span>:<span class="number">#ccc</span>)&#123;</span><br><span class="line">  <span class="attribute">border-style</span>:dashed dashed solid dashed;</span><br><span class="line">  <span class="attribute">border-color</span>:transparent transparent <span class="variable">@color</span> transparent;</span><br><span class="line">  <span class="attribute">border-width</span>:<span class="variable">@w</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.triangle</span> (left,<span class="variable">@w</span>:<span class="number">5px</span>,<span class="variable">@color</span>:<span class="number">#ccc</span>)&#123;</span><br><span class="line">  <span class="attribute">border-style</span>:dashed dashed dashed solid;</span><br><span class="line">  <span class="attribute">border-color</span>:transparent transparent transparent <span class="variable">@color</span>;</span><br><span class="line">  <span class="attribute">border-width</span>:<span class="variable">@w</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.triangle</span> (<span class="variable">@_</span>,<span class="variable">@w</span>:<span class="number">5px</span>,<span class="variable">@color</span>:<span class="number">#ccc</span>)&#123;</span><br><span class="line">  <span class="selector-class">.triangle-compatible</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//边框附加内容</span></span><br><span class="line"><span class="selector-class">.triangle-compatible</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">0</span>; <span class="attribute">height</span>: <span class="number">0</span>; <span class="attribute">overflow</span>:hidden;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//单独方向</span></span><br><span class="line"><span class="selector-class">.triangle-b</span>(<span class="variable">@w</span>:<span class="number">5px</span>,<span class="variable">@color</span>:<span class="number">#ccc</span>)&#123;</span><br><span class="line">  <span class="attribute">border-style</span>:solid dashed dashed dashed;</span><br><span class="line">  <span class="attribute">border-color</span>:<span class="variable">@color</span> transparent transparent transparent;</span><br><span class="line">  <span class="attribute">border-width</span>:<span class="variable">@w</span>;</span><br><span class="line">  <span class="selector-class">.triangle-compatible</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.triangle-l</span>(<span class="variable">@w</span>:<span class="number">5px</span>,<span class="variable">@color</span>:<span class="number">#ccc</span>)&#123;</span><br><span class="line">  <span class="attribute">border-style</span>:dashed solid dashed dashed;</span><br><span class="line">  <span class="attribute">border-color</span>:transparent <span class="variable">@color</span> transparent transparent;</span><br><span class="line">  <span class="attribute">border-width</span>:<span class="variable">@w</span>;</span><br><span class="line">  <span class="selector-class">.triangle-compatible</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.triangle-t</span>(<span class="variable">@w</span>:<span class="number">5px</span>,<span class="variable">@color</span>:<span class="number">#ccc</span>)&#123;</span><br><span class="line">  <span class="attribute">border-style</span>:dashed dashed solid dashed;</span><br><span class="line">  <span class="attribute">border-color</span>:transparent transparent <span class="variable">@color</span> transparent;</span><br><span class="line">  <span class="attribute">border-width</span>:<span class="variable">@w</span>;</span><br><span class="line">  <span class="selector-class">.triangle-compatible</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.triangle-r</span>(<span class="variable">@w</span>:<span class="number">5px</span>,<span class="variable">@color</span>:<span class="number">#ccc</span>)&#123;</span><br><span class="line">  <span class="attribute">border-style</span>:dashed dashed dashed solid;</span><br><span class="line">  <span class="attribute">border-color</span>:transparent transparent transparent <span class="variable">@color</span>;</span><br><span class="line">  <span class="attribute">border-width</span>:<span class="variable">@w</span>;</span><br><span class="line">  <span class="selector-class">.triangle-compatible</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//透明度</span></span><br><span class="line"><span class="selector-class">.opa</span>(<span class="variable">@opacity</span>: <span class="number">80</span>) &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="variable">@opacity</span> / <span class="number">100</span>;</span><br><span class="line">  <span class="attribute">filter</span>: <span class="string">~"alpha(opacity=@&#123;opacity&#125;)"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.rgba</span>(<span class="variable">@red</span>, <span class="variable">@green</span>, <span class="variable">@blue</span>, <span class="variable">@alpha</span>:<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="variable">@filtercolor:</span><span class="built_in">`(_f = function(d)&#123; var v = (parseInt(d)|0).toString(16);return v.length&lt;2 ? "0"+v : v;&#125;,'#'+_f(@&#123;alpha&#125;*255) + _f(@&#123;red&#125;) + _f(@&#123;green&#125;)+ _f(@&#123;blue&#125;))`</span>;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">background-color</span>: <span class="string">~'rgba(@&#123;red&#125;,@&#123;green&#125;,@&#123;blue&#125;,@&#123;alpha&#125;)'</span>;</span><br><span class="line">        <span class="attribute">-ms-filter</span>:<span class="string">~"progid:DXImageTransform.Microsoft.gradient(startColorstr='@&#123;filtercolor&#125;',endColorstr='@&#123;filtercolor&#125;')"</span>;</span><br><span class="line">        <span class="attribute">filter</span>:<span class="string">~"progid:DXImageTransform.Microsoft.gradient(startColorstr='@&#123;filtercolor&#125;',endColorstr='@&#123;filtercolor&#125;')"</span>;        </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.clearfix</span>() &#123;</span><br><span class="line">  *<span class="attribute">zoom</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="selector-tag">&amp;</span><span class="selector-pseudo">:before</span>,</span><br><span class="line">  <span class="selector-tag">&amp;</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: table;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">""</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-tag">&amp;</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">    <span class="attribute">clear</span>: both;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//文字省略号</span></span><br><span class="line"><span class="comment">// @substract单位为%</span></span><br><span class="line"><span class="selector-class">.ellipsis-basic</span>()&#123;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="attribute">text-overflow</span>: ellipsis;</span><br><span class="line">  <span class="attribute">white-space</span>: nowrap;</span><br><span class="line">  <span class="selector-class">.font-fa</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.ellipsis</span>(<span class="variable">@substract</span>:<span class="number">0</span>) &#123;</span><br><span class="line">  <span class="selector-class">.ellipsis-basic</span>();</span><br><span class="line">  <span class="attribute">width</span>:<span class="number">100%</span> - <span class="variable">@substract</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;平常项目用到less样式封装，zless库（常用的less公共样式库）&lt;br&gt;
    
    </summary>
    
      <category term="css" scheme="https://chongdee.github.io/categories/css/"/>
    
    
      <category term="css" scheme="https://chongdee.github.io/tags/css/"/>
    
      <category term="less" scheme="https://chongdee.github.io/tags/less/"/>
    
  </entry>
  
  <entry>
    <title>Less 编码规范</title>
    <link href="https://chongdee.github.io/2018/11/04/Less/Less-%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83/"/>
    <id>https://chongdee.github.io/2018/11/04/Less/Less-编码规范/</id>
    <published>2018-11-04T07:38:00.000Z</published>
    <updated>2021-05-08T17:03:38.062Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2 id="代码组织"><a href="#代码组织" class="headerlink" title="代码组织"></a>代码组织</h2><p>代码必须（MUST）按如下形式按顺序组织：</p><ul><li>@import</li><li>变量声明</li><li>样式声明<figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ✓</span></span><br><span class="line"><span class="keyword">@import</span> <span class="string">"est/all.less"</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">@default-text-color:</span> <span class="number">#333</span>;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.page</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">960px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="import-语句"><a href="#import-语句" class="headerlink" title="@import 语句"></a>@import 语句</h2><p>@import 语句引用的文件必须（MUST）写在一对引号内，.less 后缀不得（MUST NOT）省略（与引入 CSS 文件时的路径格式一致）。引号使用 ‘ 和 “ 均可，但在同一项目内必须（MUST）统一。</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ✗</span></span><br><span class="line">@<span class="keyword">import</span> <span class="string">'est/all'</span>;</span><br><span class="line">@<span class="keyword">import</span> <span class="string">"my/mixins.less"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ✓</span></span><br><span class="line">@<span class="keyword">import</span> <span class="string">"est/all.less"</span>;</span><br><span class="line">@<span class="keyword">import</span> <span class="string">"my/mixins.less"</span>;</span><br></pre></td></tr></table></figure><h2 id="空格"><a href="#空格" class="headerlink" title="空格"></a>空格</h2><p>属性、变量<br>选择器和 { 之间必须（MUST）保留一个空格。</p><p>属性名后的冒号（:）与属性值之间必须（MUST）保留一个空格，冒号前不得（MUST NOT）保留空格。</p><p>定义变量时冒号（:）与变量值之间必须（MUST）保留一个空格，冒号前不得（MUST NOT）保留空格。</p><p>在用逗号（,）分隔的列表（Less 函数参数列表、以 , 分隔的属性值等）中，逗号后必须（MUST）保留一个空格，逗号前不得（MUST NOT）保留空格。</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ✗</span></span><br><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">    <span class="variable">@w:</span><span class="number">50px</span>;</span><br><span class="line">    <span class="variable">@h :</span><span class="number">30px</span>;</span><br><span class="line">    <span class="attribute">width</span>:<span class="variable">@w</span>;</span><br><span class="line">    <span class="attribute">height </span>:<span class="variable">@h</span>;</span><br><span class="line">    <span class="attribute">color</span>: rgba(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>,.<span class="number">3</span>);</span><br><span class="line">    <span class="attribute">transition</span>: width <span class="number">1s</span>,height <span class="number">3s</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ✓</span></span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="variable">@w:</span> <span class="number">50px</span>;</span><br><span class="line">    <span class="variable">@h:</span> <span class="number">30px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="variable">@w</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="variable">@h</span>;</span><br><span class="line">    <span class="attribute">transition</span>: width <span class="number">1s</span>, height <span class="number">3s</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="运算"><a href="#运算" class="headerlink" title="运算"></a>运算</h2><ul><li>/ - / * / / 四个运算符两侧必须（MUST）保留一个空格。+ / - 两侧的操作数必须（MUST）有相同的单位，如果其中一个是变量，另一个数值必须（MUST）书写单位。<figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ✗</span></span><br><span class="line"><span class="variable">@a:</span> <span class="number">200px</span>;</span><br><span class="line"><span class="variable">@b:</span> (<span class="variable">@a</span>+<span class="number">100</span>)*<span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ✓</span></span><br><span class="line"><span class="variable">@a:</span> <span class="number">200px</span>;</span><br><span class="line"><span class="variable">@b:</span> (<span class="variable">@a</span> + <span class="number">100px</span>) * <span class="number">2</span>;</span><br></pre></td></tr></table></figure></li></ul><h2 id="混入（Mixin）"><a href="#混入（Mixin）" class="headerlink" title="混入（Mixin）"></a>混入（Mixin）</h2><p>在定义 mixin 时，如果 mixin 名称不是一个需要使用的 className，必须（MUST）加上括号，否则即使不被调用也会输出到 CSS 中。<br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ✗</span></span><br><span class="line">.big-<span class="built_in">text</span> &#123;</span><br><span class="line">    font-<span class="built_in">size</span>: <span class="number">2</span>em;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">h3 &#123;</span><br><span class="line">    .big-<span class="built_in">text</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ✓</span></span><br><span class="line">.big-<span class="built_in">text</span>() &#123;</span><br><span class="line">    font-<span class="built_in">size</span>: <span class="number">2</span>em;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">h3 &#123;</span><br><span class="line">    .big-<span class="built_in">text</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>如果混入的是本身不输出内容的 mixin，必须（MUST）在 mixin 后添加括号（即使不传参数），以区分这是否是一个 className（修改以后是否会影响 HTML）。<br><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">//</span> ✗</span><br><span class="line"><span class="string">.box</span> &#123;</span><br><span class="line">    <span class="string">.size</span><span class="params">(30px,20px)</span>;</span><br><span class="line">    <span class="string">.clearfix</span> <span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="string">//</span> ✓</span><br><span class="line"><span class="string">.box</span> &#123;</span><br><span class="line">    <span class="string">.size</span><span class="params">(30px, 20px)</span>;</span><br><span class="line">    <span class="string">.clearfix</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><blockquote><p>Mixin 的参数分隔符使用 , 和 ; 均可，但在同一项目中必须（MUST）保持统一。</p></blockquote><h2 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h2><p>当多个选择器共享一个声明块时，每个选择器声明必须（MUST）独占一行。<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ✗</span></span><br><span class="line"><span class="selector-tag">h1</span>, <span class="selector-tag">h2</span>, <span class="selector-tag">h3</span> &#123;</span><br><span class="line">    <span class="attribute">font-weight</span>: <span class="number">700</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ✓</span></span><br><span class="line"><span class="selector-tag">h1</span>,</span><br><span class="line"><span class="selector-tag">h2</span>,</span><br><span class="line"><span class="selector-tag">h3</span> &#123;</span><br><span class="line">    <span class="attribute">font-weight</span>: <span class="number">700</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><blockquote><p>Class 命名不得以样式信息进行描述，如 .float-right、text-red 等。</p></blockquote><h2 id="省略与缩写"><a href="#省略与缩写" class="headerlink" title="省略与缩写"></a>省略与缩写</h2><h3 id="缩写"><a href="#缩写" class="headerlink" title="缩写"></a>缩写</h3><p>多个属性定义可以使用缩写时， 尽量（SHOULD）使用缩写。缩写更清晰字节数更少。常见缩写有 margin、border、padding、font、list-style 等。在书写时必须（MUST）考量缩写展开后是否有不需要覆盖的属性内容被修改，从而带来副作用。</p><h3 id="数值"><a href="#数值" class="headerlink" title="数值"></a>数值</h3><p>对于处于 (0, 1) 范围内的数值，小数点前的 0 可以（MAY）省略，同一项目中必须（MUST）保持一致。<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ✗</span></span><br><span class="line">transition-duration: <span class="number">0.5s</span>, <span class="number">.7s</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ✓</span></span><br><span class="line">transition-duration: <span class="number">.5s</span>, <span class="number">.7s</span>;</span><br></pre></td></tr></table></figure></p><h3 id="0-值"><a href="#0-值" class="headerlink" title="0 值"></a>0 值</h3><p>当属性值为 0 时，必须（MUST）省略可省的单位（长度单位如 px、em，不包括时间、角度等如 s、deg）。<br><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ✗</span></span><br><span class="line"><span class="attribute">margin-top</span>: <span class="number">0px</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ✓</span></span><br><span class="line"><span class="attribute">margin-top</span>: <span class="number">0</span>;</span><br></pre></td></tr></table></figure></p><h3 id="颜色"><a href="#颜色" class="headerlink" title="颜色"></a>颜色</h3><p>颜色定义必须（MUST）使用 #rrggbb 格式定义，并在可能时尽量（SHOULD）缩写为 #rgb 形式，且避免直接使用颜色名称与 rgb() 表达式。</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ✗</span></span><br><span class="line"><span class="attribute">border-color</span>: red;</span><br><span class="line"><span class="attribute">color</span>: rgb(<span class="number">254</span>, <span class="number">254</span>, <span class="number">254</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// ✓</span></span><br><span class="line"><span class="attribute">border-color</span>: <span class="number">#f00</span>;</span><br><span class="line"><span class="attribute">color</span>: <span class="number">#fefefe</span>;</span><br></pre></td></tr></table></figure><h3 id="私有属性前缀"><a href="#私有属性前缀" class="headerlink" title="私有属性前缀"></a>私有属性前缀</h3><p>同一属性有不同私有前缀的，尽量（SHOULD）按前缀长度降序书写，标准形式必须（MUST）写在最后。且这一组属性以第一条的位置为准，尽量（SHOULD）按冒号的位置对齐。<br><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ✓</span></span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    -webkit-<span class="attribute">transform</span>: rotate(<span class="number">30deg</span>);</span><br><span class="line">       -moz-<span class="attribute">transform</span>: rotate(<span class="number">30deg</span>);</span><br><span class="line">        -ms-<span class="attribute">transform</span>: rotate(<span class="number">30deg</span>);</span><br><span class="line">         -o-<span class="attribute">transform</span>: rotate(<span class="number">30deg</span>);</span><br><span class="line">            <span class="attribute">transform</span>: rotate(<span class="number">30deg</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>可以（MAY）在无其他更好解决办法时使用 CSS hack，并且尽量（SHOULD）使用简单的属性名 hack 如 _zoom、*margin。</p><p>可以（MAY）但谨慎使用 IE 滤镜。需要注意的是，IE 滤镜中图片的 URL 是以页面路径作为相对目录，而不是 CSS 文件路径。</p><h2 id="嵌套和缩进"><a href="#嵌套和缩进" class="headerlink" title="嵌套和缩进"></a>嵌套和缩进</h2><p>必须（MUST）采用 4 个空格为一次缩进， 不得（MUST NOT）采用 TAB 作为缩进。</p><p>嵌套的声明块前必须（MUST）增加一次缩进，有多个声明块共享命名空间时尽量（SHOULD）嵌套书写，避免选择器的重复。</p><p>但是需注意的是，尽量（SHOULD）仅在必须区分上下文时才引入嵌套关系（在嵌套书写前先考虑如果不能嵌套，会如何书写选择器）。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ✗</span></span><br><span class="line"><span class="selector-class">.main</span> <span class="selector-class">.title</span> &#123;</span><br><span class="line">  <span class="attribute">font-weight</span>: <span class="number">700</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.main</span> <span class="selector-class">.content</span> &#123;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">1.5</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.main</span> &#123;</span><br><span class="line"><span class="selector-class">.warning</span> &#123;</span><br><span class="line">  <span class="attribute">font-weight</span>: <span class="number">700</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.comment-form</span> &#123;</span><br><span class="line">    <span class="selector-id">#comment</span>:invalid &#123;</span><br><span class="line">      <span class="attribute">color</span>: red;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ✓</span></span><br><span class="line"><span class="selector-class">.main</span> &#123;</span><br><span class="line">    <span class="selector-class">.title</span> &#123;</span><br><span class="line">        <span class="attribute">font-weight</span>: <span class="number">700</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.content</span> &#123;</span><br><span class="line">        <span class="attribute">line-height</span>: <span class="number">1.5</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.warning</span> &#123;</span><br><span class="line">        <span class="attribute">font-weight</span>: <span class="number">700</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#comment</span>:invalid &#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>Less 的变量值总是以同一作用域下最后一个同名变量为准，务必注意后面的设定会覆盖所有之前的设定。</p><p>变量命名必须（MUST）采用 @foo-bar 形式，不得（MUST NOT）使用 @fooBar 形式。</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ✗</span></span><br><span class="line"><span class="variable">@sidebarWidth:</span> <span class="number">200px</span>;</span><br><span class="line"><span class="variable">@width:</span><span class="number">800px</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ✓</span></span><br><span class="line"><span class="variable">@sidebar-width:</span> <span class="number">200px</span>;</span><br><span class="line"><span class="variable">@width:</span> <span class="number">800px</span>;</span><br></pre></td></tr></table></figure><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p>使用继承时，如果在声明块内书写 :extend 语句，必须（MUST）写在开头：<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ✗</span></span><br><span class="line"><span class="selector-class">.sub</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">    <span class="selector-tag">&amp;</span><span class="selector-pseudo">:extend(.mod</span> <span class="keyword">all</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ✓</span></span><br><span class="line"><span class="selector-class">.sub</span> &#123;</span><br><span class="line">    <span class="selector-tag">&amp;</span><span class="selector-pseudo">:extend(.mod</span> <span class="keyword">all</span>);</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="命名空间"><a href="#命名空间" class="headerlink" title="命名空间"></a>命名空间</h2><p>变量和 mixin 在命名时必须（MUST）遵循如下原则：</p><ul><li>一个项目只能引入一个无命名前缀的基础样式库（如 est）</li><li>业务代码和其他被引入的样式代码中，变量和 mixin 必须有项目或库的前缀<h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2>在进行字符串转义时，使用 ~”” 表达式与 e() 函数均可，但在同一项目中必须（MUST）保持一致。</li></ul><p>字符串两侧的引号必须（MUST）使用 “。</p><h2 id="JS-表达式"><a href="#JS-表达式" class="headerlink" title="JS 表达式"></a>JS 表达式</h2><p>可以（MAY）使用 JS 表达式（~``）生成属性值或变量，其中包含的字符串两侧的引号尽量（SHOULD）使用单引号（’）。</p><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p>单行注释尽量（SHOULD）使用 // 方式。</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Hide everything</span></span><br><span class="line"><span class="comment">* &#123;</span></span><br><span class="line">    <span class="keyword">display</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=&quot;\assets\js\APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;h2 id=&quot;代码组织&quot;&gt;&lt;a href=&quot;#代码组织&quot; class=&quot;headerlink&quot; title=&quot;代码组织&quot;&gt;&lt;/a&gt;代码组织&lt;/h2&gt;&lt;p&gt;代码必须（MUST）按如
      
    
    </summary>
    
      <category term="css" scheme="https://chongdee.github.io/categories/css/"/>
    
    
      <category term="css" scheme="https://chongdee.github.io/tags/css/"/>
    
      <category term="代码规范" scheme="https://chongdee.github.io/tags/%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83/"/>
    
  </entry>
  
  <entry>
    <title>Airbnb CSS / Sass 指南</title>
    <link href="https://chongdee.github.io/2018/11/04/%E8%A7%84%E8%8C%83/Airbnb-CSS-Sass-%E6%8C%87%E5%8D%97/"/>
    <id>https://chongdee.github.io/2018/11/04/规范/Airbnb-CSS-Sass-指南/</id>
    <published>2018-11-04T06:44:45.000Z</published>
    <updated>2021-05-08T16:59:05.846Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2 id="规则声明"><a href="#规则声明" class="headerlink" title="规则声明"></a>规则声明</h2><p>我们把一个（或一组）选择器和一组属性称之为 “规则声明”。举个例子：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.listing</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">18px</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">1.2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><a id="more"></a><h2 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h2><p>在规则声明中，“选择器” 负责选取 DOM 树中的元素，这些元素将被定义的属性所修饰。选择器可以匹配 HTML 元素，也可以匹配一个元素的类名、ID, 或者元素拥有的属性。以下是选择器的例子：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.my-element-class</span> &#123;</span><br><span class="line">  <span class="comment">/* ... */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-attr">[aria-hidden]</span> &#123;</span><br><span class="line">  <span class="comment">/* ... */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h2><p>最后，属性决定了规则声明里被选择的元素将得到何种样式。属性以键值对形式存在，一个规则声明可以包含一或多个属性定义。以下是属性定义的例子：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* some selector */</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#f1f1f1</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#333</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h2><h3 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h3><ul><li>使用 2 个空格作为缩进。</li><li>类名建议使用破折号代替驼峰法。如果你使用 BEM，也可以使用下划线（参见下面的 OOCSS 和 BEM）。</li><li>不要使用 ID 选择器。</li><li>在一个规则声明中应用了多个选择器时，每个选择器独占一行。</li><li>在规则声明的左大括号 { 前加上一个空格。</li><li>在属性的冒号 : 后面加上一个空格，前面不加空格。</li><li>规则声明的右大括号 } 独占一行。</li><li>规则声明之间用空行分隔开。<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Bad</span></span><br><span class="line">.avatar&#123;</span><br><span class="line">    <span class="attribute">border-radius</span>:<span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">border</span>:<span class="number">2px</span> solid white; &#125;</span><br><span class="line"><span class="selector-class">.no</span>, <span class="selector-class">.nope</span>, <span class="selector-class">.not_good</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#lol-no</span> &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Good</span></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.avatar</span> &#123;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">2px</span> solid white;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.one</span>,</span><br><span class="line"><span class="selector-class">.selector</span>,</span><br><span class="line"><span class="selector-class">.per-line</span> &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><ol><li>建议使用行注释 (在 Sass 中是 //) 代替块注释。</li><li>建议注释独占一行。避免行末注释。</li><li>给没有自注释的代码写上详细说明，比如：<ul><li>为什么用到了 z-index</li><li>兼容性处理或者针对特定浏览器的 hack</li></ul></li></ol><h2 id="OOCSS-和-BEM"><a href="#OOCSS-和-BEM" class="headerlink" title="OOCSS 和 BEM"></a>OOCSS 和 BEM</h2><p>出于以下原因，我们鼓励使用 OOCSS 和 BEM 的某种组合：</p><ul><li>可以帮助我们理清 CSS 和 HTML 之间清晰且严谨的关系。</li><li>可以帮助我们创建出可重用、易装配的组件。</li><li>可以减少嵌套，降低特定性。</li><li>可以帮助我们创建出可扩展的样式表。</li></ul><p><strong>OOCSS</strong>，也就是 “Object Oriented CSS（面向对象的CSS）”，是一种写 CSS 的方法，其思想就是鼓励你把样式表看作“对象”的集合：创建可重用性、可重复性的代码段让你可以在整个网站中多次使用。</p><p>参考资料：</p><ul><li>Nicole Sullivan 的 <a href="https://github.com/stubbornella/oocss/wiki" target="_blank" rel="noopener">OOCSS wiki</a></li><li>Smashing Magazine 的 <a href="https://www.smashingmagazine.com/2011/12/an-introduction-to-object-oriented-css-oocss/#top" target="_blank" rel="noopener">Introduction to OOCSS</a></li></ul><p><strong>BEM</strong>，也就是 “Block-Element-Modifier”，是一种用于 HTML 和 CSS 类名的<em>命名约定</em>。BEM 最初是由 Yandex 提出的，要知道他们拥有巨大的代码库和可伸缩性，BEM 就是为此而生的，并且可以作为一套遵循 OOCSS 的参考指导规范。</p><p>CSS Trick 的 <a href="https://css-tricks.com/bem-101/" target="_blank" rel="noopener">BEM 101</a><br>Harry Roberts 的 <a href="https://csswizardry.com/2013/01/mindbemding-getting-your-head-round-bem-syntax/" target="_blank" rel="noopener">introduction to BEM</a></p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">article</span> class=<span class="string">"listing-card listing-card--featured"</span>&gt;</span><br><span class="line"></span><br><span class="line">  &lt;<span class="selector-tag">h1</span> class=<span class="string">"listing-card__title"</span>&gt;Adorable <span class="number">2</span>BR <span class="keyword">in</span> the sunny Mission&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">  &lt;<span class="selector-tag">div</span> class=<span class="string">"listing-card__content"</span>&gt;</span><br><span class="line">    &lt;p&gt;Vestibulum id ligula porta felis euismod semper.&lt;/p&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;/article&gt;</span><br><span class="line"><span class="selector-class">.listing-card</span> &#123; &#125;</span><br><span class="line"><span class="selector-class">.listing-card--featured</span> &#123; &#125;</span><br><span class="line"><span class="selector-class">.listing-card__title</span> &#123; &#125;</span><br><span class="line"><span class="selector-class">.listing-card__content</span> &#123; &#125;</span><br></pre></td></tr></table></figure><ul><li>.listing-card 是一个块（block），表示高层次的组件。</li><li>.listing-card__title 是一个元素（element），它属于 .listing-card 的一部分，因此块是由元素组成的。</li><li>.listing-card–featured 是一个修饰符（modifier），表示这个块与 .listing-card 有着不同的状态或者变化。</li></ul><h3 id="BEM"><a href="#BEM" class="headerlink" title="BEM"></a><a href="http://getbem.com/" target="_blank" rel="noopener">BEM</a></h3><p><strong>Naming</strong><br>由拉丁字母, 数字, -组成css的单个名称.<br><strong>Block</strong><br>使用简洁的前缀名字来命名一个独立且有意义的抽象块或组件。<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.block</span><br><span class="line"></span><br><span class="line">.header</span><br><span class="line"></span><br><span class="line">.site-search</span><br></pre></td></tr></table></figure></p><p><strong>Element</strong><br>使用__连接符来连接Block 和 Element。<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.block__element</span><br><span class="line"></span><br><span class="line">.header__title</span><br><span class="line"></span><br><span class="line">.site-search__field</span><br></pre></td></tr></table></figure></p><p><strong>Modifier</strong><br>使用–连接符来连接Block 或 Element 和 Modifier。<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">.block--modifier</span><br><span class="line"></span><br><span class="line">.block__element--modifier</span><br><span class="line"></span><br><span class="line">.header--hide</span><br><span class="line"></span><br><span class="line">.header__title--<span class="attribute">color</span>-red</span><br><span class="line"></span><br><span class="line">.site-search__field--disabled</span><br></pre></td></tr></table></figure></p><p><strong>示例</strong><br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//html</span></span><br><span class="line">&lt;<span class="selector-tag">form</span> class=<span class="string">"form form--theme-xmas form--simple"</span>&gt;</span><br><span class="line">  &lt;<span class="selector-tag">input</span> class=<span class="string">"form__input"</span> type=<span class="string">"text"</span> /&gt;</span><br><span class="line">  &lt;<span class="selector-tag">input</span> class=<span class="string">"form__submit form__submit--disabled"</span> type=<span class="string">"submit"</span> /&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">//CSS</span></span><br><span class="line"><span class="selector-class">.form</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.form--theme-xmas</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.form--simple</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.form__input</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.form__submit</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.form__submit--disabled</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="ID-选择器"><a href="#ID-选择器" class="headerlink" title="ID 选择器"></a>ID 选择器</h2><p>在 CSS 中，虽然可以通过 ID 选择元素，但大家通常都会把这种方式列为反面教材。ID 选择器给你的规则声明带来了不必要的高优先级，而且 ID 选择器是不可重用的。</p><p>想要了解关于这个主题的更多内容，参见 <a href="https://csswizardry.com/2014/07/hacks-for-dealing-with-specificity/" target="_blank" rel="noopener">CSS Wizardry</a> 的文章，文章中有关于如何处理优先级的内容。</p><h2 id="JavaScript-钩子"><a href="#JavaScript-钩子" class="headerlink" title="JavaScript 钩子"></a>JavaScript 钩子</h2><p>避免在 CSS 和 JavaScript 中绑定相同的类。否则开发者在重构时通常会出现以下情况：轻则浪费时间在对照查找每个要改变的类，重则因为害怕破坏功能而不敢作出更改。</p><p>我们推荐在创建用于特定 JavaScript 的类名时，添加 .js- 前缀：<br><figure class="highlight vbscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;button <span class="keyword">class</span>=<span class="string">"btn btn-primary js-request-to-book"</span>&gt;<span class="built_in">Request</span> <span class="keyword">to</span> Book&lt;/button&gt;</span><br></pre></td></tr></table></figure></p><h2 id="边框"><a href="#边框" class="headerlink" title="边框"></a>边框</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Bad</span></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.foo</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Good</span></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.foo</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Sass"><a href="#Sass" class="headerlink" title="Sass"></a>Sass</h2><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><ul><li>使用 .scss 的语法，不使用 .sass 原本的语法。</li><li>CSS 和 @include 声明按照以下逻辑排序（参见下文）</li></ul><h3 id="属性声明的排序"><a href="#属性声明的排序" class="headerlink" title="属性声明的排序"></a>属性声明的排序</h3><p>1.属性声明<br>首先列出除去 @include 和嵌套选择器之外的所有属性声明。<br><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.btn-green</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: green;</span><br><span class="line">  <span class="attribute">font-weight</span>: bold;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>2.@include 声明<br>紧随后面的是 @include，这样可以使得整个选择器的可读性更高。<br><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.btn-green</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: green;</span><br><span class="line">  <span class="attribute">font-weight</span>: bold;</span><br><span class="line">  @<span class="keyword">include</span> transition(background 0.5s ease);</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>3.嵌套选择器<br>如果有必要用到嵌套选择器，把它们放到最后，在规则声明和嵌套选择器之间要加上空白，相邻嵌套选择器之间也要加上空白。嵌套选择器中的内容也要遵循上述指引。<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.btn</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: green;</span><br><span class="line">  <span class="attribute">font-weight</span>: bold;</span><br><span class="line">  @include <span class="attribute">transition</span>(background <span class="number">0.5s</span> ease);</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.icon</span> &#123;</span><br><span class="line">    <span class="attribute">margin-right</span>: <span class="number">10px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><p>变量名应使用破折号（例如 $my-variable）代替 camelCased 和 snake_cased 风格。对于仅用在当前文件的变量，可以在变量名之前添加下划线前缀（例如 $_my-variable）。</p><h3 id="Mixins"><a href="#Mixins" class="headerlink" title="Mixins"></a>Mixins</h3><p>为了让代码遵循 DRY 原则（Don’t Repeat Yourself）、增强清晰性或抽象化复杂性，应该使用 mixin，这与那些命名良好的函数的作用是异曲同工的。虽然 mixin 可以不接收参数，但要注意，假如你不压缩负载（比如通过 gzip），这样会导致最终的样式包含不必要的代码重复。</p><h3 id="扩展指令"><a href="#扩展指令" class="headerlink" title="扩展指令"></a>扩展指令</h3><p>应避免使用 @extend 指令，因为它并不直观，而且具有潜在风险，特别是用在嵌套选择器的时候。即便是在顶层占位符选择器使用扩展，如果选择器的顺序最终会改变，也可能会导致问题。（比如，如果它们存在于其他文件，而加载顺序发生了变化）。其实，使用 @extend 所获得的大部分优化效果，gzip 压缩已经帮助你做到了，因此你只需要通过 mixin 让样式表更符合 DRY 原则就足够了。</p><h3 id="嵌套选择器"><a href="#嵌套选择器" class="headerlink" title="嵌套选择器"></a>嵌套选择器</h3><p><strong>请不要让嵌套选择器的深度超过 3 层！</strong><br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.page-container</span> &#123;</span><br><span class="line">  <span class="selector-class">.content</span> &#123;</span><br><span class="line">    <span class="selector-class">.profile</span> &#123;</span><br><span class="line">      <span class="comment">// STOP!</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>当遇到以上情况的时候，你也许是这样写 CSS 的：</p><ul><li>与 HTML 强耦合的（也是脆弱的）</li><li>过于具体（强大）</li><li>没有重用</li></ul><p>再说一遍: <strong>永远不要嵌套 ID 选择器！</strong></p><p>如果你始终坚持要使用 ID 选择器（劝你三思），那也不应该嵌套它们。如果你正打算这么做，你需要先重新检查你的标签，或者指明原因。如果你想要写出风格良好的 HTML 和 CSS，你是不应该这样做的。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;规则声明&quot;&gt;&lt;a href=&quot;#规则声明&quot; class=&quot;headerlink&quot; title=&quot;规则声明&quot;&gt;&lt;/a&gt;规则声明&lt;/h2&gt;&lt;p&gt;我们把一个（或一组）选择器和一组属性称之为 “规则声明”。举个例子：&lt;br&gt;&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.listing&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;font-size&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;18px&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;line-height&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;1.2&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="css" scheme="https://chongdee.github.io/categories/css/"/>
    
    
      <category term="css" scheme="https://chongdee.github.io/tags/css/"/>
    
      <category term="代码规范" scheme="https://chongdee.github.io/tags/%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83/"/>
    
  </entry>
  
  <entry>
    <title>Airbnb JavaScript 编码风格指南</title>
    <link href="https://chongdee.github.io/2018/11/03/%E8%A7%84%E8%8C%83/Airbnb-JavaScript-%E7%BC%96%E7%A0%81%E9%A3%8E%E6%A0%BC%E6%8C%87%E5%8D%97/"/>
    <id>https://chongdee.github.io/2018/11/03/规范/Airbnb-JavaScript-编码风格指南/</id>
    <published>2018-11-03T09:29:15.000Z</published>
    <updated>2021-05-08T16:59:38.099Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2 id="Airbnb-JavaScript-编码风格指南（2018年最新版）"><a href="#Airbnb-JavaScript-编码风格指南（2018年最新版）" class="headerlink" title="Airbnb JavaScript 编码风格指南（2018年最新版）"></a>Airbnb JavaScript 编码风格指南（2018年最新版）</h2><blockquote><p>Airbnb JS规范原文： <a href="https://github.com/airbnb/javascript" target="_blank" rel="noopener">https://github.com/airbnb/javascript</a></p></blockquote><h2 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h2><p>1.基本类型：直接存取</p><ul><li>string</li><li>number</li><li>boolean</li><li>null</li><li>undefined</li><li>symbol<a id="more"></a><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">const foo = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="built_in">bar</span> = foo;</span><br><span class="line"></span><br><span class="line"><span class="built_in">bar</span> = <span class="number">9</span>;</span><br><span class="line"></span><br><span class="line">console.<span class="built_in">log</span>(foo, <span class="built_in">bar</span>); <span class="comment">// =&gt; 1, 9</span></span><br></pre></td></tr></table></figure></li></ul><p><strong>symbol 类型不能完全polyfilled，所以请谨慎使用</strong></p><p>2.复杂类型: 通过引用的方式存取</p><ul><li>object</li><li>array</li><li>function<figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">const foo = [<span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line">const bar = foo;</span><br><span class="line"></span><br><span class="line">bar[<span class="number">0</span>] = <span class="number">9</span>;</span><br><span class="line"></span><br><span class="line">console.log(foo[<span class="number">0</span>], bar[<span class="number">0</span>]); <span class="comment">// =&gt; 9, 9</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><p>1.使用const申明引用类型，避免使用var。eslint 设置：<a href="https://eslint.org/docs/rules/prefer-const.html" target="_blank" rel="noopener">prefer-const</a>,<a href="https://eslint.org/docs/rules/no-const-assign.html" target="_blank" rel="noopener">no-const-assign</a></p><blockquote><p>为什么？这能确保你无法对引用重新赋值，也不会导致出现 bug 或难以理解。</p></blockquote><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> b = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">const</span> b = <span class="number">2</span>;</span><br></pre></td></tr></table></figure><p>2.如果必须对引用类型重新赋值，使用let而非var。eslint设置：<a href="https://eslint.org/docs/rules/no-var.html" target="_blank" rel="noopener">no-var </a></p><blockquote><p>为什么？相比于var函数作用域，let块级作用域更容易理解</p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">var</span> <span class="built_in">count</span> = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">  <span class="built_in">count</span> += <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good, use the let.</span></span><br><span class="line"><span class="keyword">let</span> <span class="built_in">count</span> = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">  <span class="built_in">count</span> += <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.注意let和const都是块级作用域<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// const and let only exist in the blocks they are defined in.</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">let</span> a = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">const</span> b = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// ReferenceError</span></span><br><span class="line"><span class="built_in">console</span>.log(b); <span class="comment">// ReferenceError</span></span><br></pre></td></tr></table></figure></p><h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><p>1.使用字面值创建对象。eslint: <a href="https://eslint.org/docs/rules/no-new-object.html" target="_blank" rel="noopener">no-new-object</a><br><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> item = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> item = &#123;&#125;;</span><br></pre></td></tr></table></figure></p><p>2.创建对象的动态属性时，使用计算属性</p><blockquote><p>为什么？这样可以在一个地方定义对象所有的属性</p></blockquote><figure class="highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getKey</span>(<span class="params">k</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`a key named <span class="subst">$&#123;k&#125;</span>`</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attribute">id:</span><span class="string"> 5,</span></span><br><span class="line"><span class="string">  name</span>: <span class="string">'San Francisco'</span>,</span><br><span class="line">&#125;;</span><br><span class="line">obj[getKey(<span class="string">'enabled'</span>)] = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attribute">id:</span><span class="string"> 5,</span></span><br><span class="line"><span class="string">  name</span>: <span class="string">'San Francisco'</span>,</span><br><span class="line">  [getKey(<span class="string">'enabled'</span>)]: <span class="literal">true</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>3.使用对象方法的简写形式。 eslint: <a href="https://eslint.org/docs/rules/object-shorthand.html" target="_blank" rel="noopener">object-shorthand</a></p><blockquote><p>为什么？方法定义简洁清晰</p></blockquote><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> atom = &#123;</span><br><span class="line">  <span class="keyword">value</span>: <span class="number">1</span>,</span><br><span class="line"></span><br><span class="line">  addValue: function (<span class="keyword">value</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> atom.<span class="keyword">value</span> + <span class="keyword">value</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> atom = &#123;</span><br><span class="line">  <span class="keyword">value</span>: <span class="number">1</span>,</span><br><span class="line"></span><br><span class="line">  addValue(<span class="keyword">value</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> atom.<span class="keyword">value</span> + <span class="keyword">value</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>4.使用属性值简写形式</p><blockquote><p>为什么？书写更加简洁，更有描述性。</p></blockquote><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> lukeSkywalker = <span class="string">'Luke Skywalker'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  lukeSkywalker: lukeSkywalker,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  lukeSkywalker,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>5.对象声明时分类简写和非简写的属性名。</p><blockquote><p>为什么？更清晰的了解哪些属性是简写的。</p></blockquote><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> anakinSkywalker = <span class="string">'Anakin Skywalker'</span>;</span><br><span class="line"><span class="keyword">const</span> lukeSkywalker = <span class="string">'Luke Skywalker'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  episodeOne: <span class="number">1</span>,</span><br><span class="line">  twoJediWalkIntoACantina: <span class="number">2</span>,</span><br><span class="line">  lukeSkywalker,</span><br><span class="line">  episodeThree: <span class="number">3</span>,</span><br><span class="line">  mayTheFourth: <span class="number">4</span>,</span><br><span class="line">  anakinSkywalker,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  lukeSkywalker,</span><br><span class="line">  anakinSkywalker,</span><br><span class="line">  episodeOne: <span class="number">1</span>,</span><br><span class="line">  twoJediWalkIntoACantina: <span class="number">2</span>,</span><br><span class="line">  episodeThree: <span class="number">3</span>,</span><br><span class="line">  mayTheFourth: <span class="number">4</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>6.只有对那些不合法的属性名标识符添加引号。</p><blockquote><p>为什么？对象属性更直观，可读性强。能够代码高亮显示，同时对于大多数的js引擎更容易优化代码。</p></blockquote><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> bad = &#123;</span><br><span class="line">  <span class="string">'foo'</span>: <span class="number">3</span>,</span><br><span class="line">  <span class="string">'bar'</span>: <span class="number">4</span>,</span><br><span class="line">  <span class="string">'data-blah'</span>: <span class="number">5</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> good = &#123;</span><br><span class="line">  foo: <span class="number">3</span>,</span><br><span class="line">  bar: <span class="number">4</span>,</span><br><span class="line">  <span class="string">'data-blah'</span>: <span class="number">5</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>7.不要直接使用Object.prototype上的方法，例如hasOwnProperty, propertyIsEnumerable, 和 isPrototypeOf。</p><blockquote><p>为什么？这些方法可能受对象的其他属性影响。例如{ hasOwnProperty: false } 或者 对象可能是null(Object.create(null))</p></blockquote><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line">console.<span class="built_in">log</span>(object.hasOwnProperty(<span class="built_in">key</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> object = <span class="keyword">Object</span>.create(<span class="keyword">null</span>);</span><br><span class="line">obj.hasOwnProperty(<span class="built_in">key</span>) <span class="comment">// Uncaught TypeError: obj.hasOwnProperty is not a function</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">console.<span class="built_in">log</span>(<span class="keyword">Object</span>.prototype.hasOwnProperty.call(object, <span class="built_in">key</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// best</span></span><br><span class="line"><span class="keyword">const</span> has = <span class="keyword">Object</span>.prototype.hasOwnProperty; <span class="comment">// cache the lookup once, in module scope.</span></span><br><span class="line"><span class="comment">/* or */</span></span><br><span class="line"><span class="keyword">import</span> has from <span class="string">'has'</span>; <span class="comment">// https://www.npmjs.com/package/has</span></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">console.<span class="built_in">log</span>(has.call(object, <span class="built_in">key</span>));</span><br></pre></td></tr></table></figure><p>8.浅拷贝对象时推荐使用对象展开操作（object spread operator）而不是Object.assign。使用对象剩余操作符（object rest operator）获取对象中剩余的属性。</p><blockquote><p>为什么？Object.assign使用不当会修改原对象</p></blockquote><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// very bad</span></span><br><span class="line"><span class="keyword">const</span> original = <span class="comment">&#123; a: 1, b: 2 &#125;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">copy</span> = Object.assign(original, <span class="comment">&#123; c: 3 &#125;</span>); <span class="comment">// this mutates `original` ಠ_ಠ</span></span><br><span class="line">delete <span class="keyword">copy</span>.a; <span class="comment">// so does this</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> original = <span class="comment">&#123; a: 1, b: 2 &#125;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">copy</span> = Object.assign(<span class="comment">&#123;&#125;</span>, original, <span class="comment">&#123; c: 3 &#125;</span>); <span class="comment">// copy =&gt; &#123; a: 1, b: 2, c: 3 &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> original = <span class="comment">&#123; a: 1, b: 2 &#125;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">copy</span> = <span class="comment">&#123; ...original, c: 3 &#125;</span>; <span class="comment">// copy =&gt; &#123; a: 1, b: 2, c: 3 &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="comment">&#123; a, ...noA &#125;</span> = <span class="keyword">copy</span>; <span class="comment">// noA =&gt; &#123; b: 2, c: 3 &#125;</span></span><br></pre></td></tr></table></figure><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p>1.使用字面量声明数组。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> items = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> items = [];</span><br></pre></td></tr></table></figure></p><p>2.向数组添加元素时，使用Arrary#push替代直接赋值。<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> someStack = [];</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line">someStack[someStack.length] = <span class="string">'abracadabra'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">someStack.push(<span class="string">'abracadabra'</span>);</span><br></pre></td></tr></table></figure></p><p>3.使用数组展开操作符…拷贝数组<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> <span class="built_in">len</span> = items.length;</span><br><span class="line"><span class="keyword">const</span> itemsCopy = [];</span><br><span class="line">let i;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="built_in">len</span>; i += <span class="number">1</span>) &#123;</span><br><span class="line">  itemsCopy[i] = items[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> itemsCopy = [...items];</span><br></pre></td></tr></table></figure></p><p>4.将类数组对象（array-like）转换成数组时，使用…而不是Array.from<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> foo = <span class="built_in">document</span>.<span class="built_in">querySelectorAll</span>(<span class="string">'.foo'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> nodes = Array.from(foo);</span><br><span class="line"></span><br><span class="line"><span class="comment">// best</span></span><br><span class="line"><span class="keyword">const</span> nodes = [...foo];</span><br></pre></td></tr></table></figure></p><p>5.当需要对可遍历对象进行map操作时，使用Array.from而不是展开操作符…,避免新建一个临时数组。<br><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> baz = [...foo].<span class="built_in">map</span>(bar);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> baz = <span class="keyword">Array</span>.from(foo, bar);</span><br></pre></td></tr></table></figure></p><p>6.数组方法回调需要有返回值。如果函数体比较简单，可以直接用表达式，省略return语句。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// good</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].map(<span class="function">(<span class="params">x</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> y = x + <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">return</span> x * y;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].map(<span class="function"><span class="params">x</span> =&gt;</span> x + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad - no returned value means `memo` becomes undefined after the first iteration</span></span><br><span class="line">[[<span class="number">0</span>, <span class="number">1</span>], [<span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>]].reduce(<span class="function">(<span class="params">memo, item, index</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> flatten = memo.concat(item);</span><br><span class="line">  memo[index] = flatten;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">[[<span class="number">0</span>, <span class="number">1</span>], [<span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>]].reduce(<span class="function">(<span class="params">memo, item, index</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> flatten = memo.concat(item);</span><br><span class="line">  memo[index] = flatten;</span><br><span class="line">  <span class="keyword">return</span> flatten;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line">inbox.filter(<span class="function">(<span class="params">msg</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; subject, author &#125; = msg;</span><br><span class="line">  <span class="keyword">if</span> (subject === <span class="string">'Mockingbird'</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> author === <span class="string">'Harper Lee'</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">inbox.filter(<span class="function">(<span class="params">msg</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; subject, author &#125; = msg;</span><br><span class="line">  <span class="keyword">if</span> (subject === <span class="string">'Mockingbird'</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> author === <span class="string">'Harper Lee'</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>7.如果数组有多行，请在打开和关闭数组括号之前使用换行符(特别是数组对象数据)</p><blockquote><p>为什么？ 更具有可读性</p></blockquote><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">// bad</span><br><span class="line">const arr = <span class="comment">[</span></span><br><span class="line"><span class="comment">  <span class="comment">[0, 1]</span>, <span class="comment">[2, 3]</span>, <span class="comment">[4, 5]</span>,</span></span><br><span class="line"><span class="comment">]</span>;</span><br><span class="line"></span><br><span class="line">const objectInArray = <span class="comment">[&#123;</span></span><br><span class="line"><span class="comment">  id: 1,</span></span><br><span class="line"><span class="comment">&#125;, &#123;</span></span><br><span class="line"><span class="comment">  id: 2,</span></span><br><span class="line"><span class="comment">&#125;]</span>;</span><br><span class="line"></span><br><span class="line">const numberInArray = <span class="comment">[</span></span><br><span class="line"><span class="comment">  1, 2,</span></span><br><span class="line"><span class="comment">]</span>;</span><br><span class="line"></span><br><span class="line">// good</span><br><span class="line">const arr = <span class="comment">[<span class="comment">[0, 1]</span>, <span class="comment">[2, 3]</span>, <span class="comment">[4, 5]</span>]</span>;</span><br><span class="line"></span><br><span class="line">const objectInArray = <span class="comment">[</span></span><br><span class="line"><span class="comment">  &#123;</span></span><br><span class="line"><span class="comment">    id: 1,</span></span><br><span class="line"><span class="comment">  &#125;,</span></span><br><span class="line"><span class="comment">  &#123;</span></span><br><span class="line"><span class="comment">    id: 2,</span></span><br><span class="line"><span class="comment">  &#125;,</span></span><br><span class="line"><span class="comment">]</span>;</span><br><span class="line"></span><br><span class="line">const numberInArray = <span class="comment">[</span></span><br><span class="line"><span class="comment">  1,</span></span><br><span class="line"><span class="comment">  2,</span></span><br><span class="line"><span class="comment">]</span>;</span><br></pre></td></tr></table></figure><h2 id="解构"><a href="#解构" class="headerlink" title="解构"></a>解构</h2><p>1.访问和使用对象的多个属性时用对象解构操作。</p><blockquote><p>为什么？解构可以避免为这些属性创建临时引用。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFullName</span>(<span class="params">user</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> firstName = user.firstName;</span><br><span class="line">  <span class="keyword">const</span> lastName = user.lastName;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;firstName&#125;</span> <span class="subst">$&#123;lastName&#125;</span>`</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFullName</span>(<span class="params">user</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; firstName, lastName &#125; = user;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;firstName&#125;</span> <span class="subst">$&#123;lastName&#125;</span>`</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// best</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFullName</span>(<span class="params">&#123; firstName, lastName &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;firstName&#125;</span> <span class="subst">$&#123;lastName&#125;</span>`</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.使用数组解构<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">const arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line">const first = arr[<span class="number">0</span>];</span><br><span class="line">const second = arr[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">const [first, second] = arr;</span><br></pre></td></tr></table></figure></p><p>3.使用对象解构来实现多个返回值，而不是数组解构。</p><blockquote><p>为什么？你可以随时为返回值新增属性而不用关心属性的顺序。</p></blockquote><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">processInput</span><span class="params">(input)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// then a miracle occurs</span></span><br><span class="line">  <span class="keyword">return</span> [left, right, top, bottom];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用者需要注意返回值中对象的顺序</span></span><br><span class="line"><span class="keyword">const</span> [left, __, top] = processInput(input);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">processInput</span><span class="params">(input)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// then a miracle occurs</span></span><br><span class="line">  <span class="keyword">return</span> &#123; left, right, top, bottom &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用者只需要使用它需要的对象</span></span><br><span class="line"><span class="keyword">const</span> &#123; left, top &#125; = processInput(input);</span><br></pre></td></tr></table></figure><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><p>1.字符串使用单引号。<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> name = <span class="string">"Capt. Janeway"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad - 当需要插值或者换行时才使用模板文字</span></span><br><span class="line"><span class="keyword">const</span> name = <span class="string">`Capt. Janeway`</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> name = <span class="string">'Capt. Janeway'</span>;</span><br></pre></td></tr></table></figure></p><p>2.不超过100个字符的字符串不应该使用连接符或者换行书写。</p><blockquote><p>为什么？换行的字符串不好阅读，并且不方便搜索代码。</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">// bad</span><br><span class="line">const errorMessage = 'This is a super long error that was thrown because \</span><br><span class="line">of Batman. When you <span class="keyword">stop</span> <span class="keyword">to</span> think about how Batman had anything <span class="keyword">to</span> <span class="keyword">do</span> \</span><br><span class="line"><span class="keyword">with</span> this, you would <span class="keyword">get</span> nowhere \</span><br><span class="line">fast.<span class="string">';</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// bad</span></span><br><span class="line"><span class="string">const errorMessage = '</span>This <span class="keyword">is</span> a super <span class="keyword">long</span> <span class="keyword">error</span> that was thrown because <span class="string">' +</span></span><br><span class="line"><span class="string">  '</span><span class="keyword">of</span> Batman. <span class="keyword">When</span> you <span class="keyword">stop</span> <span class="keyword">to</span> think about how Batman had anything <span class="keyword">to</span> <span class="keyword">do</span> <span class="string">' +</span></span><br><span class="line"><span class="string">  '</span><span class="keyword">with</span> this, you would <span class="keyword">get</span> nowhere fast.<span class="string">';</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// good</span></span><br><span class="line"><span class="string">const errorMessage = '</span>This <span class="keyword">is</span> a super <span class="keyword">long</span> <span class="keyword">error</span> that was thrown because <span class="keyword">of</span> Batman. <span class="keyword">When</span> you <span class="keyword">stop</span> <span class="keyword">to</span> think about how Batman had anything <span class="keyword">to</span> <span class="keyword">do</span> <span class="keyword">with</span> this, you would <span class="keyword">get</span> nowhere fast.<span class="string">';</span></span><br></pre></td></tr></table></figure><p>3.以编程方式构建字符串时，使用模板字符串而不是连接符。</p><blockquote><p>为什么？模板字符串更为简洁，更具可读性。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayHi</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">'How are you, '</span> + name + <span class="string">'?'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayHi</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> [<span class="string">'How are you, '</span>, name, <span class="string">'?'</span>].join();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayHi</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`How are you, <span class="subst">$&#123; name &#125;</span>?`</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayHi</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`How are you, <span class="subst">$&#123;name&#125;</span>?`</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.永远不要在字符串上使用eval()方法，它有太多的问题。<br>5.不要过多的转义字符串。</p><blockquote><p>为什么？反斜杠影响代码可读性，只有在必要的时候才使用。</p></blockquote><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> foo = <span class="string">'\'</span>this\<span class="string">' \i\s \"quoted\"'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> foo = <span class="string">'\'</span>this\<span class="string">' is "quoted"'</span>;</span><br><span class="line"><span class="keyword">const</span> foo = `my <span class="keyword">name</span> <span class="keyword">is</span> <span class="string">'$&#123;name&#125;'</span>`;</span><br></pre></td></tr></table></figure><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>1.使用命名函数表达式而不是函数声明。</p><blockquote><p>为什么？函数声明会被提前。这意味着很可能在函数定义前引用该函数，但是不会报错。这不利于代码的可读性和可维护性。如果你发现一个函数定义的很大很复杂，以至于妨碍了了解文件中的其他内容，那么是时候把这个函数提取到自己的模块中去了！不要忘记显示指定表达式的名称，尽管它能从变量名中被推断出来（现代浏览器或者编译器（如Babel）支持）。这能让错误的调用栈更清晰。(讨论)</p></blockquote><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> foo = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="comment">// 函数名和变量引用名不同</span></span><br><span class="line"><span class="keyword">const</span> short = <span class="function"><span class="keyword">function</span> <span class="title">longUniqueMoreDescriptiveLexicalFoo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Is it worse</span></span><br><span class="line"><span class="keyword">const</span> sum = <span class="function"><span class="keyword">function</span><span class="params">(a, b)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// than this?</span></span><br><span class="line"><span class="keyword">const</span> my_sum = <span class="function"><span class="keyword">function</span> <span class="title">sum</span><span class="params">(a, b)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>第一个函数没有.name属性，在debugging过程中，它会是一个匿名函数。第二个函数有名字为sum，你可以检索到它，调试过程中能够快速定位。<br>使用banel 和babel-preset-env配置，const foo = () =&gt; {}会转换成var foo = function foo () {}，并且从Node v6开始，const foo = () =&gt; {}中的foo 也有.name。所以它不再是匿名函数。（函数名字推断）</p></blockquote><p>2.用圆括号包裹立即执行函数表达式（IIFE）。</p><blockquote><p>为什么？ 立即执行函数表达式是单一执行单元-使用圆括号包裹调用，简洁明了的表示了这一点。请注意，在通用的模块中，你几乎用不到IIFE。</p></blockquote><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// immediately-invoked function expression (<span class="name">IIFE</span>)</span><br><span class="line">(<span class="name">function</span> () &#123;</span><br><span class="line">  console.log('Welcome to the Internet. Please follow me.')<span class="comment">;</span></span><br><span class="line">&#125;())<span class="comment">;</span></span><br></pre></td></tr></table></figure><p>3.永远不要在一个非函数代码块（if、while 等）中声明一个函数，把那个函数赋给一个变量。浏览器允许你这么做，但它们的解析表现不一致。<br>4.注意：ECMA-262把block定义为一组语句。但是函数声明不是语句。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">if</span> (currentUser) &#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Nope.'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">let</span> test;</span><br><span class="line"><span class="keyword">if</span> (currentUser) &#123;</span><br><span class="line">  test = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Yup.'</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>5.永远不要把参数命名为arguments。这将取代原来函数作用域内的 arguments对象。<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span><span class="params">(name, options, arguments)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span><span class="params">(name, options, args)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>6.不要使用arguments。可以选择 rest 语法 … 替代。</p><blockquote><p>为什么？使用 … 能明确你要传入的参数。另外 rest 参数是一个真正的数组，而 arguments 是一个类数组。</p></blockquote><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">concatenateAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> args = Array.prototype.slice.call(arguments);</span><br><span class="line">  <span class="keyword">return</span> args.join(<span class="string">''</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">concatenateAll</span><span class="params">(<span class="rest_arg">...args</span>)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> args.join(<span class="string">''</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>7.使用函数默认参数指定默认值，而不是用一个可变的函数参数<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// really bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleThings</span><span class="params">(opts)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 不！我们不应该改变函数参数</span></span><br><span class="line">  <span class="comment">// 更糟糕的是: 如果 opts 是 falsy (为''或者是false), 它仍然会被赋值为对象，但是这可能会引发bug</span></span><br><span class="line">  opts = opts || &#123;&#125;;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// still bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleThings</span><span class="params">(opts)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (opts === <span class="keyword">void</span> <span class="number">0</span>) &#123;</span><br><span class="line">    opts = &#123;&#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleThings</span><span class="params">(opts = &#123;&#125;)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>8.1使用默认参数避免副作用。</p><blockquote><p>为什么？这样的写法会让人困惑。</p></blockquote><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> b = 1;</span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line">function <span class="keyword">count</span>(a = b++) &#123;</span><br><span class="line">  console.<span class="built_in">log</span>(a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">count</span>();  <span class="comment">// 1</span></span><br><span class="line"><span class="keyword">count</span>();  <span class="comment">// 2</span></span><br><span class="line"><span class="keyword">count</span>(3); <span class="comment">// 3</span></span><br><span class="line"><span class="keyword">count</span>();  <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><p><strong>参数默认值放在函数参数列表的最后。</strong></p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleThings</span><span class="params">(opts = &#123;&#125;, name)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleThings</span><span class="params">(name, opts = &#123;&#125;)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>8.2不要使用Function构造器创建函数。</p><blockquote><p>为什么？通过这种方式创建的函数和使用eval()类似，会带来不确定的问题</p></blockquote><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">var</span> <span class="keyword">add</span> = <span class="keyword">new</span> <span class="function"><span class="keyword">Function</span><span class="params">(<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'return a + b'</span>)</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// still bad</span></span><br><span class="line"><span class="keyword">var</span> subtract = <span class="function"><span class="keyword">Function</span><span class="params">(<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'return a - b'</span>)</span>;</span></span><br></pre></td></tr></table></figure><p>8.3函数名两边留白。</p><blockquote><p>为什么？保持代码一致性，当你添加或者删除名字时不需要额外增减空格。</p></blockquote><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> f = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;&#125;;</span><br><span class="line"><span class="keyword">const</span> g = <span class="function"><span class="keyword">function</span> <span class="params">()</span></span>&#123;&#125;;</span><br><span class="line"><span class="keyword">const</span> h = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> x = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;&#125;;</span><br><span class="line"><span class="keyword">const</span> y = <span class="function"><span class="keyword">function</span> <span class="title">a</span><span class="params">()</span> </span>&#123;&#125;;</span><br></pre></td></tr></table></figure><p>8.4不要修改参数。</p><blockquote><p>为什么？操作参数对象会在原始调用方中导致不可预知的变量副作用。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  obj.key = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f2</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> key = <span class="built_in">Object</span>.prototype.hasOwnProperty.call(obj, <span class="string">'key'</span>) ? obj.key : <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>8.5不要给参数赋值。</p><blockquote><p>为什么？重新分配参数可能会导致意外的行为，特别是在访问参数对象时。 它也可能导致优化问题，特别是在V8中。</p></blockquote><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span><span class="params">(a)</span> </span>&#123;</span><br><span class="line">  a = <span class="number">1</span>;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f2</span><span class="params">(a)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!a) &#123; a = <span class="number">1</span>; &#125;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f3</span><span class="params">(a)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> b = a || <span class="number">1</span>;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f4</span><span class="params">(a = 1)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>8.6使用展开操作符…调用可变参数函数。</p><blockquote><p>为什么？它更简洁，你不需要提供上下文，并且组合使用new和apply不容易。</p></blockquote><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line">const x = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line">console.log.apply(console, x);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">const x = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line">console.log(...x);</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line">new (Function.prototype.bind.apply(Date, [null, <span class="number">2016</span>, <span class="number">8</span>, <span class="number">5</span>]));</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">new Date(...[<span class="number">2016</span>, <span class="number">8</span>, <span class="number">5</span>]);</span><br></pre></td></tr></table></figure><p>8.7带有多行函数签名或调用的函数应该像本指南中的其他多行列表一样缩进：每行中包含一项，最后一个项目带有逗号。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">bar,</span></span></span><br><span class="line"><span class="function"><span class="params">             baz,</span></span></span><br><span class="line"><span class="function"><span class="params">             quux</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  bar,</span></span></span><br><span class="line"><span class="function"><span class="params">  baz,</span></span></span><br><span class="line"><span class="function"><span class="params">  quux,</span></span></span><br><span class="line"><span class="function"><span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="built_in">console</span>.log(foo,</span><br><span class="line">  bar,</span><br><span class="line">  baz);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="built_in">console</span>.log(</span><br><span class="line">  foo,</span><br><span class="line">  bar,</span><br><span class="line">  baz,</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h2><p>1.当你必须要使用匿名函数（如在传递内联回调时），请使用箭头函数。</p><blockquote><p>为什么?因为箭头函数创造了新的一个 this 执行环境，通常情况下都能满足你的需求，而且这样的写法更为简洁。（参考 Arrow functions - JavaScript | MDN ）<br>为什么不？如果你有一个相当复杂的函数，你或许可以把逻辑部分转移到一个函数声明上。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].map(<span class="function"><span class="keyword">function</span> (<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> y = x + <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">return</span> x * y;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].map(<span class="function">(<span class="params">x</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> y = x + <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">return</span> x * y;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>2.如果一个函数适合用一行写出并且只有一个参数，那就把花括号、圆括号和 return 都省略掉。如果不是，那就不要省略。</p><blockquote><p>为什么？这是一个很好用的语法糖。在链式调用中可读性很高。</p></blockquote><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].map(<span class="function"><span class="params">number</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> nextNumber = <span class="built_in">number</span> + <span class="number">1</span>;</span><br><span class="line">  <span class="string">`A string containing the <span class="subst">$&#123;nextNumber&#125;</span>.`</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].map(<span class="function"><span class="params">number</span> =&gt;</span> <span class="string">`A string containing the <span class="subst">$&#123;number&#125;</span>.`</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].map(<span class="function">(<span class="params"><span class="built_in">number</span></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> nextNumber = <span class="built_in">number</span> + <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`A string containing the <span class="subst">$&#123;nextNumber&#125;</span>.`</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].map(<span class="function">(<span class="params"><span class="built_in">number</span>, index</span>) =&gt;</span> (&#123;</span><br><span class="line">  [index]: <span class="built_in">number</span>,</span><br><span class="line">&#125;));</span><br><span class="line"></span><br><span class="line"><span class="comment">// No implicit return with side effects</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">callback</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> val = callback();</span><br><span class="line">  <span class="keyword">if</span> (val === <span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="comment">// Do something if callback returns true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> bool = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line">foo(<span class="function"><span class="params">()</span> =&gt;</span> bool = <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">foo(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  bool = <span class="literal">true</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>3.如果表达式过长需要多行表示，请将其包含在括号中，增加可读性。</p><blockquote><p>为什么？它能清除的标识函数的开始和结束位置。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line">[<span class="string">'get'</span>, <span class="string">'post'</span>, <span class="string">'put'</span>].map(<span class="function"><span class="params">httpMethod</span> =&gt;</span> <span class="built_in">Object</span>.prototype.hasOwnProperty.call(</span><br><span class="line">    httpMagicObjectWithAVeryLongName,</span><br><span class="line">    httpMethod,</span><br><span class="line">  )</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">[<span class="string">'get'</span>, <span class="string">'post'</span>, <span class="string">'put'</span>].map(<span class="function"><span class="params">httpMethod</span> =&gt;</span> (</span><br><span class="line">  <span class="built_in">Object</span>.prototype.hasOwnProperty.call(</span><br><span class="line">    httpMagicObjectWithAVeryLongName,</span><br><span class="line">    httpMethod,</span><br><span class="line">  )</span><br><span class="line">));</span><br></pre></td></tr></table></figure><p>4.如果函数只有一个参数并且函数体没有使用花括号，那就省略括号。否则，为了保持清晰一致性，总在参数周围加上括号。</p><blockquote><p>为什么？ 不那么混乱，可读性强。</p></blockquote><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].map((x) =&gt; x * x);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].map(x =&gt; x * x);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].map(number =&gt; (</span><br><span class="line">  `A long <span class="type">string</span> with the $&#123;number&#125;. It’s so long that we don’t want it to take up space on the .map line!`</span><br><span class="line">));</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].map(x =&gt; &#123;</span><br><span class="line">  const y = x + <span class="number">1</span>;</span><br><span class="line">  return x * y;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].map((x) =&gt; &#123;</span><br><span class="line">  const y = x + <span class="number">1</span>;</span><br><span class="line">  return x * y;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>5.避免箭头函数语法（=&gt;）和比较运算符（&lt;=,=&gt;）一起使用时带来的困惑。<br><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">// <span class="keyword">bad</span></span><br><span class="line"><span class="keyword">const </span><span class="keyword">itemHeight </span>= <span class="keyword">item </span>=&gt; <span class="keyword">item.height </span>&gt; <span class="number">256</span> ? <span class="keyword">item.largeSize </span>: <span class="keyword">item.smallSize;</span></span><br><span class="line"><span class="keyword"></span></span><br><span class="line"><span class="keyword">// </span><span class="keyword">bad</span></span><br><span class="line"><span class="keyword">const </span><span class="keyword">itemHeight </span>= (<span class="keyword">item) </span>=&gt; <span class="keyword">item.height </span>&gt; <span class="number">256</span> ? <span class="keyword">item.largeSize </span>: <span class="keyword">item.smallSize;</span></span><br><span class="line"><span class="keyword"></span></span><br><span class="line"><span class="keyword">// </span>good</span><br><span class="line"><span class="symbol">const</span> <span class="keyword">itemHeight </span>= <span class="keyword">item </span>=&gt; (<span class="keyword">item.height </span>&gt; <span class="number">256</span> ? <span class="keyword">item.largeSize </span>: <span class="keyword">item.smallSize);</span></span><br><span class="line"><span class="keyword"></span></span><br><span class="line"><span class="keyword">// </span>good</span><br><span class="line"><span class="symbol">const</span> <span class="keyword">itemHeight </span>= (<span class="keyword">item) </span>=&gt; &#123;</span><br><span class="line">  const &#123; height, largeSize, smallSize &#125; = <span class="keyword">item;</span></span><br><span class="line"><span class="keyword"> </span> return height &gt; <span class="number">256</span> ? largeSize : smallSize<span class="comment">;</span></span><br><span class="line">&#125;<span class="comment">;</span></span><br></pre></td></tr></table></figure></p><h2 id="类-amp-构造函数"><a href="#类-amp-构造函数" class="headerlink" title="类 &amp; 构造函数"></a>类 &amp; 构造函数</h2><p>1.总是使用class。避免直接操作prototype。</p><blockquote><p>为什么？class语法更简洁更易于理解。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Queue</span>(<span class="params">contents = []</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.queue = [...contents];</span><br><span class="line">&#125;</span><br><span class="line">Queue.prototype.pop = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> value = <span class="keyword">this</span>.queue[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">this</span>.queue.splice(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">return</span> value;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Queue</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(contents = []) &#123;</span><br><span class="line">    <span class="keyword">this</span>.queue = [...contents];</span><br><span class="line">  &#125;</span><br><span class="line">  pop() &#123;</span><br><span class="line">    <span class="keyword">const</span> value = <span class="keyword">this</span>.queue[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">this</span>.queue.splice(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.使用extends继承。</p><blockquote><p>为什么？ 因为 extends 是一个内建的原型继承方法并且不会破坏 instanceof。</p></blockquote><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line">const inherits = require(<span class="symbol">'inherit</span>s');</span><br><span class="line">function <span class="type">PeekableQueue</span>(contents) &#123;</span><br><span class="line">  <span class="type">Queue</span>.apply(<span class="keyword">this</span>, contents);</span><br><span class="line">&#125;</span><br><span class="line">inherits(<span class="type">PeekableQueue</span>, <span class="type">Queue</span>);</span><br><span class="line"><span class="type">PeekableQueue</span>.prototype.peek = function () &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.queue[<span class="number">0</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PeekableQueue</span> <span class="keyword">extends</span> <span class="title">Queue</span> </span>&#123;</span><br><span class="line">  peek() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.queue[<span class="number">0</span>];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.方法可以返回 this 来帮助链式调用。</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line">Jedi.prototype.jump = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.jumping = <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Jedi.prototype.setHeight = <span class="function"><span class="keyword">function</span> <span class="params">(height)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.height = height;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> luke = <span class="keyword">new</span> Jedi();</span><br><span class="line">luke.jump(); <span class="comment">// =&gt; true</span></span><br><span class="line">luke.setHeight(<span class="number">20</span>); <span class="comment">// =&gt; undefined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Jedi</span> </span>&#123;</span><br><span class="line">  jump() &#123;</span><br><span class="line">    <span class="keyword">this</span>.jumping = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  setHeight(height) &#123;</span><br><span class="line">    <span class="keyword">this</span>.height = height;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> luke = <span class="keyword">new</span> Jedi();</span><br><span class="line"></span><br><span class="line">luke.jump()</span><br><span class="line">  .setHeight(<span class="number">20</span>);</span><br></pre></td></tr></table></figure><p>4.可以写一个自定义的 toString() 方法，但要确保它能正常运行并且不会引起副作用。<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Jedi</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(options = &#123;&#125;) &#123;</span><br><span class="line">    <span class="keyword">this</span>.name = options.name || <span class="string">'no name'</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  getName() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  toString() &#123;</span><br><span class="line">    <span class="keyword">return</span> `Jedi - $&#123;<span class="keyword">this</span>.getName()&#125;`;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>5.类有默认构造器。一个空的构造函数或者只是重载父类构造函数是不必要的。<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Jedi</span> </span>&#123;</span><br><span class="line">  constructor() &#123;&#125;</span><br><span class="line"></span><br><span class="line">  getName() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rey</span> <span class="keyword">extends</span> <span class="title">Jedi</span> </span>&#123;</span><br><span class="line">  constructor(...args) &#123;</span><br><span class="line">    <span class="keyword">super</span>(...args);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rey</span> <span class="keyword">extends</span> <span class="title">Jedi</span> </span>&#123;</span><br><span class="line">  constructor(...args) &#123;</span><br><span class="line">    <span class="keyword">super</span>(...args);</span><br><span class="line">    <span class="keyword">this</span>.name = <span class="symbol">'Re</span>y';</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>6.避免重复的类成员。</p><blockquote><p>为什么？重复的类成员声明中只有最后一个生效-重复的声明肯定是一个错误。</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;</span><br><span class="line">  bar() &#123; <span class="keyword">return</span> <span class="number">1</span>; &#125;</span><br><span class="line">  bar() &#123; <span class="keyword">return</span> <span class="number">2</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;</span><br><span class="line">  bar() &#123; <span class="keyword">return</span> <span class="number">1</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;</span><br><span class="line">  bar() &#123; <span class="keyword">return</span> <span class="number">2</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h2><p>1.总是使用模组 (import/export) 而不是其他非标准模块系统。你可以编译为你喜欢的模块系统。</p><blockquote><p>为什么？模块是未来，让我们开始迈向未来吧。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> AirbnbStyleGuide = <span class="built_in">require</span>(<span class="string">'./AirbnbStyleGuide'</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = AirbnbStyleGuide.es6;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ok</span></span><br><span class="line"><span class="keyword">import</span> AirbnbStyleGuide <span class="keyword">from</span> <span class="string">'./AirbnbStyleGuide'</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> AirbnbStyleGuide.es6;</span><br><span class="line"></span><br><span class="line"><span class="comment">// best</span></span><br><span class="line"><span class="keyword">import</span> &#123; es6 &#125; <span class="keyword">from</span> <span class="string">'./AirbnbStyleGuide'</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> es6;</span><br></pre></td></tr></table></figure><p>2.不要使用通配符 import</p><blockquote><p>为什么？这样确保只有一个默认的export</p></blockquote><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> AirbnbStyleGuide <span class="keyword">from</span> <span class="string">'./AirbnbStyleGuide'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">import</span> AirbnbStyleGuide <span class="keyword">from</span> <span class="string">'./AirbnbStyleGuide'</span>;</span><br></pre></td></tr></table></figure><p>3.不要直接从import中export</p><blockquote><p>为什么？虽然一行代码简洁明了，但让 import 和 export 各司其职让事情能保持一致。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="comment">// filename es6.js</span></span><br><span class="line"><span class="keyword">export</span> &#123; es6 <span class="keyword">as</span> <span class="keyword">default</span> &#125; <span class="keyword">from</span> <span class="string">'./AirbnbStyleGuide'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="comment">// filename es6.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; es6 &#125; <span class="keyword">from</span> <span class="string">'./AirbnbStyleGuide'</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> es6;</span><br></pre></td></tr></table></figure><p>4.同一个路径只使用一次import。</p><blockquote><p>为什么？相同路径有多个import会导致代码难以维护。</p></blockquote><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">import</span> foo <span class="keyword">from</span> <span class="string">'foo'</span>;</span><br><span class="line"><span class="comment">// … some other imports … //</span></span><br><span class="line"><span class="keyword">import</span> &#123; named1, named2 &#125; <span class="keyword">from</span> <span class="string">'foo'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">import</span> foo, &#123; named1, named2 &#125; <span class="keyword">from</span> <span class="string">'foo'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">import</span> foo, &#123;</span><br><span class="line">  named1,</span><br><span class="line">  named2,</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">'foo'</span>;</span><br></pre></td></tr></table></figure><p>5.不要export可变的绑定。</p><blockquote><p>为什么？避免不确定的可变量，特别是export可变的绑定。如果某些特殊情况需要使用这种场景，通常应该export常量引用。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">let</span> foo = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">export</span> &#123; foo &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> foo = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">export</span> &#123; foo &#125;;</span><br></pre></td></tr></table></figure><p>6.模块中只有单个export,最好使用default export 。</p><blockquote><p>为什么？一个文件最好只做一件事，这样更具备可读性和可维护性。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>6.模块中只有单个export,最好使用default export 。 </p><blockquote><p>为什么？一个文件最好只做一件事，这样更具备可读性和可维护性。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>7.将所有的import语句放在文件的顶部。</p><blockquote><p>为什么？由于imports会被提升，最好保持它们在顶部以防出现不可预期的行为。</p></blockquote><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">import</span> foo <span class="keyword">from</span> <span class="string">'foo'</span>;</span><br><span class="line">foo.init();</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> bar <span class="keyword">from</span> <span class="string">'bar'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">import</span> foo <span class="keyword">from</span> <span class="string">'foo'</span>;</span><br><span class="line"><span class="keyword">import</span> bar <span class="keyword">from</span> <span class="string">'bar'</span>;</span><br><span class="line"></span><br><span class="line">foo.init();</span><br></pre></td></tr></table></figure><p>8.多行import应该和多行数组和对象一样有缩进。</p><blockquote><p>为什么？花括号需要遵循与指南中的每个其他花括号相同的缩进规则，末尾的逗号也一样。</p></blockquote><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">import</span> &#123;longNameA, longNameB, longNameC, longNameD, longNameE&#125; <span class="keyword">from</span> <span class="string">'path'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  longNameA,</span><br><span class="line">  longNameB,</span><br><span class="line">  longNameC,</span><br><span class="line">  longNameD,</span><br><span class="line">  longNameE,</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">'path'</span>;</span><br></pre></td></tr></table></figure><p>9.禁止在模块导入语句中使用Webpack加载器语法。</p><blockquote><p>为什么？在import中使用webpack 语法会将代码耦合进bundler中。推荐在webpack.config.js中配置loader 规则。</p></blockquote><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">import</span> fooSass <span class="keyword">from</span> <span class="string">'css!sass!foo.scss'</span>;</span><br><span class="line"><span class="keyword">import</span> barCss <span class="keyword">from</span> <span class="string">'style!css!bar.css'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">import</span> fooSass <span class="keyword">from</span> <span class="string">'foo.scss'</span>;</span><br><span class="line"><span class="keyword">import</span> barCss <span class="keyword">from</span> <span class="string">'bar.css'</span>;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Airbnb-JavaScript-编码风格指南（2018年最新版）&quot;&gt;&lt;a href=&quot;#Airbnb-JavaScript-编码风格指南（2018年最新版）&quot; class=&quot;headerlink&quot; title=&quot;Airbnb JavaScript 编码风格指南（2018年最新版）&quot;&gt;&lt;/a&gt;Airbnb JavaScript 编码风格指南（2018年最新版）&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Airbnb JS规范原文： &lt;a href=&quot;https://github.com/airbnb/javascript&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/airbnb/javascript&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;类型&quot;&gt;&lt;a href=&quot;#类型&quot; class=&quot;headerlink&quot; title=&quot;类型&quot;&gt;&lt;/a&gt;类型&lt;/h2&gt;&lt;p&gt;1.基本类型：直接存取&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;string&lt;/li&gt;
&lt;li&gt;number&lt;/li&gt;
&lt;li&gt;boolean&lt;/li&gt;
&lt;li&gt;null&lt;/li&gt;
&lt;li&gt;undefined&lt;/li&gt;
&lt;li&gt;symbol
    
    </summary>
    
      <category term="JavaScript" scheme="https://chongdee.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://chongdee.github.io/tags/JavaScript/"/>
    
      <category term="代码规范" scheme="https://chongdee.github.io/tags/%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83/"/>
    
  </entry>
  
  <entry>
    <title>js设计模式-享元模式</title>
    <link href="https://chongdee.github.io/2018/10/31/JavaScript%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/js%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F/"/>
    <id>https://chongdee.github.io/2018/10/31/JavaScript设计模式/js设计模式-享元模式/</id>
    <published>2018-10-31T13:46:23.000Z</published>
    <updated>2018-11-11T20:38:23.718Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2 id="享元模式"><a href="#享元模式" class="headerlink" title="享元模式"></a>享元模式</h2><p>享元模式是一种用于性能优化的模式，如果系统中因为创建了大量类似的对象而导致内存不足或占用过高这种模式就非常有用了。<br>下面通过具体的实例来看看。</p><p>假设有个内衣工厂，目前的产品有50种男士内衣与50种女士内衣，为了推销产品，工厂决定生产一些塑料模特来穿上它们的内衣拍成内衣广告。<br>正常情况需要50个男模特与50个女模特，然后让他们每人分别穿上一套内衣来拍照。不使用享元模式可能会有这种方式来写：<br><a id="more"></a></p><h2 id="内衣厂展示许多商品"><a href="#内衣厂展示许多商品" class="headerlink" title="内衣厂展示许多商品"></a>内衣厂展示许多商品</h2><p>方案一：造 50 个塑料男模和 50 个塑料女模，让他们穿上展示，代码如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Model = <span class="function"><span class="keyword">function</span> (<span class="params">sex,underwear</span>) </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.sex = sex;</span><br><span class="line"><span class="keyword">this</span>.underwear = underwear;</span><br><span class="line">&#125;</span><br><span class="line">Model.prototype.takePhoto = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'sex='</span> + <span class="keyword">this</span>.sex + <span class="string">'underwear='</span> + <span class="keyword">this</span>.underwear )</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;=<span class="number">50</span>; i++)&#123;</span><br><span class="line"> <span class="keyword">var</span> maleModel = <span class="keyword">new</span> Model(<span class="string">'male'</span>,<span class="string">'underwear'</span> + i)</span><br><span class="line"> maleModel.takePhoto();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;=<span class="number">50</span>; i++)&#123;</span><br><span class="line"> <span class="keyword">var</span> maleModel = <span class="keyword">new</span> Model(<span class="string">'female'</span>,<span class="string">'underwear'</span> + i)</span><br><span class="line"> femaleModel.takePhoto();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>方案二：造 1 个塑料男模特 1 个塑料女模特，分别试穿 50 款内衣</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Model = <span class="function"><span class="keyword">function</span> (<span class="params">sex</span>) </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.sex = sex;</span><br><span class="line">&#125;</span><br><span class="line">Model.prototype.takePhoto = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'sex='</span> + <span class="keyword">this</span>.sex + <span class="string">'underwear='</span> + <span class="keyword">this</span>.underwear )</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> maleModel = <span class="keyword">new</span> Model(<span class="string">'male'</span>),</span><br><span class="line">female    = <span class="keyword">new</span> Model(<span class="string">'female'</span>);    </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;=<span class="number">50</span>; i++)&#123;</span><br><span class="line"> maleModel.underwear = <span class="string">'underwear'</span> + i;</span><br><span class="line"> maleModel.takePhoto();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;=<span class="number">50</span>; i++)&#123;</span><br><span class="line"> female.underwear = <span class="string">'underwear'</span> + i;</span><br><span class="line"> femaleModel.takePhoto();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>对比发现：方案一创建了 100 个对象，方案二只创建了 2 个对象，在该 demo 中，gender(性别) 是内部对象，underwear(穿着) 是外部对象。</p></blockquote><h2 id="对象池"><a href="#对象池" class="headerlink" title="对象池"></a>对象池</h2><p>对象池维护一个装载空闲对象的池子，如果需要对象的时候，不是直接new，而是转从对象池里获取对象。如果对象池里没有空闲对象则创建一个新的对象，当获取的对象完成他的职责之后，再进入池子等待被下次获取。<br>对象池的原理很好理解，下面我们从地图应用来理解。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 气泡工厂的对象池为数组是私有属性被包含在工厂闭包里，这个工厂又两个暴露对外的方法，</span></span><br><span class="line"><span class="comment">// create表示获取一个div节点，recover表示回收一个div节点。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> toolTipFactory = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> toolTipPool  = [];   <span class="comment">// toolTip 对象池</span></span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line">      create : <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(toolTipPool.length === <span class="number">0</span>)&#123;</span><br><span class="line">             <span class="keyword">var</span> div = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</span><br><span class="line">             <span class="built_in">document</span>.body.appendChild(div);</span><br><span class="line">             <span class="keyword">return</span> div;</span><br><span class="line">        &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">             <span class="keyword">return</span> toolTipPool.shift(); <span class="comment">//shift a dom</span></span><br><span class="line">        &#125;,</span><br><span class="line">        recover : <span class="function"><span class="keyword">function</span> (<span class="params">tooltipDom</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> toolTipPool.push(tooltipDom);  </span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 第一次搜索（2个气泡）</span></span><br><span class="line"><span class="keyword">var</span> ary = [];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>, str; str = [<span class="string">'A'</span>,<span class="string">'B'</span>][i++])&#123;  <span class="comment">// get ary elem</span></span><br><span class="line"> <span class="keyword">var</span> toolTip = toolTipFactory.create();</span><br><span class="line"> toolTip.innerHTML = str;</span><br><span class="line"> ary.push(toolTip)</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 现在开始回收节点：</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span> , toolTip ; toolTip = ary[i++])&#123;</span><br><span class="line">toolTip.recover(toolTip)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 第二次搜索（6个气泡）</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i =<span class="number">0</span> , str; str = [<span class="string">'A'</span>,<span class="string">'B'</span>,<span class="string">'C'</span>,<span class="string">'D'</span>,<span class="string">'E'</span>,<span class="string">'F'</span>][i++]; )&#123;</span><br><span class="line"> <span class="keyword">var</span> toolTip = toolTipFactory.create();</span><br><span class="line"> toolTip.innerHTML(str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>现在页面中已经出现了6个节点，上一次创建好的节点被共享给了下一次操作。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;享元模式&quot;&gt;&lt;a href=&quot;#享元模式&quot; class=&quot;headerlink&quot; title=&quot;享元模式&quot;&gt;&lt;/a&gt;享元模式&lt;/h2&gt;&lt;p&gt;享元模式是一种用于性能优化的模式，如果系统中因为创建了大量类似的对象而导致内存不足或占用过高这种模式就非常有用了。&lt;br&gt;下面通过具体的实例来看看。&lt;/p&gt;
&lt;p&gt;假设有个内衣工厂，目前的产品有50种男士内衣与50种女士内衣，为了推销产品，工厂决定生产一些塑料模特来穿上它们的内衣拍成内衣广告。&lt;br&gt;正常情况需要50个男模特与50个女模特，然后让他们每人分别穿上一套内衣来拍照。不使用享元模式可能会有这种方式来写：&lt;br&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="https://chongdee.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://chongdee.github.io/tags/JavaScript/"/>
    
      <category term="JS设计模式" scheme="https://chongdee.github.io/tags/JS%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>js设计模式-状态模式</title>
    <link href="https://chongdee.github.io/2018/10/31/JavaScript%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/js%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F/"/>
    <id>https://chongdee.github.io/2018/10/31/JavaScript设计模式/js设计模式-状态模式/</id>
    <published>2018-10-31T13:45:44.000Z</published>
    <updated>2018-11-11T20:43:29.193Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2 id="状态模式的基础"><a href="#状态模式的基础" class="headerlink" title="状态模式的基础"></a>状态模式的基础</h2><p>定义：状态模式（State）定义一个对象，这个对象可以通过管理其状态从而使得应用程序作出相应的变化。<br>状态模式是一个非常常用的设计模式，它主要有两个角色组成：<br>（1）环境类：拥有一个状态成员，可以修改其状态并作出相应反应。<br>（2）状态类：表示一种状态，包含其相应的处理方法<br>作用：状态模式就是一种适合多种状态场景下的设计模式。使用状态模式可以让代码更加清晰，提高应用程序的维护性和扩展性。<br>使用场景：文件下载（开始、暂停、完成、失败等）、红绿灯<br><a id="more"></a></p><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><p>比如超级玛丽，就可能同时有好几个状态比如 跳跃，移动，射击，蹲下 等，如果对这些动作一个个进行处理判断，需要多个if-else或者switch不仅丑陋不说，而且在遇到有组合动作的时候，实现就会变的更为复杂，这里可以使用状态模式来实现。</p><p>状态模式的思路是：首先创建一个状态对象或者数组，内部保存状态变量，然后内部封装好每种动作对应的状态，然后状态对象返回一个接口对象，它可以对内部的状态修改或者调用。</p><h3 id="红绿灯"><a href="#红绿灯" class="headerlink" title="红绿灯"></a>红绿灯</h3><p>定义环境类（红绿灯对象）<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> trafficLight = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> currentLight = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line">change: <span class="function"><span class="keyword">function</span> (<span class="params">light</span>) </span>&#123;</span><br><span class="line">currentLight = light;</span><br><span class="line">currentLight.go();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line">定义状态类（三种不同颜色的灯）</span><br><span class="line"></span><br><span class="line"><span class="comment">// 红灯</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">RedLight</span>(<span class="params"></span>) </span>&#123; &#125;</span><br><span class="line">RedLight.prototype.go = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"this is red light"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 绿灯</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">GreenLight</span>(<span class="params"></span>) </span>&#123; &#125;</span><br><span class="line">GreenLight.prototype.go = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"this is green light"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 黄灯</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">YellowLight</span>(<span class="params"></span>) </span>&#123; &#125;</span><br><span class="line">YellowLight.prototype.go = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"this is yellow light"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">trafficLight.change(<span class="keyword">new</span> RedLight()); <span class="comment">// this is red light</span></span><br><span class="line">trafficLight.change(<span class="keyword">new</span> YellowLight()); <span class="comment">// this is yellow light</span></span><br></pre></td></tr></table></figure></p><h3 id="菜单组件"><a href="#菜单组件" class="headerlink" title="菜单组件"></a>菜单组件</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Menu</span>(<span class="params"></span>) </span>&#123; &#125;</span><br><span class="line">Menu.prototype.toggle = <span class="function"><span class="keyword">function</span> (<span class="params">state</span>) </span>&#123;</span><br><span class="line">state();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> menuStates = &#123;</span><br><span class="line"><span class="string">"show"</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"the menu is showing"</span>);</span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">"hide"</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"the menu is hiding"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> menu = <span class="keyword">new</span> Menu();</span><br><span class="line">menu.toggle(menuStates.show);</span><br><span class="line">menu.toggle(menuStates.hide);</span><br></pre></td></tr></table></figure><blockquote><p>这段代码实例化了一个Menu对象，然后分别切换了显示和隐藏两种状态，如果有第三种状态，我们只需要menuStates添加相应的状态和处理程序即可。</p></blockquote><h3 id="超级玛丽动作"><a href="#超级玛丽动作" class="headerlink" title="超级玛丽动作"></a>超级玛丽动作</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> SuperMarry = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;    </span><br><span class="line">  <span class="keyword">let</span> _currentState = [],        <span class="comment">// 状态数组</span></span><br><span class="line">      states = &#123;</span><br><span class="line">        jump() &#123;<span class="built_in">console</span>.log(<span class="string">'跳跃!'</span>)&#125;,</span><br><span class="line">        move() &#123;<span class="built_in">console</span>.log(<span class="string">'移动!'</span>)&#125;,</span><br><span class="line">        shoot() &#123;<span class="built_in">console</span>.log(<span class="string">'射击!'</span>)&#125;,</span><br><span class="line">        squat() &#123;<span class="built_in">console</span>.log(<span class="string">'蹲下!'</span>)&#125;</span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">const</span> Action = &#123;</span><br><span class="line">    changeState(arr) &#123;  <span class="comment">// 更改当前动作</span></span><br><span class="line">      _currentState = arr</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span></span><br><span class="line">    &#125;,</span><br><span class="line">    goes() &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'触发动作'</span>)</span><br><span class="line">      _currentState.forEach(<span class="function"><span class="params">T</span> =&gt;</span> states[T] &amp;&amp; states[T]())</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    change: Action.changeState,</span><br><span class="line">    go: Action.goes</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)()</span><br><span class="line"></span><br><span class="line">SuperMarry</span><br><span class="line">    .change([<span class="string">'jump'</span>, <span class="string">'shoot'</span>])</span><br><span class="line">    .go()                    <span class="comment">// 触发动作  跳跃!  射击!</span></span><br><span class="line">    .go()                    <span class="comment">// 触发动作  跳跃!  射击!</span></span><br><span class="line">    .change([<span class="string">'squat'</span>])</span><br><span class="line">    .go()                    <span class="comment">// 触发动作  蹲下!</span></span><br></pre></td></tr></table></figure><p>这里可以使用ES6的class优化一下：<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SuperMarry</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">this</span>._currentState = []</span><br><span class="line">    <span class="keyword">this</span>.states = &#123;</span><br><span class="line">      jump() &#123;console.log(<span class="string">'跳跃!'</span>)&#125;,</span><br><span class="line">      move() &#123;console.log(<span class="string">'移动!'</span>)&#125;,</span><br><span class="line">      shoot() &#123;console.log(<span class="string">'射击!'</span>)&#125;,</span><br><span class="line">      squat() &#123;console.log(<span class="string">'蹲下!'</span>)&#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  change(arr) &#123;  <span class="comment">// 更改当前动作</span></span><br><span class="line">    <span class="keyword">this</span>._currentState = arr</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  go() &#123;</span><br><span class="line">    console.log(<span class="string">'触发动作'</span>)</span><br><span class="line">    <span class="keyword">this</span>._currentState.forEach(T =&gt; <span class="keyword">this</span>.states[T] &amp;&amp; <span class="keyword">this</span>.states[T]())</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">new SuperMarry()</span><br><span class="line">    .change([<span class="string">'jump'</span>, <span class="string">'shoot'</span>])</span><br><span class="line">    .go()                    <span class="comment">// 触发动作  跳跃!  射击!</span></span><br><span class="line">    .go()                    <span class="comment">// 触发动作  跳跃!  射击!</span></span><br><span class="line">    .change([<span class="string">'squat'</span>])</span><br><span class="line">    .go()                    <span class="comment">// 触发动作  蹲下!</span></span><br></pre></td></tr></table></figure></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>状态模式的使用场景也特别明确，有如下两点：</p><p>一个对象的行为取决于它的状态，并且它必须在运行时刻根据状态改变它的行为。<br>一个操作中含有大量的分支语句，而且这些分支语句依赖于该对象的状态。状态通常为一个或多个枚举常量的表示。<br>简而言之，当遇到很多同级if-else或者switch的时候，可以使用状态模式来进行简化。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;状态模式的基础&quot;&gt;&lt;a href=&quot;#状态模式的基础&quot; class=&quot;headerlink&quot; title=&quot;状态模式的基础&quot;&gt;&lt;/a&gt;状态模式的基础&lt;/h2&gt;&lt;p&gt;定义：状态模式（State）定义一个对象，这个对象可以通过管理其状态从而使得应用程序作出相应的变化。&lt;br&gt;状态模式是一个非常常用的设计模式，它主要有两个角色组成：&lt;br&gt;（1）环境类：拥有一个状态成员，可以修改其状态并作出相应反应。&lt;br&gt;（2）状态类：表示一种状态，包含其相应的处理方法&lt;br&gt;作用：状态模式就是一种适合多种状态场景下的设计模式。使用状态模式可以让代码更加清晰，提高应用程序的维护性和扩展性。&lt;br&gt;使用场景：文件下载（开始、暂停、完成、失败等）、红绿灯&lt;br&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="https://chongdee.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://chongdee.github.io/tags/JavaScript/"/>
    
      <category term="JS设计模式" scheme="https://chongdee.github.io/tags/JS%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>js设计模式-职责链模式</title>
    <link href="https://chongdee.github.io/2018/10/31/JavaScript%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/js%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%81%8C%E8%B4%A3%E9%93%BE%E6%A8%A1%E5%BC%8F/"/>
    <id>https://chongdee.github.io/2018/10/31/JavaScript设计模式/js设计模式-职责链模式/</id>
    <published>2018-10-31T13:45:16.000Z</published>
    <updated>2018-11-11T20:44:30.480Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2 id="职责链模式的基础"><a href="#职责链模式的基础" class="headerlink" title="职责链模式的基础"></a>职责链模式的基础</h2><p>定义：职责链模式（Chain of responsibility）是使多个对象都有机会处理请求，从而避免请求的发送者和接受者之间的耦合关系。将这个对象连成一条链，并沿着这条链传递该请求，直到有一个对象处理他为止。职责链模式的名字非常形象，一系列可能会处理请求的对象被该连接成一条链，请求在这些对象之间依次传递，直到遇到一个可以处理它的对象，我们把这些对象成为链中的节点。<br>优点：请求发送者只需要知道链中的第一个节点，从而弱化了发送者和一组接收者之间的强联系。</p><p>使用场景：挤公交车递钱（只有售票员可以收钱）、交押金预定手机<br><a id="more"></a></p><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><p>假设一个电视购物网站对于某部新上市的手机经过了2轮缴纳500元定金与200元定金的预定，现在已经到了正式购买的阶段。<br>支付了500元定金的用户在购买阶段可以使用100元优惠券，200元定金可以使用50元优惠券，普通用户没有优惠且当库存不足不一定能买到。</p><p>orderType: 表示订单类型(定金或者普通用户),code的值为1时候是500元定金用户，为2是200元定金用户，为3则是普通用户。</p><p>pay : 表示用户是否支付定金，用户虽然下过500元定金的订单但是如果他一直没有支付定金，那么只能降级为普通用户。</p><p>stock : 仅用户普通用户的库存数量，定金用户不受限制。</p><p>简洁版：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 500 order</span></span><br><span class="line"><span class="keyword">var</span> order500 = <span class="function"><span class="keyword">function</span> (<span class="params">orderType,pay,stock</span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(orderType === <span class="number">1</span> &amp;&amp; pay === <span class="literal">true</span>)&#123;</span><br><span class="line">     <span class="built_in">console</span>.log(<span class="string">'500 rmb deposit, get 100 coupon '</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">     order100(orderType,pay,stock)  <span class="comment">// req pass to 200 order</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> order200 = <span class="function"><span class="keyword">function</span> (<span class="params">orderType,pay,stock</span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(orderType === <span class="number">2</span> &amp;&amp; pay === <span class="literal">true</span>)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'200 rmb deposit , get 50 coupon'</span>)</span><br><span class="line">&#125; <span class="keyword">else</span>&#123;</span><br><span class="line">    orderNormal(orderType,pay,stock) </span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> orderNormal = <span class="function"><span class="keyword">function</span> (<span class="params">orderType,pay,stock</span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(stock &gt; <span class="number">0</span>)&#123;</span><br><span class="line">     <span class="built_in">console</span>.log(<span class="string">'normal buy no coupon'</span>)</span><br><span class="line">&#125; <span class="keyword">else</span>&#123;</span><br><span class="line">     <span class="built_in">console</span>.log(<span class="string">'the stock lack'</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//test result:</span></span><br><span class="line">order500(<span class="number">1</span>,<span class="literal">true</span>,<span class="number">500</span>);</span><br><span class="line">order500(<span class="number">2</span>,<span class="literal">true</span>,<span class="number">500</span>);</span><br><span class="line">order500(<span class="number">3</span>,<span class="literal">true</span>,<span class="number">500</span>);</span><br><span class="line">order500(<span class="number">1</span>,<span class="literal">false</span>,<span class="number">500</span>);</span><br></pre></td></tr></table></figure></p><blockquote><p>现在已经基本符合了职责链模式定义，下面实现灵活可拆分的职责链模式，我的意思就是不要像上述那样面向过程的从500传递到200然后再到普通，万一我们想传递到100呢？ 岂不是还得要大修一番？</p></blockquote><p><strong>职责链模式重构</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 500 order</span></span><br><span class="line"><span class="keyword">var</span> order500 = <span class="function"><span class="keyword">function</span> (<span class="params">orderType,pay,stock</span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(orderType === <span class="number">1</span> &amp;&amp; pay === <span class="literal">true</span>)&#123;</span><br><span class="line">     <span class="built_in">console</span>.log(<span class="string">'500 rmb deposit, get 100 coupon '</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'nextSuccessor'</span>  <span class="comment">// unknow the next node but always pass to next.</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> order200 = <span class="function"><span class="keyword">function</span> (<span class="params">orderType,pay,stock</span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(orderType === <span class="number">2</span> &amp;&amp; pay === <span class="literal">true</span>)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'200 rmb deposit , get 50 coupon'</span>)</span><br><span class="line">&#125; <span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'nextSuccessor'</span>; </span><br><span class="line">&#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> orderNormal = <span class="function"><span class="keyword">function</span> (<span class="params">orderType,pay,stock</span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(stock &gt; <span class="number">0</span>)&#123;</span><br><span class="line">     <span class="built_in">console</span>.log(<span class="string">'normal buy no coupon'</span>)</span><br><span class="line">&#125; <span class="keyword">else</span>&#123;</span><br><span class="line">     <span class="built_in">console</span>.log(<span class="string">'the stock lack'</span>)</span><br><span class="line">&#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> Chain = <span class="function"><span class="keyword">function</span> (<span class="params">fn</span>) </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.fn = fn;</span><br><span class="line"><span class="keyword">this</span>.successor = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">Chain.prototype.setNextSuccessor = <span class="function"><span class="keyword">function</span> (<span class="params">successor</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.successor = successor;</span><br><span class="line">&#125;</span><br><span class="line">Chain.prototype.passRequest = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> ret = <span class="keyword">this</span>.fn.apply(<span class="keyword">this</span>.arguments);</span><br><span class="line"><span class="keyword">if</span>(ret === <span class="string">'nextSuccessor'</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.successor &amp;&amp; <span class="keyword">this</span>.successor.passRequest.apply(<span class="keyword">this</span>.successor,<span class="built_in">arguments</span>)</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//现在我们把3个订单函数分别包装成职责链的节点</span></span><br><span class="line"><span class="keyword">var</span> chainOrder500 = <span class="keyword">new</span> Chain(order500);</span><br><span class="line"><span class="keyword">var</span> chainOrder200 = <span class="keyword">new</span> Chain(order200);</span><br><span class="line"><span class="keyword">var</span> chainOrderNormal = <span class="keyword">new</span> Chain(orderNormal);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//最后把请求传递给第一个节点</span></span><br><span class="line">    chainOrder500.setNextSuccessor(chainOrder200)</span><br><span class="line">    chainOrder200.setNextSuccessor(chainOrderNormal)</span><br><span class="line"></span><br><span class="line"><span class="comment">//最后把请求传递给第一个节点</span></span><br><span class="line"><span class="comment">//test</span></span><br><span class="line">chainOrder500.passRequest(<span class="number">1</span>,<span class="literal">true</span>,<span class="number">500</span>);</span><br><span class="line">chainOrder500.passRequest(<span class="number">2</span>,<span class="literal">true</span>,<span class="number">500</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过改进，我们可以自由灵活的增加移除和链中的节点顺序，假如我们        又想支持</span></span><br><span class="line"><span class="comment">//300元定金购买，那我们就在改链中增加一个节点即可：</span></span><br><span class="line"><span class="keyword">var</span> order300 = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="comment">// todo</span></span><br><span class="line">&#125;;</span><br><span class="line">chainOrder300 = <span class="keyword">new</span> Chain(chainOrder300)</span><br><span class="line">chainOrder500.setNextSuccessor(chainOrder300)</span><br><span class="line">chainOrder300.setNextSuccessor(chainOrder200)</span><br></pre></td></tr></table></figure></p><p>我们可以自由灵活的增加移除和链中的节点顺序，这样就很简单能满足瞬息万变的需求了。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;职责链模式的基础&quot;&gt;&lt;a href=&quot;#职责链模式的基础&quot; class=&quot;headerlink&quot; title=&quot;职责链模式的基础&quot;&gt;&lt;/a&gt;职责链模式的基础&lt;/h2&gt;&lt;p&gt;定义：职责链模式（Chain of responsibility）是使多个对象都有机会处理请求，从而避免请求的发送者和接受者之间的耦合关系。将这个对象连成一条链，并沿着这条链传递该请求，直到有一个对象处理他为止。职责链模式的名字非常形象，一系列可能会处理请求的对象被该连接成一条链，请求在这些对象之间依次传递，直到遇到一个可以处理它的对象，我们把这些对象成为链中的节点。&lt;br&gt;优点：请求发送者只需要知道链中的第一个节点，从而弱化了发送者和一组接收者之间的强联系。&lt;/p&gt;
&lt;p&gt;使用场景：挤公交车递钱（只有售票员可以收钱）、交押金预定手机&lt;br&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="https://chongdee.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://chongdee.github.io/tags/JavaScript/"/>
    
      <category term="JS设计模式" scheme="https://chongdee.github.io/tags/JS%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>js设计模式-备忘录模式</title>
    <link href="https://chongdee.github.io/2018/10/31/JavaScript%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/js%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%A4%87%E5%BF%98%E5%BD%95%E6%A8%A1%E5%BC%8F/"/>
    <id>https://chongdee.github.io/2018/10/31/JavaScript设计模式/js设计模式-备忘录模式/</id>
    <published>2018-10-31T13:45:00.000Z</published>
    <updated>2018-11-11T20:42:32.259Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2 id="备忘录模式的基础"><a href="#备忘录模式的基础" class="headerlink" title="备忘录模式的基础"></a>备忘录模式的基础</h2><p>定义：在不破坏封装性的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态。这样就可以将该对象恢复到原先保存的状态<br>作用：在我们的开发中偶尔会遇到这样一种情况，需要对用户的行为进行撤销。要想实现撤销，首先需要保存软件系统的历史状态，当用户执行撤销时用之前的状态覆盖当前状态。本节介绍的备忘录模式提供了一种状态恢复的实现机制，使得用户可以方便的回到一个特定的历史步骤。备忘录模式在js中经常用于数据缓存。<br>使用场景：分页控件、撤销组件</p><a id="more"></a><h2 id="分页控件"><a href="#分页控件" class="headerlink" title="分页控件"></a>分页控件</h2><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">var Page = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">let page = <span class="number">1</span>,</span><br><span class="line">cache = &#123;&#125;,</span><br><span class="line"><span class="keyword">data</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">function</span><span class="params">( page )</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> ( cache[ page ] )&#123;</span><br><span class="line"><span class="keyword">data</span> =  cache[ page ];</span><br><span class="line">render( <span class="keyword">data</span> );</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">Ajax.send( <span class="string">'cgi.xx.com/xxx'</span>, <span class="function"><span class="keyword">function</span><span class="params">( data )</span></span>&#123;</span><br><span class="line">   cache[ page ] = <span class="keyword">data</span>;</span><br><span class="line">   render( <span class="keyword">data</span> );</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;();</span><br></pre></td></tr></table></figure><blockquote><p>分页控件, 从服务器获得某一页的数据后可以存入缓存。以后再翻回这一页的时候，可以直接使用缓存里的数据而无需再次请求服务器。</p></blockquote><h2 id="高阶函数实现缓存-备忘模式"><a href="#高阶函数实现缓存-备忘模式" class="headerlink" title="高阶函数实现缓存(备忘模式)"></a>高阶函数实现缓存(备忘模式)</h2><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> add = <span class="function"><span class="keyword">function</span><span class="params">(a)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>每次运行add(1)的时候都会输出2，但是输入1每次还是会计算一下1+1，如果是开销很大的操作的话就比较消耗性能了，这里其实可以对这个计算进行一次缓存。<br>所以这里可以利用高阶函数的思想来实现一个简单的缓存，我可以在函数内部用一个对象存储输入的参数，如果下次再输入相同的参数，那就比较一下对象的属性，把值从这个对象里面取出来。</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> memorize = <span class="function"><span class="keyword">function</span><span class="params">(fn)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> cache = &#123;&#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span><span class="params">(<span class="rest_arg">...args</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> _args = JSON.stringify(args)</span><br><span class="line">    <span class="keyword">return</span> cache[_args] || (cache[_args] = fn.apply(fn, args))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> add = <span class="function"><span class="keyword">function</span><span class="params">(a)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a + <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> adder = memorize(add)</span><br><span class="line">adder(<span class="number">1</span>)    <span class="comment">// 2    cache: &#123; '[1]': 2 &#125;</span></span><br><span class="line">adder(<span class="number">1</span>)    <span class="comment">// 2    cache: &#123; '[1]': 2 &#125;</span></span><br><span class="line">adder(<span class="number">2</span>)    <span class="comment">// 3    cache: &#123; '[1]': 2, '[2]': 3 &#125;</span></span><br></pre></td></tr></table></figure><p>用JSON.stringify把传给 adder 函数的参数变成了字符串，并且把它当做 cache 的 key，将 add 函数运行的结果当做 value 传到了 cache 里面，这样 memorize 的匿名函数运行的时候会返回cache[_args]，如果cache[_args]不存在的话就返回fn.apply(fn,args)，把fn.apply(fn, arguments)赋值给cache[_args]并返回。<br>注意：cache不可以是Map，因为Map的键是使用===比较的，[1]！==[1]，因此即使传入相同的对象或者数组，那么还是被存为不同的键。</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> memorize = <span class="function"><span class="keyword">function</span><span class="params">(fn)</span> </span>&#123;        <span class="comment">//  X 错误示范</span></span><br><span class="line">  <span class="keyword">const</span> cache = <span class="keyword">new</span> Map()</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span><span class="params">(<span class="rest_arg">...args</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> cache.get(args) || cache.set(args, fn.apply(fn, args)).get(args)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> add = <span class="function"><span class="keyword">function</span><span class="params">(a)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a + <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> adder = memorize(add)</span><br><span class="line">adder(<span class="number">1</span>)    <span class="comment">// 2    cache: &#123; [ 1 ] =&gt; 2 &#125;</span></span><br><span class="line">adder(<span class="number">1</span>)    <span class="comment">// 2    cache: &#123; [ 1 ] =&gt; 2, [ 1 ] =&gt; 2 &#125;</span></span><br><span class="line">adder(<span class="number">2</span>)    <span class="comment">// 3    cache: &#123; [ 1 ] =&gt; 2, [ 1 ] =&gt; 2, [ 2 ] =&gt; 3 &#125;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;备忘录模式的基础&quot;&gt;&lt;a href=&quot;#备忘录模式的基础&quot; class=&quot;headerlink&quot; title=&quot;备忘录模式的基础&quot;&gt;&lt;/a&gt;备忘录模式的基础&lt;/h2&gt;&lt;p&gt;定义：在不破坏封装性的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态。这样就可以将该对象恢复到原先保存的状态&lt;br&gt;作用：在我们的开发中偶尔会遇到这样一种情况，需要对用户的行为进行撤销。要想实现撤销，首先需要保存软件系统的历史状态，当用户执行撤销时用之前的状态覆盖当前状态。本节介绍的备忘录模式提供了一种状态恢复的实现机制，使得用户可以方便的回到一个特定的历史步骤。备忘录模式在js中经常用于数据缓存。&lt;br&gt;使用场景：分页控件、撤销组件&lt;/p&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="https://chongdee.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://chongdee.github.io/tags/JavaScript/"/>
    
      <category term="JS设计模式" scheme="https://chongdee.github.io/tags/JS%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>js设计模式-组合模式</title>
    <link href="https://chongdee.github.io/2018/10/31/JavaScript%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/js%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F/"/>
    <id>https://chongdee.github.io/2018/10/31/JavaScript设计模式/js设计模式-组合模式/</id>
    <published>2018-10-31T13:44:39.000Z</published>
    <updated>2018-11-11T20:44:17.448Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2 id="组合模式的基础"><a href="#组合模式的基础" class="headerlink" title="组合模式的基础"></a>组合模式的基础</h2><p>定义：组合模式（Composite）将对象组合成树形结构以表示“部分-整体”的层次结构，组合模式使得用户对单个对象和组合对象的使用具有一致性。<br>作用：组合模式让你可以优化处理递归或分级数据结构。<br>使用场景：系统目录结构、网站导航结构、文件扫描、DOM的机制，一个DOM节点可以包含子节点，不管是父节点还是子节点都有添加、删除、遍历子节点的通用功能。<br>该模式由两部分构成：<br>1.子对象（Leaf）：组成组合对象的最基本对象。<br>2.组合对象（Composite）：由子对象组合起来的复杂对象。</p><a id="more"></a><h2 id="组合模式的例子"><a href="#组合模式的例子" class="headerlink" title="组合模式的例子"></a>组合模式的例子</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义组合对象（文件夹）</span></span><br><span class="line"><span class="keyword">let</span> Folder = <span class="function"><span class="keyword">function</span>(<span class="params"> name </span>)</span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line"><span class="keyword">this</span>.files = [];</span><br><span class="line">&#125;;</span><br><span class="line">Folder.prototype.add = <span class="function"><span class="keyword">function</span>(<span class="params"> file </span>)</span>&#123;</span><br><span class="line"><span class="keyword">this</span>.files.push( file );</span><br><span class="line">&#125;;</span><br><span class="line">Folder.prototype.scan = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'开始文件扫描:'</span> + <span class="keyword">this</span>.name);</span><br><span class="line"><span class="keyword">for</span>( <span class="keyword">let</span> i = <span class="number">0</span>, file, files = <span class="keyword">this</span>.files; file = files[i++]; )&#123;</span><br><span class="line">file.scan();</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//定义叶子对象（文件）</span></span><br><span class="line"><span class="keyword">let</span> File = <span class="function"><span class="keyword">function</span>(<span class="params"> name </span>)</span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;;</span><br><span class="line">File.prototype.add = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'文件下面不能再添加文件'</span>);</span><br><span class="line">&#125;;</span><br><span class="line">File.prototype.scan = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'开始扫瞄：'</span> + <span class="keyword">this</span>.name);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> folder = <span class="keyword">new</span> Folder(<span class="string">'前端学习'</span>);</span><br><span class="line"><span class="keyword">let</span> folder1 = <span class="keyword">new</span> Folder(<span class="string">'JS学习'</span>);</span><br><span class="line"><span class="keyword">let</span> folder2 = <span class="keyword">new</span> Folder(<span class="string">'JQ学习'</span>);</span><br><span class="line"><span class="keyword">let</span> file1 = <span class="keyword">new</span> File(<span class="string">'JS设计模式'</span>);</span><br><span class="line"><span class="keyword">let</span> file2 = <span class="keyword">new</span> File(<span class="string">'JQ实战'</span>);</span><br><span class="line"><span class="keyword">let</span> file3 = <span class="keyword">new</span> File(<span class="string">'前端性能'</span>);</span><br><span class="line">folder1.add(file1);</span><br><span class="line">folder2.add(file2);</span><br><span class="line">folder.add(folder1);</span><br><span class="line">folder.add(folder2);</span><br><span class="line">folder.add(file3);</span><br><span class="line">folder.scan();</span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line">开始文件扫描：前端学习</span><br><span class="line">开始文件扫描：JS学习</span><br><span class="line">开始扫瞄：JS设计模式</span><br><span class="line">开始文件扫描：JQ学习</span><br><span class="line">开始扫瞄：JQ实战</span><br><span class="line">开始扫瞄：前端性能</span><br></pre></td></tr></table></figure><blockquote><p>父类和子类必须具有相同的接口（方法），只不过它们相同的方法具有的功能不相同，例如父类的实例具有 add 方法作用是，可以添加文件夹 或者 文件。子类的实例具有 add 方法则不能添加文件夹 或者 文件，却抛出一个错误（子类重写父类的方法）。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;组合模式的基础&quot;&gt;&lt;a href=&quot;#组合模式的基础&quot; class=&quot;headerlink&quot; title=&quot;组合模式的基础&quot;&gt;&lt;/a&gt;组合模式的基础&lt;/h2&gt;&lt;p&gt;定义：组合模式（Composite）将对象组合成树形结构以表示“部分-整体”的层次结构，组合模式使得用户对单个对象和组合对象的使用具有一致性。&lt;br&gt;作用：组合模式让你可以优化处理递归或分级数据结构。&lt;br&gt;使用场景：系统目录结构、网站导航结构、文件扫描、DOM的机制，一个DOM节点可以包含子节点，不管是父节点还是子节点都有添加、删除、遍历子节点的通用功能。&lt;br&gt;该模式由两部分构成：&lt;br&gt;1.子对象（Leaf）：组成组合对象的最基本对象。&lt;br&gt;2.组合对象（Composite）：由子对象组合起来的复杂对象。&lt;/p&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="https://chongdee.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://chongdee.github.io/tags/JavaScript/"/>
    
      <category term="JS设计模式" scheme="https://chongdee.github.io/tags/JS%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>js设计模式-模板方法模式</title>
    <link href="https://chongdee.github.io/2018/10/31/JavaScript%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/js%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/"/>
    <id>https://chongdee.github.io/2018/10/31/JavaScript设计模式/js设计模式-模板方法模式/</id>
    <published>2018-10-31T13:44:24.000Z</published>
    <updated>2018-11-11T20:43:47.867Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2 id="模版方法模式"><a href="#模版方法模式" class="headerlink" title="模版方法模式"></a>模版方法模式</h2><p>定义：模板方法模式由二部分组成，第一部分是抽象父类，第二部分是具体实现的子类，一般的情况下是抽象父类封装了子类的算法框架，包括实现一些公共方法及封装子类中所有方法的执行顺序，子类可以继承这个父类，并且可以在子类中重写父类的方法，从而实现自己的业务逻辑。<br>使用场景：（主要用于步骤相似的事情）</p><ol><li>泡饮品（茶 和 coffee）</li><li>公司面试<a id="more"></a></li></ol><h2 id="泡饮品（茶-和-coffee）"><a href="#泡饮品（茶-和-coffee）" class="headerlink" title="泡饮品（茶 和 coffee）"></a>泡饮品（茶 和 coffee）</h2><p>在例子中聊，泡茶和泡咖啡有同样的步骤，比如烧开水（boilWater）、冲泡（brew）、倒在杯子里（pourOnCup），加小料（addCondiments）等等。但每种饮料冲泡的方法以及所加的小料不一样，所以我们可以利用模板方法实现这个主要步骤。</p><p>首先先来定义抽象步骤（模板）：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> CaffeineBeverage = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line">CaffeineBeverage.prototype.prepareRecipe = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.boilWater();</span><br><span class="line">    <span class="keyword">this</span>.brew();</span><br><span class="line">    <span class="keyword">this</span>.pourOnCup();</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.customerWantsCondiments()) &#123;</span><br><span class="line">        <span class="comment">// 如果想加小料，就加上</span></span><br><span class="line">         <span class="keyword">this</span>.addCondiments();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">CaffeineBeverage.prototype.boilWater = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"将水烧开!"</span>);</span><br><span class="line">&#125;;</span><br><span class="line">CaffeineBeverage.prototype.pourOnCup = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"将饮料到再杯子里!"</span>);</span><br><span class="line">&#125;;</span><br><span class="line">CaffeineBeverage.prototype.brew = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"该方法必须重写!"</span>);</span><br><span class="line">&#125;;</span><br><span class="line">CaffeineBeverage.prototype.addCondiments = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"该方法必须重写!"</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 默认加上小料</span></span><br><span class="line">CaffeineBeverage.prototype.customerWantsCondiments = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>下面两个函数分别是冲咖啡和冲茶所对应的函数：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 冲咖啡</span></span><br><span class="line"><span class="keyword">var</span> Coffee = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    CaffeineBeverage.apply(<span class="keyword">this</span>);</span><br><span class="line">&#125;;</span><br><span class="line">Coffee.prototype = <span class="keyword">new</span> CaffeineBeverage();</span><br><span class="line">Coffee.prototype.brew = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"从咖啡机想咖啡倒进去!"</span>);</span><br><span class="line">&#125;;</span><br><span class="line">Coffee.prototype.addCondiments = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"添加糖和牛奶"</span>);</span><br><span class="line">&#125;;</span><br><span class="line">Coffee.prototype.customerWantsCondiments = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> confirm(<span class="string">"你想添加糖和牛奶吗？"</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//冲茶</span></span><br><span class="line"><span class="keyword">var</span> Tea = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    CaffeineBeverage.apply(<span class="keyword">this</span>);</span><br><span class="line">&#125;;</span><br><span class="line">Tea.prototype = <span class="keyword">new</span> CaffeineBeverage();</span><br><span class="line">Tea.prototype.brew = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"泡茶叶!"</span>);</span><br><span class="line">&#125;;</span><br><span class="line">Tea.prototype.addCondiments = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"添加柠檬!"</span>);</span><br><span class="line">&#125;;</span><br><span class="line">Tea.prototype.customerWantsCondiments = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> confirm(<span class="string">"你想添加柠檬嘛？"</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>使用confirm，可以让用户自己选择加不加小料，很不错嘛！</p><p>公司面试（百度面试 和 阿里面试）</p><h2 id="面试例子"><a href="#面试例子" class="headerlink" title="面试例子"></a>面试例子</h2><p>定义父类<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义父类</span></span><br><span class="line"><span class="keyword">let</span> ITInterview = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 笔试</span></span><br><span class="line">ITInterview.prototype.writtenTest = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"某公司笔试测试"</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 技术面试</span></span><br><span class="line">ITInterview.prototype.technicalInterview = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"某公司技术面试测试"</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 领导面试</span></span><br><span class="line">ITInterview.prototype.leader = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"某公司leader来面试了"</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等通知</span></span><br><span class="line">ITInterview.prototype.waitNotice = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"某公司的offer到了"</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">定义模版方法</span><br><span class="line"><span class="comment">// 作用：封装了子类的算法框架，包括实现一些公共方法及封装子类中所有方法的执行顺序。</span></span><br><span class="line">ITInterview.prototype.init = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">this</span>.writtenTest();</span><br><span class="line"><span class="keyword">this</span>.technicalInterview();</span><br><span class="line"><span class="keyword">this</span>.leader();</span><br><span class="line"><span class="keyword">this</span>.waitNotice();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>定义子类</p><p>首先子类需要重父类哪里继承所有的方法<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> BaiDuInterview = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line">BaiDuInterview.prototype = <span class="keyword">new</span> ITInterview();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 笔试</span></span><br><span class="line">BaiDuInterview.prototype.writtenTest = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"百度公司笔试测试"</span>); <span class="comment">// 无非就是面试题不一样呗</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 技术面试</span></span><br><span class="line">BaiDuInterview.prototype.technicalInterview = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"百度公司技术面试测试"</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 领导面试</span></span><br><span class="line">BaiDuInterview.prototype.leader = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"百度公司leader来面试了"</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等通知</span></span><br><span class="line">BaiDuInterview.prototype.waitNotice = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"百度公司的offer到了"</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> baiduInterview = <span class="keyword">new</span> BaiDuInterview();</span><br><span class="line">baiduInterview.init(); <span class="comment">// 子类还可以重写父类的init方法，这样各个公司面试的流程就不一样了。</span></span><br></pre></td></tr></table></figure></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>模板方法应用于下列情况：</p><p>一次性实现一个算法的不变的部分，并将可变的行为留给子类来实现<br>各子类中公共的行为应被提取出来并集中到一个公共父类中以避免代码重复，不同之处分离为新的操作，分别实现<br>控制子类扩展，模板方法可以只在特定点调用“Hook”操作，这样就只允许在这些点进行扩展。</p><p>注：<br>钩子（Hook）操作，它提供了缺省的行为，子类在必要时进行扩展。一个钩子操作的缺省操作通常是一个空操作。在模板方法中应指明哪些操是钩子操作（可以被重定义）以及哪些是抽象操作（必须被重定义）</p><p>和策略模式不同，模板方法使用继承来改变算法的一部分，而策略模式使用委托来改变整个算法（这一点暂时不是很明白，学习策略模式后再回来理解）。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;模版方法模式&quot;&gt;&lt;a href=&quot;#模版方法模式&quot; class=&quot;headerlink&quot; title=&quot;模版方法模式&quot;&gt;&lt;/a&gt;模版方法模式&lt;/h2&gt;&lt;p&gt;定义：模板方法模式由二部分组成，第一部分是抽象父类，第二部分是具体实现的子类，一般的情况下是抽象父类封装了子类的算法框架，包括实现一些公共方法及封装子类中所有方法的执行顺序，子类可以继承这个父类，并且可以在子类中重写父类的方法，从而实现自己的业务逻辑。&lt;br&gt;使用场景：（主要用于步骤相似的事情）&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;泡饮品（茶 和 coffee）&lt;/li&gt;
&lt;li&gt;公司面试
    
    </summary>
    
      <category term="JavaScript" scheme="https://chongdee.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://chongdee.github.io/tags/JavaScript/"/>
    
      <category term="JS设计模式" scheme="https://chongdee.github.io/tags/JS%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>js设计模式-访问者模式</title>
    <link href="https://chongdee.github.io/2018/10/31/JavaScript%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/js%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%AE%BF%E9%97%AE%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    <id>https://chongdee.github.io/2018/10/31/JavaScript设计模式/js设计模式-访问者模式/</id>
    <published>2018-10-31T13:44:04.000Z</published>
    <updated>2018-11-11T20:42:55.296Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2 id="访问者模式定义"><a href="#访问者模式定义" class="headerlink" title="访问者模式定义"></a>访问者模式定义</h2><p>介绍：访问者模式比较复杂，它包含访问者和被访问元素两个主要组成部分，这些被访问的元素通常具有不同的类型，且不同的访问者可以对他们进行不同的访问操作。访问者模式的主要目的是将数据结构与数据操作相分离。</p><p>定义：提供一个作用于某对象结构中的个元素的操作表示，它使得可以再不改变各元素的类的前提下定义作用于这些元素的新操作。访问者模式是一种对象行为型模式</p><h2 id="在访问者模式中，主要包括以下几个角色"><a href="#在访问者模式中，主要包括以下几个角色" class="headerlink" title="在访问者模式中，主要包括以下几个角色"></a>在访问者模式中，主要包括以下几个角色</h2><ol><li>抽象访问者：抽象类或者接口，声明访问者可以访问哪些元素，具体到程序中就是visit方法中的参数定义哪些对象是可以被访问的。</li><li>访问者：实现抽象访问者所声明的方法，它影响到访问者访问到一个类后该干什么，要做什么事情。</li><li>抽象元素类：接口或者抽象类，声明接受哪一类访问者访问，程序上是通过accept方法中的参数来定义的。抽象元素一般有两类方法，一部分是本身的业务逻辑，另外就是允许接收哪类访问者来访问。</li><li>元素类：实现抽象元素类所声明的accept方法，通常都是visitor.visit(this)，基本上已经形成一种定式了。</li><li>结构对象：一个元素的容器，一般包含一个容纳多个不同类、不同接口的容器，如List、Set、Map等，在项目中一般很少抽象出这个角色。<a id="more"></a></li></ol><h2 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Keyboard = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.accept = <span class="function"><span class="keyword">function</span>(<span class="params">computerPartVisitor</span>)</span>&#123;</span><br><span class="line">        computerPartVisitor.visit(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> Monitor = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.accept = <span class="function"><span class="keyword">function</span>(<span class="params">computerPartVisitor</span>)</span>&#123;</span><br><span class="line">        computerPartVisitor.visit(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> Mouse = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.accept = <span class="function"><span class="keyword">function</span>(<span class="params">computerPartVisitor</span>)</span>&#123;</span><br><span class="line">        computerPartVisitor.visit(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> Computer = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> parts = [<span class="keyword">new</span> Keyboard(), <span class="keyword">new</span> Monitor(), <span class="keyword">new</span> Mouse()];</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">this</span>.accept = <span class="function"><span class="keyword">function</span>(<span class="params">computerPartVisitor</span>)</span>&#123;</span><br><span class="line">        computerPartVisitor.visit(<span class="keyword">this</span>);</span><br><span class="line">        _acceptAll(computerPartVisitor);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">var</span> _acceptAll = <span class="function"><span class="keyword">function</span>(<span class="params">computerPartVisitor</span>)</span>&#123;</span><br><span class="line">        parts.map(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;</span><br><span class="line">            item.accept(computerPartVisitor)</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> ComputerPartDisplayVisitor = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.visit = <span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(item.constructor == Keyboard)&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"Displaying Keyboard."</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(item.constructor == Monitor)&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"Displaying Monitor."</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(item.constructor == Mouse)&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"Displaying Mouse."</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(item.constructor == Computer)&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"Displaying Computer."</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"Error"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> computer = <span class="keyword">new</span> Computer();</span><br><span class="line">computer.accept(<span class="keyword">new</span> ComputerPartDisplayVisitor());</span><br><span class="line"><span class="comment">// Displaying Computer.</span></span><br><span class="line"><span class="comment">// Displaying Keyboard.</span></span><br><span class="line"><span class="comment">// Displaying Monitor.</span></span><br><span class="line"><span class="comment">// Displaying Mouse.</span></span><br></pre></td></tr></table></figure><p>简洁版：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 访问者  </span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Visitor</span>(<span class="params"></span>) </span>&#123;  </span><br><span class="line">  <span class="keyword">this</span>.visit = <span class="function"><span class="keyword">function</span>(<span class="params"> concreteElement </span>) </span>&#123;  </span><br><span class="line">    concreteElement.doSomething();  </span><br><span class="line">  &#125;  </span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">// 元素类  </span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ConceteElement</span>(<span class="params"></span>) </span>&#123;  </span><br><span class="line">  <span class="keyword">this</span>.doSomething = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;  </span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"这是一个具体元素"</span>);  </span><br><span class="line">  &#125;  </span><br><span class="line">  <span class="keyword">this</span>.accept = <span class="function"><span class="keyword">function</span>(<span class="params"> visitor </span>) </span>&#123;  </span><br><span class="line">    visitor.visit(<span class="keyword">this</span>);  </span><br><span class="line">  &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">// Client  </span></span><br><span class="line"><span class="keyword">var</span> ele = <span class="keyword">new</span> ConceteElement();  </span><br><span class="line"><span class="keyword">var</span> v = <span class="keyword">new</span> Visitor();  </span><br><span class="line">ele.accept( v );</span><br></pre></td></tr></table></figure></p><p>这个模式比较复杂，我们先介绍下组成：<br>ComputerPartDisplayVisitor称为访问者，它为对象结构中的每一个具体元素例如Keyboard，Mouse等声明一个访问操作。当访问Keyboard时就会输出Displaying Keyboard。<br>Keyboard，Monitor，Mouse称为元素，他们包含一个accept方法，用来触发传递进来的访问者<br>Computer称为对象结构，它是一个元素的集合。parts数组用于存放元素对象，以供不同访问者访问。_acceptAll方法用来遍历内部元素。<br>访问者通过accept访问元素内部，元素内部也可以通过参数调用访问者的visit方法。这种调用机制称为双重分派。</p><h2 id="访问者模式总结"><a href="#访问者模式总结" class="headerlink" title="访问者模式总结"></a>访问者模式总结</h2><p>优点：</p><ul><li>增加新的访问操作便捷，只需要加一个新的访问者类。</li><li>将有关原色对象的访问行为集合到一个访问者对象中，类的职责更清晰。</li><li>让用户在不修改现有元素层次结构的情况下，定义作用于该层次结构的操作。<br>缺点：</li><li>增加新的元素类很困难，在访问者模式下，每增加一个新的元素,对应要增加访问者中的操作。</li><li>破坏封装。访问者模式要求访问者对象访问并调用每一个元素对象的操作，这意味着元素必须暴露一些内部操作和内部状态。</li></ul><p>适用场景：</p><ul><li>一个对象结构包含多个类型的对象，希望对这些对象实施一些依赖其具体类型的操作。</li><li>需要对一个对象结构中的对象进行横多不同的并且不相关的操作，而且需要避免让这些操作污染这些对象的类。</li><li>对象结构中对象对应的类很少改变，但经常需要再次对象结构上定义新的操作。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;访问者模式定义&quot;&gt;&lt;a href=&quot;#访问者模式定义&quot; class=&quot;headerlink&quot; title=&quot;访问者模式定义&quot;&gt;&lt;/a&gt;访问者模式定义&lt;/h2&gt;&lt;p&gt;介绍：访问者模式比较复杂，它包含访问者和被访问元素两个主要组成部分，这些被访问的元素通常具有不同的类型，且不同的访问者可以对他们进行不同的访问操作。访问者模式的主要目的是将数据结构与数据操作相分离。&lt;/p&gt;
&lt;p&gt;定义：提供一个作用于某对象结构中的个元素的操作表示，它使得可以再不改变各元素的类的前提下定义作用于这些元素的新操作。访问者模式是一种对象行为型模式&lt;/p&gt;
&lt;h2 id=&quot;在访问者模式中，主要包括以下几个角色&quot;&gt;&lt;a href=&quot;#在访问者模式中，主要包括以下几个角色&quot; class=&quot;headerlink&quot; title=&quot;在访问者模式中，主要包括以下几个角色&quot;&gt;&lt;/a&gt;在访问者模式中，主要包括以下几个角色&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;抽象访问者：抽象类或者接口，声明访问者可以访问哪些元素，具体到程序中就是visit方法中的参数定义哪些对象是可以被访问的。&lt;/li&gt;
&lt;li&gt;访问者：实现抽象访问者所声明的方法，它影响到访问者访问到一个类后该干什么，要做什么事情。&lt;/li&gt;
&lt;li&gt;抽象元素类：接口或者抽象类，声明接受哪一类访问者访问，程序上是通过accept方法中的参数来定义的。抽象元素一般有两类方法，一部分是本身的业务逻辑，另外就是允许接收哪类访问者来访问。&lt;/li&gt;
&lt;li&gt;元素类：实现抽象元素类所声明的accept方法，通常都是visitor.visit(this)，基本上已经形成一种定式了。&lt;/li&gt;
&lt;li&gt;结构对象：一个元素的容器，一般包含一个容纳多个不同类、不同接口的容器，如List、Set、Map等，在项目中一般很少抽象出这个角色。
    
    </summary>
    
      <category term="JavaScript" scheme="https://chongdee.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://chongdee.github.io/tags/JavaScript/"/>
    
      <category term="JS设计模式" scheme="https://chongdee.github.io/tags/JS%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>js设计模式-外观模式</title>
    <link href="https://chongdee.github.io/2018/10/31/JavaScript%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/js%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F/"/>
    <id>https://chongdee.github.io/2018/10/31/JavaScript设计模式/js设计模式-外观模式/</id>
    <published>2018-10-31T13:43:45.000Z</published>
    <updated>2018-11-11T20:42:32.426Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2 id="外观模式基础"><a href="#外观模式基础" class="headerlink" title="外观模式基础"></a>外观模式基础</h2><p>定义：外观模式（Facade）为子系统中的一组接口提供了一个一致的界面，此模块定义了一个高层接口，这个接口使得这一子系统更加容易使用。<br>外观模式不仅简化类中的接口，而且对接口与调用者也进行了解耦。外观模式经常被认为开发者必备，它可以将一些复杂操作封装起来，并创建一个简单的接口用于调用。</p><p>使用场景：外观模式经常被用于JavaScript类库里，通过它封装一些接口用于兼容多浏览器，外观模式可以让我们间接调用子系统，从而避免因直接访问子系统而产生不必要的错误。</p><p>外观模式的优势是易于使用，而且本身也比较轻量级。但也有缺点外观模式被开发者连续使用时会产生一定的性能问题，因为在每次调用时都要检测功能的可用性。<br><a id="more"></a></p><h2 id="兼容浏览器事件绑定"><a href="#兼容浏览器事件绑定" class="headerlink" title="兼容浏览器事件绑定"></a>兼容浏览器事件绑定</h2><p>下面是一段未优化过的代码，我们使用了外观模式通过检测浏览器特性的方式来创建一个跨浏览器的使用方法。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> addEvent = <span class="function"><span class="keyword">function</span>(<span class="params">el, ev, fn</span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (el.addEventListener) &#123;</span><br><span class="line">el.addEventListener(ev, fn, <span class="literal">false</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (el.attachEvent) &#123;</span><br><span class="line">el.attachEvent(<span class="string">`on<span class="subst">$&#123;ev&#125;</span>`</span>, fn);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">el.[<span class="string">`on<span class="subst">$&#123;ev&#125;</span>`</span>] = fn;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><blockquote><p>这里有一个问题，我们每调用一次 addEvent 函数就是执行一次 if-else 判断。</p></blockquote><h2 id="兼容浏览器阻止冒泡、默认事件"><a href="#兼容浏览器阻止冒泡、默认事件" class="headerlink" title="兼容浏览器阻止冒泡、默认事件"></a>兼容浏览器阻止冒泡、默认事件</h2><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">N</span> = window.N || &#123;&#125;;</span><br><span class="line">N.<span class="attr">tools</span> = &#123;</span><br><span class="line">stopPropagation(e) &#123;</span><br><span class="line"><span class="keyword">if</span> (e.stopPropagation) &#123;</span><br><span class="line">e.stopPropagation();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">e.<span class="attr">cancelBubble</span> = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">preventDefault(e) &#123;</span><br><span class="line"><span class="keyword">if</span> (e.preventDefault) &#123;</span><br><span class="line">e.preventDefault();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">e.<span class="attr">returnValue</span> = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">stopEvent (e) &#123;</span><br><span class="line">this.stopPropagation(e);</span><br><span class="line">this.preventDefault(e);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;外观模式基础&quot;&gt;&lt;a href=&quot;#外观模式基础&quot; class=&quot;headerlink&quot; title=&quot;外观模式基础&quot;&gt;&lt;/a&gt;外观模式基础&lt;/h2&gt;&lt;p&gt;定义：外观模式（Facade）为子系统中的一组接口提供了一个一致的界面，此模块定义了一个高层接口，这个接口使得这一子系统更加容易使用。&lt;br&gt;外观模式不仅简化类中的接口，而且对接口与调用者也进行了解耦。外观模式经常被认为开发者必备，它可以将一些复杂操作封装起来，并创建一个简单的接口用于调用。&lt;/p&gt;
&lt;p&gt;使用场景：外观模式经常被用于JavaScript类库里，通过它封装一些接口用于兼容多浏览器，外观模式可以让我们间接调用子系统，从而避免因直接访问子系统而产生不必要的错误。&lt;/p&gt;
&lt;p&gt;外观模式的优势是易于使用，而且本身也比较轻量级。但也有缺点外观模式被开发者连续使用时会产生一定的性能问题，因为在每次调用时都要检测功能的可用性。&lt;br&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="https://chongdee.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://chongdee.github.io/tags/JavaScript/"/>
    
      <category term="JS设计模式" scheme="https://chongdee.github.io/tags/JS%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>js设计模式-桥接模式</title>
    <link href="https://chongdee.github.io/2018/10/31/JavaScript%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/js%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F/"/>
    <id>https://chongdee.github.io/2018/10/31/JavaScript设计模式/js设计模式-桥接模式/</id>
    <published>2018-10-31T13:43:28.000Z</published>
    <updated>2018-11-11T20:44:05.285Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p>桥接模式定义<br>定义：桥接模式（Bridge）将抽象部分与它的实现部分分离，使它们都可以独立地变化。<br>桥接设计模式是许多其他设计模式的基础,比如装饰模式, 代理模式都或多或少看到他的影子, 在面向对象设计中最重要的一个特点就是继承, 然而作为拓展类的功能的方式有两种 – 继承和桥接, 桥接用我简单的理解就是放弃使用继承的方式拓展类, 而是采用包含另一个具有一定功能的对象来拓展类。</p><p>使用场景：事件回调函数、请求接口之间进行桥接、用于连接公开的API代码和私用实现的代码<br>根据javascript语言的特点，我们将其简化成2个角色：<br>（1）扩充抽象类<br>（2）具体实现类<br><a id="more"></a></p><h2 id="最简单的桥接模式"><a href="#最简单的桥接模式" class="headerlink" title="最简单的桥接模式"></a>最简单的桥接模式</h2><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="keyword">each</span> = <span class="function"><span class="keyword">function</span> <span class="params">(arr, fn)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line"><span class="keyword">var</span> val = arr[i];</span><br><span class="line"><span class="keyword">if</span> (fn.call(val, i, val, arr)) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"><span class="keyword">each</span>(arr, <span class="function"><span class="keyword">function</span> <span class="params">(i, v)</span> </span>&#123;</span><br><span class="line">arr[i] = v * <span class="number">2</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>在这个例子中，抽象部分是each函数，也就是上面说的扩充抽象类，实现部分是fn，即具体实现类。抽象部分和实现部分可以独立的进行变化。这个例子虽然简单，但就是一个典型的桥接模式的应用。</p></blockquote><h2 id="事件监控"><a href="#事件监控" class="headerlink" title="事件监控"></a>事件监控</h2><p>抽象类 click 事件<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">addEvent(element, <span class="string">'click'</span>, getBeerByIdBridge);</span><br><span class="line"><span class="comment">// 提供一个桥梁 将 抽象类和实现类链接起来</span></span><br><span class="line"><span class="comment">// 作为桥梁</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getBeerByIdBridge</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">　　getBeerById(<span class="keyword">this</span>.id, <span class="function"><span class="keyword">function</span>(<span class="params">beer</span>) </span>&#123;</span><br><span class="line">　　　　<span class="built_in">console</span>.log(<span class="string">'Requested Beer: '</span>+beer);</span><br><span class="line">　　&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>实现类<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getBeerById</span><span class="params">(id, callback)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 通过ID发送请求，然后返回数据</span></span><br><span class="line">asyncRequest(<span class="string">'GET'</span>, <span class="string">'beer.uri?id='</span> + id, <span class="function"><span class="keyword">function</span><span class="params">(resp)</span> </span>&#123;</span><br><span class="line"><span class="comment">// callback response</span></span><br><span class="line">callback(resp.responseText);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><blockquote><p>这里的getBeerByIdBridge就是我们定义的桥，用于将抽象的click事件和getBeerById连接起来，同时将事件源的ID，以及自定义的call函数（console.log输出）作为参数传入到getBeerById函数里。</p></blockquote><h2 id="用于连接公开的API代码和私用实现的代码"><a href="#用于连接公开的API代码和私用实现的代码" class="headerlink" title="用于连接公开的API代码和私用实现的代码"></a>用于连接公开的API代码和私用实现的代码</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="keyword">Public</span>=<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">// 定义的私有变量</span></span><br><span class="line"><span class="keyword">var</span> secret = <span class="number">3</span>;</span><br><span class="line"><span class="comment">// 该函数返回了私有变量，外界可以通过该方法访问该私有变量</span></span><br><span class="line">this.privilegedGetter = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line"> <span class="keyword">return</span> secret;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> o = <span class="keyword">new</span> <span class="keyword">Public</span>();</span><br><span class="line"><span class="keyword">var</span> data =o.privilegedGetter();</span><br></pre></td></tr></table></figure><blockquote><p>如果一个公用的接口抽象了一些也许应该属于私用性的较复杂的任务，那么可以使用桥接模式来收集某些私用性的信息。可以用一些具有特殊权利的方法作为桥梁以便访问私用变量空间。这一特例中的桥接性函数又称特权函数。</p></blockquote><h2 id="用桥接模式联结多个类"><a href="#用桥接模式联结多个类" class="headerlink" title="用桥接模式联结多个类"></a>用桥接模式联结多个类</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//例1</span></span><br><span class="line"><span class="keyword">var</span> Class1 =<span class="function"><span class="keyword">function</span>(<span class="params">a,b,c</span>)</span>&#123;</span><br><span class="line"><span class="keyword">this</span>.a =a;</span><br><span class="line"><span class="keyword">this</span>.b = b;</span><br><span class="line"><span class="keyword">this</span>.c = c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> Class2 =<span class="function"><span class="keyword">function</span>(<span class="params">d</span>)</span>&#123;</span><br><span class="line"><span class="keyword">this</span>.d = d;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> BridgeClass =<span class="function"><span class="keyword">function</span>(<span class="params">a,b,c,d</span>)</span>&#123;</span><br><span class="line">   <span class="keyword">this</span>.one = <span class="keyword">new</span> Class1(a,b,c);</span><br><span class="line">   <span class="keyword">this</span>.two = <span class="keyword">new</span> Class2(d);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">------------------------------------------------------------------------</span><br><span class="line"><span class="comment">//例2</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Speed</span> </span>&#123;            <span class="comment">// 运动模块</span></span><br><span class="line">  <span class="keyword">constructor</span>(x, y) &#123;</span><br><span class="line">    <span class="keyword">this</span>.x = x</span><br><span class="line">    <span class="keyword">this</span>.y = y</span><br><span class="line">  &#125;</span><br><span class="line">  run() &#123;  <span class="built_in">console</span>.log(<span class="string">`运动起来 <span class="subst">$&#123;<span class="keyword">this</span>.x&#125;</span> + <span class="subst">$&#123;<span class="keyword">this</span>.y&#125;</span>`</span>)  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Color</span> </span>&#123;            <span class="comment">// 着色模块</span></span><br><span class="line">  <span class="keyword">constructor</span>(cl) &#123;</span><br><span class="line">    <span class="keyword">this</span>.color = cl</span><br><span class="line">  &#125;</span><br><span class="line">  draw() &#123;  <span class="built_in">console</span>.log(<span class="string">`绘制颜色 <span class="subst">$&#123;<span class="keyword">this</span>.color&#125;</span>`</span>)  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Speak</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(wd) &#123;</span><br><span class="line">    <span class="keyword">this</span>.word = wd</span><br><span class="line">  &#125;</span><br><span class="line">  say() &#123;  <span class="built_in">console</span>.log(<span class="string">`说话 <span class="subst">$&#123;<span class="keyword">this</span>.word&#125;</span>`</span>)  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Ball</span> </span>&#123;                     <span class="comment">// 创建球类，可以着色和运动</span></span><br><span class="line">  <span class="keyword">constructor</span>(x, y, cl) &#123;</span><br><span class="line">    <span class="keyword">this</span>.speed = <span class="keyword">new</span> Speed(x, y)</span><br><span class="line">    <span class="keyword">this</span>.color = <span class="keyword">new</span> Color(cl)</span><br><span class="line">  &#125;</span><br><span class="line">  init() &#123;</span><br><span class="line">    <span class="keyword">this</span>.speed.run()</span><br><span class="line">    <span class="keyword">this</span>.color.draw()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Man</span> </span>&#123;                    <span class="comment">// 人类，可以运动和说话</span></span><br><span class="line">  <span class="keyword">constructor</span>(x, y, wd) &#123;</span><br><span class="line">    <span class="keyword">this</span>.speed = <span class="keyword">new</span> Speed(x, y)</span><br><span class="line">    <span class="keyword">this</span>.speak = <span class="keyword">new</span> Speak(wd)</span><br><span class="line">  &#125;</span><br><span class="line">  init() &#123;</span><br><span class="line">    <span class="keyword">this</span>.speed.run()</span><br><span class="line">    <span class="keyword">this</span>.speak.say()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> man = <span class="keyword">new</span> Man(<span class="number">1</span>, <span class="number">2</span>, <span class="string">'hehe?'</span>)</span><br><span class="line">man.init()                                <span class="comment">// 运动起来 1 + 2      说话 hehe?</span></span><br></pre></td></tr></table></figure><blockquote><p>这看起来很像是—-适配器，的确如此。但要注意到本例中实际上并没有客户系统要求提供数据。它只不过是用来接纳大量数据并将其发送给责任方的一种辅助性手段。此外，BridgeClass也不是一个客户系统已经实现的现有接口。引入这个类的目的只不过是要桥接一些类而已。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;桥接模式定义&lt;br&gt;定义：桥接模式（Bridge）将抽象部分与它的实现部分分离，使它们都可以独立地变化。&lt;br&gt;桥接设计模式是许多其他设计模式的基础,比如装饰模式, 代理模式都或多或少看到他的影子, 在面向对象设计中最重要的一个特点就是继承, 然而作为拓展类的功能的方式有两种 – 继承和桥接, 桥接用我简单的理解就是放弃使用继承的方式拓展类, 而是采用包含另一个具有一定功能的对象来拓展类。&lt;/p&gt;
&lt;p&gt;使用场景：事件回调函数、请求接口之间进行桥接、用于连接公开的API代码和私用实现的代码&lt;br&gt;根据javascript语言的特点，我们将其简化成2个角色：&lt;br&gt;（1）扩充抽象类&lt;br&gt;（2）具体实现类&lt;br&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="https://chongdee.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://chongdee.github.io/tags/JavaScript/"/>
    
      <category term="JS设计模式" scheme="https://chongdee.github.io/tags/JS%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>js设计模式-迭代器模式</title>
    <link href="https://chongdee.github.io/2018/10/31/JavaScript%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/js%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
    <id>https://chongdee.github.io/2018/10/31/JavaScript设计模式/js设计模式-迭代器模式/</id>
    <published>2018-10-31T13:42:36.000Z</published>
    <updated>2018-11-11T20:42:55.294Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2 id="迭代器模式介绍"><a href="#迭代器模式介绍" class="headerlink" title="迭代器模式介绍"></a>迭代器模式介绍</h2><p>定义：迭代器模式是指提供一种方法顺序访问一个聚合对象中的各个元素，而又不需要暴露该对象的内部表示。<br>使用的好处：迭代器模式可以把迭代的过程从业务逻辑中分离出来，在使用迭代器模式之后，即使不关心对象的内部构造，也可以按顺序访问其中的每个元素。<br><a id="more"></a><br>先看一个 仿jquery 迭代器<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> $ = &#123;</span><br><span class="line">    each: <span class="function"><span class="keyword">function</span> (<span class="params">arr, fn</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = arr.length; i &lt; len; i++) &#123;</span><br><span class="line">            fn.call(arr[i], i, arr[i])</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">$.each([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>], <span class="function"><span class="keyword">function</span>(<span class="params">i, val</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log([i, val]);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><h2 id="迭代器的分类"><a href="#迭代器的分类" class="headerlink" title="迭代器的分类"></a>迭代器的分类</h2><p>迭代器根据实现的位置，我们将它分为内部迭代器和外部迭代器两种。</p><h3 id="内部迭代器"><a href="#内部迭代器" class="headerlink" title="内部迭代器"></a>内部迭代器</h3><p>内部迭代器对于使用者来说他不用关心迭代器的内部实现，只用关注使用的效果，我们上面仿jQuery的each就是个内部迭代器的实现。</p><p>内部迭代器有它的好处但是也有它的不足，比如我们要比较两个数组是否相等，上面的方法就不满足我们的需要，我们就需要写一个新的方法来实现。<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> $ = &#123;</span><br><span class="line">    <span class="keyword">each</span>: <span class="function"><span class="keyword">function</span> <span class="params">(arr, fn)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = arr.length; i &lt; len; i++) &#123;</span><br><span class="line">            fn.call(arr[i], i, arr[i])</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> compareArray = <span class="function"><span class="keyword">function</span><span class="params">(arr, arr2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>( arr.length !== arr2.length) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    $.each(arr, <span class="function"><span class="keyword">function</span><span class="params">(i, val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>( val !== arr2[i]) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">compareArray([<span class="number">1</span>, <span class="number">2</span>], [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]); <span class="comment">// false</span></span><br></pre></td></tr></table></figure></p><h3 id="外部迭代器"><a href="#外部迭代器" class="headerlink" title="外部迭代器"></a>外部迭代器</h3><p>外部迭代器必须显式地请求才会迭代下一个元素。</p><p>外部迭代器虽然增加了使用上的一些麻烦，但是它的灵活性却正是我们需要的。我们可以人为的控制迭代的过程和顺序。<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 迭代器实现</span></span><br><span class="line"><span class="keyword">var</span> Iterator = <span class="function"><span class="keyword">function</span><span class="params">(obj)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> current = <span class="number">0</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">var</span> next = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        current += <span class="number">1</span>;</span><br><span class="line">    &#125;;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">var</span> isDone = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> current &gt;= obj.length;</span><br><span class="line">    &#125;;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">var</span> getCurrItem = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> obj[current];</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> len = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> obj.length;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        next: next,</span><br><span class="line">        isDone: isDone,</span><br><span class="line">        getCurrItem: getCurrItem,</span><br><span class="line">        length: len,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 比较数组</span></span><br><span class="line"><span class="keyword">var</span> compareArray = <span class="function"><span class="keyword">function</span> <span class="params">(iteratorObj, iteratorObj2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(iteratorObj.length !== iteratorObj2.length) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (!iteratorObj.isDone() &amp;&amp; !iteratorObj2.isDone())&#123;</span><br><span class="line">        <span class="keyword">if</span> (iteratorObj.getCurrItem() !== iteratorObj2.getCurrItem())&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        iteratorObj.next();</span><br><span class="line">        iteratorObj2.next();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr = Iterator([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]); </span><br><span class="line"><span class="keyword">var</span> arr2 = Iterator([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]); </span><br><span class="line"> </span><br><span class="line">compareArray(arr, arr2); <span class="comment">// true</span></span><br></pre></td></tr></table></figure></p><h2 id="迭代器可以中止"><a href="#迭代器可以中止" class="headerlink" title="迭代器可以中止"></a>迭代器可以中止</h2><p>在for循环中，我们可以通过break来跳出循环，所以在迭代器模式中。我们可以利用这个来提前终止迭代。接下来我们改在一下最开始的each函数</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="keyword">each</span> = <span class="function"><span class="keyword">function</span><span class="params">(arr, callback)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> result</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = arr.length; i &lt; len; i++) &#123;</span><br><span class="line">        result = callback.call(arr[i], i, arr[i])</span><br><span class="line">        <span class="keyword">if</span> (result === <span class="literal">false</span>) &#123;</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">each</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>], <span class="function"><span class="keyword">function</span><span class="params">(i, el)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (el &gt; <span class="number">3</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    console.log(el)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;迭代器模式介绍&quot;&gt;&lt;a href=&quot;#迭代器模式介绍&quot; class=&quot;headerlink&quot; title=&quot;迭代器模式介绍&quot;&gt;&lt;/a&gt;迭代器模式介绍&lt;/h2&gt;&lt;p&gt;定义：迭代器模式是指提供一种方法顺序访问一个聚合对象中的各个元素，而又不需要暴露该对象的内部表示。&lt;br&gt;使用的好处：迭代器模式可以把迭代的过程从业务逻辑中分离出来，在使用迭代器模式之后，即使不关心对象的内部构造，也可以按顺序访问其中的每个元素。&lt;br&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="https://chongdee.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://chongdee.github.io/tags/JavaScript/"/>
    
      <category term="JS设计模式" scheme="https://chongdee.github.io/tags/JS%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
</feed>
