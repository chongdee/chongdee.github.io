<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>andy Wong&#39;s Blog</title>
  
  <subtitle>A little bit progress every day</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://chongdee.github.io/"/>
  <updated>2018-11-05T10:31:53.437Z</updated>
  <id>https://chongdee.github.io/</id>
  
  <author>
    <name>andy Wong</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Less常用公共样式封装</title>
    <link href="https://chongdee.github.io/2018/11/05/Less%E5%B8%B8%E7%94%A8%E5%85%AC%E5%85%B1%E6%A0%B7%E5%BC%8F%E5%B0%81%E8%A3%85(zless)/"/>
    <id>https://chongdee.github.io/2018/11/05/Less常用公共样式封装(zless)/</id>
    <published>2018-11-05T09:47:02.000Z</published>
    <updated>2018-11-05T10:31:53.437Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p>平常项目用到less样式封装，zless库（常用的less公共样式库）<br><a id="more"></a><br><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br></pre></td><td class="code"><pre><span class="line">/------------------------------------- ├ 布局 ┆ └------------------------------------/</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 盒子宽高</span></span><br><span class="line">.<span class="keyword">size</span>(@w, @h) &#123; width: @w; height: @h; &#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 最小尺寸, 兼容IE6</span></span><br><span class="line">.<span class="keyword">min</span>-width(@min-w) &#123; <span class="keyword">min</span>-width: @min-w; _width: @min-w; &#125;</span><br><span class="line">.<span class="keyword">min</span>-height(@min-h) &#123; <span class="keyword">min</span>-height: @min-h; _height: @min-h; &#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 内联块级元素, 兼容IE6</span></span><br><span class="line">.dib() &#123; display: inline-block; *display: inline; *zoom: <span class="number">1</span>; &#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 固定定位, 兼容IE6</span></span><br><span class="line">.fixed() &#123; position: fixed; _position: absolute; *zoom: <span class="number">1</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 统一盒模型</span></span><br><span class="line">.border-box() &#123;</span><br><span class="line">*, *:after, *:before &#123; -webkit-box-sizing: border-box; -moz-box-sizing: border-box; box-sizing: border-box; &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 文字图片居中</span></span><br><span class="line">.center(<span class="keyword">text</span>-x) &#123; <span class="keyword">text</span>-<span class="keyword">align</span>: center; &#125;</span><br><span class="line">.center(<span class="keyword">text</span>-y) &#123; display: table-cell; vertical-<span class="keyword">align</span>: middle; &#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 块级元素水平居中</span></span><br><span class="line">.center(auto-x) &#123; display: block; margin-left: auto; margin-right: auto; &#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 居中, 不确定尺寸, 不兼容 IE6</span></span><br><span class="line">.center(unknown) &#123; position: absolute; top: <span class="number">0</span>; left: <span class="number">0</span>; right: <span class="number">0</span>; bottom: <span class="number">0</span>; margin: auto; &#125;</span><br><span class="line">.center(unknown-x) &#123; position: absolute; left: <span class="number">0</span>; right: <span class="number">0</span>; margin-left: auto; margin-right: auto; &#125;</span><br><span class="line">.center(unknown-y) &#123; position: absolute; top: <span class="number">0</span>; bottom: <span class="number">0</span>; margin-top: auto; margin-bottom: auto; &#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 居中, 确定尺寸, 兼容 IE6</span></span><br><span class="line">.center(known, @w, @h) &#123;</span><br><span class="line">.<span class="keyword">size</span>(@w, @h);</span><br><span class="line">position: absolute; top: <span class="number">50</span>%; left: <span class="number">50</span>%; margin-top: -(@w / <span class="number">2</span>); margin-left: -(@h / <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line">.center(known-x, @w) &#123;</span><br><span class="line">width: @w;</span><br><span class="line">position: absolute; left: <span class="number">50</span>%; margin-left: -(@h / <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line">.center(known-y, @h) &#123;</span><br><span class="line">height: @h;</span><br><span class="line">position: absolute; top: <span class="number">50</span>%; margin-top: -(@w / <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 居中, CSS3 平移方式, 兼容性不行</span></span><br><span class="line">.center(translate) &#123; position: absolute; top: <span class="number">50</span>%; left: <span class="number">50</span>%; transform: translate(<span class="number">-50</span>%, <span class="number">-50</span>%); &#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 居中, Flex 方式, 兼容性不行</span></span><br><span class="line">.center(flex) &#123; display: flex; <span class="keyword">align</span>-items: center; justify-content: center; &#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 多个子项布局</span></span><br><span class="line">.list(<span class="keyword">float</span>, @w: <span class="number">25</span>%) &#123; <span class="keyword">float</span>: left; width: @w; &#125;</span><br><span class="line">.list(inline, @w: <span class="number">25</span>%) &#123; .dib(); width: @w; &#125;</span><br><span class="line">.list(flex) &#123; flex: <span class="number">1</span>; &#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 遮罩层, 全屏遮罩、区域遮罩</span></span><br><span class="line">.over-screen(fixed) &#123; .fixed(); top: <span class="number">0</span>; left: <span class="number">0</span>; right: <span class="number">0</span>; bottom: <span class="number">0</span>; &#125;</span><br><span class="line">.over-screen(absolute) &#123; position: absolute; top: <span class="number">0</span>; left: <span class="number">0</span>; right: <span class="number">0</span>; bottom: <span class="number">0</span>; &#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 容器宽高比固定</span></span><br><span class="line"><span class="comment">// 100* 1/1 = 100%</span></span><br><span class="line"><span class="comment">// 100* 3/4 = 75%</span></span><br><span class="line">.fixed-ratio(@padding-top: <span class="number">100</span>%) &#123;</span><br><span class="line">position: relative; width: <span class="number">100</span>%; height: <span class="number">0</span>; padding-top: @padding-top;</span><br><span class="line">img &#123; position: absolute; top: <span class="number">0</span>; left: <span class="number">0</span>; width: <span class="number">100</span>%; height: <span class="number">100</span>%; &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 扩展点击区域</span></span><br><span class="line">.extend-click() &#123;</span><br><span class="line">position: relative;</span><br><span class="line">&amp;:before &#123; content: <span class="string">''</span>; position: absolute; top: <span class="number">-10</span>px; left: <span class="number">-10</span>px; right: <span class="number">-10</span>px; bottom: <span class="number">-10</span>px; &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 定宽居中页面布局</span></span><br><span class="line">.<span class="keyword">layout</span>-page(@width: <span class="number">1200</span>px) &#123; width: @width; margin-left: auto; margin-right: auto; &#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 侧边栏</span></span><br><span class="line"><span class="comment">// 主要区域：overflow: hidden; margin-left: xx; margin-right: xx;</span></span><br><span class="line">.sidebar(left, @width) &#123; position: absolute; top: <span class="number">0</span>; left: <span class="number">0</span>; width: @width; &#125;</span><br><span class="line">.sidebar(right, @width) &#123; position: absolute; top: <span class="number">0</span>; right: <span class="number">0</span>; width: @width; &#125;</span><br><span class="line"> </span><br><span class="line">/------------------------------------- ├ 字体 ┆ └------------------------------------/</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 字体大小</span></span><br><span class="line">.fz(@fz) &#123; font-<span class="keyword">size</span>: @fz; &#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 字体大小与行高</span></span><br><span class="line">.fz(@fz, @lh) &#123; font-<span class="keyword">size</span>: @fz; line-height: @lh; &#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 字体大小、行高、高度</span></span><br><span class="line">.fz(@fz, @h, @lh: @h) &#123; font-<span class="keyword">size</span>: @fz; height: @h; line-height: @lh; &#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 行高与高度</span></span><br><span class="line">.lh(@h, @lh: @h) &#123; height: @h; line-height: @lh; &#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 字体颜色, 包括链接与非链接</span></span><br><span class="line">.<span class="keyword">color</span>(@color) &#123; <span class="keyword">color</span>: @color;&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 字体颜色 + 自身 Hover</span></span><br><span class="line">.<span class="keyword">color</span>(@color, @hovercolor) &#123;</span><br><span class="line"><span class="keyword">color</span>: @color;</span><br><span class="line">&amp;:hover &#123; <span class="keyword">color</span>: @hovercolor; &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 字体颜色 + 链接 Hover</span></span><br><span class="line">.<span class="keyword">color</span>(@color, @acolor, @hovercolor) &#123;</span><br><span class="line"><span class="keyword">color</span>: @color;</span><br><span class="line">a &#123;</span><br><span class="line"><span class="keyword">color</span>: @acolor;</span><br><span class="line">&amp;:hover &#123; <span class="keyword">color</span>: @hovercolor; &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 正常字体样式</span></span><br><span class="line">.normal-font() &#123; font-weight: normal; font-style: normal; &#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 辅助性文字（灰色）</span></span><br><span class="line">.assist-font(@color: #b0b0b0, @fz: <span class="number">14</span>px) &#123; <span class="keyword">color</span>: @color; font-<span class="keyword">size</span>: @fz; &#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 禁止换行, 文本溢出省略号显示 (一行)</span></span><br><span class="line">.ellipsis() &#123;</span><br><span class="line">white-space: normal; word-wrap: <span class="keyword">break</span>-word; word-<span class="keyword">break</span>: <span class="keyword">break</span>-all;</span><br><span class="line">-o-<span class="keyword">text</span>-overflow: ellipsis; -ms-<span class="keyword">text</span>-overflow: ellipsis; <span class="keyword">text</span>-overflow:ellipsis; overflow:hidden;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 文本溢出省略号显示 (多行)</span></span><br><span class="line"><span class="comment">// 只支持 webkit 浏览器, 解决方案：高度 = 行高*行数</span></span><br><span class="line"><span class="comment">// height: 90px; line-height: 30px; -webkit-line-clamp: 3;</span></span><br><span class="line">.ellipsis-mult(@n: <span class="number">3</span>) &#123;</span><br><span class="line">display: -webkit-box; -webkit-box-orient: vertical;-webkit-line-<span class="keyword">clamp</span>: @n; word-<span class="keyword">break</span>: <span class="keyword">break</span>-all;</span><br><span class="line">-o-<span class="keyword">text</span>-overflow: ellipsis; -ms-<span class="keyword">text</span>-overflow: ellipsis; <span class="keyword">text</span>-overflow:ellipsis; overflow: hidden;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 书写模式：牌匾从右至左水平单行排版效果、文笺从右至左、从上至下排版效果</span></span><br><span class="line">.retext(x) &#123; direction: rtl; unicode-bidi: bidi-override; &#125;</span><br><span class="line">.retext(y) &#123; writing-mode: tb-rl; writing-mode: vertical-rl; &#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 文字透明</span></span><br><span class="line">.transparent-<span class="keyword">text</span>() &#123; font: <span class="number">0</span>/<span class="number">0</span> serif; <span class="keyword">text</span>-shadow: none; <span class="keyword">color</span>: transparent; &#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 文字隐藏（常用于SEO优化）</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"> </span><br><span class="line">xx</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">.hidden-<span class="keyword">text</span>() &#123; <span class="keyword">text</span>-indent : <span class="number">-9999</span>px; overflow: hidden; <span class="keyword">text</span>-<span class="keyword">align</span>: left; &#125;</span><br><span class="line"><span class="comment">// 文字外发光效果</span></span><br><span class="line">.glow-<span class="keyword">text</span>(@r: <span class="number">10</span>px, @color: gold) &#123; <span class="keyword">text</span>-shadow: <span class="number">0</span> <span class="number">0</span> @r @color; &#125;</span><br><span class="line"> </span><br><span class="line">/------------------------------------- ├ 图像 ┆ └------------------------------------/</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 用 max-width 来防止图片撑破容器</span></span><br><span class="line">.<span class="keyword">max</span>-img() &#123; display: block; <span class="keyword">max</span>-width: <span class="number">100</span>%; height: auto; &#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 2x 3x 背景图片</span></span><br><span class="line">.bg-<span class="keyword">image</span>(@url) &#123;</span><br><span class="line">background-<span class="keyword">image</span>: url(<span class="string">"@url + '@2x.png'"</span>);</span><br><span class="line">@media (-webkit-<span class="keyword">min</span>-device-pixel-ratio: <span class="number">3</span>), (<span class="keyword">min</span>-device-pixel-ratio: <span class="number">3</span>) &#123;</span><br><span class="line">background-<span class="keyword">image</span>: url(<span class="string">"@url + '@3x.png'"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 全屏大图背景</span></span><br><span class="line">.fullscreen-bg(@url) &#123;</span><br><span class="line">width: <span class="number">100</span>vw;</span><br><span class="line">height: <span class="number">100</span>vh;</span><br><span class="line">background: url(@url) no-repeat <span class="number">50</span>% <span class="number">50</span>%;</span><br><span class="line">background-<span class="keyword">size</span>: cover;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 滤镜: 将彩色照片显示为黑白照片</span></span><br><span class="line">.grayscale() &#123;</span><br><span class="line"><span class="keyword">filter</span>: grayscale(<span class="number">100</span>%);</span><br><span class="line">-webkit-<span class="keyword">filter</span>: grayscale(<span class="number">100</span>%);</span><br><span class="line">-moz-<span class="keyword">filter</span>: grayscale(<span class="number">100</span>%);</span><br><span class="line">-ms-<span class="keyword">filter</span>: grayscale(<span class="number">100</span>%);</span><br><span class="line">-o-<span class="keyword">filter</span>: grayscale(<span class="number">100</span>%);</span><br><span class="line">&#125;</span><br><span class="line">/------------------------------------- ├ 动效 ┆ └------------------------------------/</span><br><span class="line"><span class="comment">// 链接默认无下划线，hover后有下划线的样式</span></span><br><span class="line">.hover-link() &#123;</span><br><span class="line"><span class="keyword">text</span>-decoration: none;</span><br><span class="line">&amp;:hover &#123; <span class="keyword">text</span>-decoration: underline; &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 将链接变成默认的文字样式</span></span><br><span class="line">.unstyled-link() &#123;</span><br><span class="line"><span class="keyword">color</span>: inherit;</span><br><span class="line">cursor: inherit;</span><br><span class="line"><span class="keyword">text</span>-decoration: inherit;</span><br><span class="line">&amp;:active, &amp;:focus &#123; outline: none; &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 盒子阴影</span></span><br><span class="line"><span class="comment">// box-shadow: 水平阴影的位置, 垂直阴影的位置, 模糊距离, 阴影的大小, 阴影的颜色, 阴影开始方向（默认是从里往外，设置inset就是从外往里）;</span></span><br><span class="line"><span class="comment">// box-shadow: h-shadow v-shadow blur spread color inset;</span></span><br><span class="line">.box-shadow() &#123;</span><br><span class="line">box-shadow: <span class="number">0</span>px <span class="number">14</span>px <span class="number">26</span>px <span class="number">0</span>px rgba(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 盒子 Hover</span></span><br><span class="line">.box-hover() &#123;</span><br><span class="line"><span class="comment">// box-shadow: 0px 1px 2px 0px rgba(84, 107, 107, .4);</span></span><br><span class="line">transition: all <span class="number">.2</span>s linear;</span><br><span class="line">&amp;:hover &#123;</span><br><span class="line">box-shadow: <span class="number">0</span> <span class="number">15</span>px <span class="number">30</span>px rgba(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">.1</span>);</span><br><span class="line">transform: translate3d(<span class="number">0</span>, <span class="number">-2</span>px, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">.box-hover2() &#123;</span><br><span class="line">transition: transform <span class="number">.5</span>s ease;</span><br><span class="line">&amp;:hover &#123;</span><br><span class="line">transform: translateX(<span class="number">10</span>px);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 三维闪动 bug 处理</span></span><br><span class="line">.transform-fix() &#123; -webkit-backface-visibility: hidden; -webkit-transform-style: preserve<span class="number">-3</span>d; &#125;</span><br><span class="line"><span class="comment">// Animation</span></span><br><span class="line">.ani(@name, @time: <span class="number">1</span>s, @ease: ease-<span class="keyword">in</span>-out, @fillmode: forwards) &#123;</span><br><span class="line">animation-name: @name;</span><br><span class="line">animation-duration: @time;</span><br><span class="line">animation-timing-function: @ease;</span><br><span class="line">animation-fill-mode: @fillmode;</span><br><span class="line">&#125;</span><br><span class="line">/------------------------------------- ├ 功能 ┆ └------------------------------------/</span><br><span class="line"><span class="comment">// 浮动, 兼容 IE6</span></span><br><span class="line">.fl() &#123; <span class="keyword">float</span>: left; *display: inline; _display:inline; &#125;</span><br><span class="line">.fr() &#123; <span class="keyword">float</span>: right; *display: inline; _display:inline; &#125;</span><br><span class="line"><span class="comment">// 清除浮动</span></span><br><span class="line">.clearfix() &#123;</span><br><span class="line">*zoom: <span class="number">1</span>;</span><br><span class="line">&amp;:after &#123; display: block; <span class="keyword">clear</span>: both; content: <span class="string">''</span>; visibility: hidden; height: <span class="number">0</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line">.clearfix(table) &#123;</span><br><span class="line">*zoom: <span class="number">1</span>;</span><br><span class="line">&amp;:before, &amp;:after &#123; content: <span class="string">" "</span>; display: table; <span class="keyword">clear</span>: both; &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 禁止文本被选择</span></span><br><span class="line">.user-<span class="keyword">select</span>() &#123; -webkit-user-<span class="keyword">select</span>: none; -moz-user-<span class="keyword">select</span>: none; -ms-user-<span class="keyword">select</span>: none; user-<span class="keyword">select</span>: none; &#125;</span><br><span class="line"><span class="comment">// 隐藏鼠标手势</span></span><br><span class="line">.<span class="keyword">hide</span>-cursor() &#123; cursor: none !important; &#125;</span><br><span class="line"><span class="comment">// 鼠标禁用样式，但仍然可以触发事件</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line">.disabled() &#123; cursor: not-allowed; &#125;</span><br><span class="line"><span class="comment">// 禁用元素事件</span></span><br><span class="line"><span class="comment">// 1. 阻止任何点击动作的执行</span></span><br><span class="line"><span class="comment">// 2. 使链接显示为默认光标(cursor:default)</span></span><br><span class="line"><span class="comment">// 3. 阻止触发hover和active状态</span></span><br><span class="line"><span class="comment">// 4. 阻止JavaScript点击事件的触发</span></span><br><span class="line">.pointer-events() &#123; pointer-events: none; &#125;</span><br><span class="line"><span class="comment">// 模糊</span></span><br><span class="line">.blur(@blur: <span class="number">10</span>px) &#123;</span><br><span class="line"><span class="keyword">filter</span>: blur(@blur);</span><br><span class="line">-webkit-<span class="keyword">filter</span>: blur(@blur);</span><br><span class="line">-moz-<span class="keyword">filter</span>: blur(@blur);</span><br><span class="line">-o-<span class="keyword">filter</span>: blur(@blur);</span><br><span class="line">-ms-<span class="keyword">filter</span>: blur(@blur);</span><br><span class="line"><span class="keyword">filter</span>: progid:DXImageTransform.Microsoft.Blur(PixelRadius=<span class="string">'@&#123;blur&#125;'</span>);</span><br><span class="line">*zoom: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 透明度, 兼容 IE8</span></span><br><span class="line">.opacity(@opacity: <span class="number">20</span>) &#123; opacity: @opacity / <span class="number">100</span>; <span class="keyword">filter</span>: alpha(opacity=@opacity); &#125;</span><br><span class="line"><span class="comment">// 用伪类来显示打印时 a 标签的链接</span></span><br><span class="line">.<span class="keyword">print</span>-link() &#123;</span><br><span class="line">@media <span class="keyword">print</span> &#123;</span><br><span class="line">a[href]:after &#123; content: <span class="string">" ("</span> attr(href) <span class="string">") "</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 隔行换色</span></span><br><span class="line">.zebra-lists(odd, @color) &#123;</span><br><span class="line">&amp;.odd &#123;</span><br><span class="line">&gt;li:nth-child(odd) &#123; background-<span class="keyword">color</span>: @color; &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">.zebra-lists(even, @color) &#123;</span><br><span class="line">&amp;.even &#123;</span><br><span class="line">&gt;li:nth-child(even) &#123; background: green; &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 首字下沉</span></span><br><span class="line">.first-letter(@font-<span class="keyword">size</span>: <span class="number">6</span>em) &#123;</span><br><span class="line">&amp;::first-letter&#123;</span><br><span class="line"><span class="keyword">float</span>: left;</span><br><span class="line">line-height: <span class="number">1</span>;</span><br><span class="line">font-<span class="keyword">size</span>: @font-<span class="keyword">size</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 特殊标记段落第一行</span></span><br><span class="line">.first-line() &#123;</span><br><span class="line">&amp;::first-line&#123;</span><br><span class="line"><span class="keyword">color</span>: red</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 美化选中文本</span></span><br><span class="line">.beauty-<span class="keyword">select</span>() &#123;</span><br><span class="line">&amp;::selection&#123;</span><br><span class="line"><span class="keyword">color</span>: #fff;</span><br><span class="line">background-<span class="keyword">color</span>: #<span class="number">6</span>bc30d;</span><br><span class="line"><span class="keyword">text</span>-shadow: none;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 美化占位符 placeholder 样式</span></span><br><span class="line">.beauty-placeholder(@fz, @color: #<span class="number">999</span>, @align: left) &#123;</span><br><span class="line">&amp;:-moz-placeholder &#123; font-<span class="keyword">size</span>: @fz; <span class="keyword">color</span>: @color; <span class="keyword">text</span>-<span class="keyword">align</span>: @align; &#125;</span><br><span class="line">&amp;:-ms-input-placeholder &#123; font-<span class="keyword">size</span>: @fz; <span class="keyword">color</span>: @color; <span class="keyword">text</span>-<span class="keyword">align</span>: @align; &#125;</span><br><span class="line">&amp;::-webkit-input-placeholder &#123; font-<span class="keyword">size</span>: @fz; <span class="keyword">color</span>: @color; <span class="keyword">text</span>-<span class="keyword">align</span>: @align; &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 美化占位符 placeholder 样式（自定义属性和值）</span></span><br><span class="line">.beauty-placeholder(custom, @property, @value) &#123;</span><br><span class="line">&amp;:-moz-placeholder &#123; @&#123;property&#125;: @value; &#125;</span><br><span class="line">&amp;:-ms-input-placeholder &#123; @&#123;property&#125;: @value; &#125;</span><br><span class="line">&amp;::-webkit-input-placeholder &#123; @&#123;property&#125;: @value; &#125;</span><br><span class="line">&#125;</span><br><span class="line">/------------------------------------- ├ 图形 ┆ └------------------------------------/</span><br><span class="line"><span class="comment">// 三角形</span></span><br><span class="line">.triangle(@width: <span class="number">4</span>px,@color: #<span class="number">000</span>) &#123;</span><br><span class="line">display: inline-block;</span><br><span class="line">width: <span class="number">0</span>;</span><br><span class="line">height: <span class="number">0</span>;</span><br><span class="line">vertical-<span class="keyword">align</span>: middle;</span><br><span class="line">border-top: @width solid @color;</span><br><span class="line">border-left: @width solid transparent;</span><br><span class="line">border-right: @width solid transparent;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 三角形箭头气泡效果, IE6-7 无表现</span></span><br><span class="line">.arrow(top, @w: <span class="number">10</span>px, @color, @x: <span class="number">50</span>%) &#123;</span><br><span class="line">position: relative;</span><br><span class="line">&amp;:before &#123; position: absolute; bottom: <span class="number">100</span>%; left: @x; content: <span class="string">" "</span>; height: <span class="number">0</span>; width: <span class="number">0</span>; pointer-events: none; border-style: solid; border-<span class="keyword">color</span>: transparent; border-bottom-<span class="keyword">color</span>: @color; border-width: <span class="keyword">unit</span>(@w, px); @margin: -@w; margin-left: <span class="keyword">unit</span>(@margin, px); &#125;</span><br><span class="line">&#125;</span><br><span class="line">.arrow(right, @w: <span class="number">10</span>px, @color, @y: <span class="number">50</span>%) &#123;</span><br><span class="line">position: relative;</span><br><span class="line">&amp;:before &#123; position: absolute; left: <span class="number">100</span>%; top: @y; content: <span class="string">" "</span>; height: <span class="number">0</span>; width: <span class="number">0</span>; pointer-events: none; border-style: solid; border-<span class="keyword">color</span>: transparent; border-left-<span class="keyword">color</span>: @color; border-width: <span class="keyword">unit</span>(@w, px); @margin: -@w; margin-top: <span class="keyword">unit</span>(@margin, px); &#125;</span><br><span class="line">&#125;</span><br><span class="line">.arrow(bottom, @w: <span class="number">10</span>px, @color, @x: <span class="number">50</span>%) &#123;</span><br><span class="line">position: relative;</span><br><span class="line">&amp;:before &#123; position: absolute; top: <span class="number">100</span>%; left: @x; content: <span class="string">" "</span>; height: <span class="number">0</span>; width: <span class="number">0</span>; pointer-events: none; border-style: solid; border-<span class="keyword">color</span>: transparent; border-top-<span class="keyword">color</span>: @color; border-width: <span class="keyword">unit</span>(@w, px); @margin: -@w; margin-left: <span class="keyword">unit</span>(@margin, px); &#125;</span><br><span class="line">&#125;</span><br><span class="line">.arrow(left, @w: <span class="number">10</span>px, @color, @y: <span class="number">50</span>%) &#123;</span><br><span class="line">position: relative;</span><br><span class="line">&amp;:before &#123; position: absolute; right: <span class="number">100</span>%; top: @y; content: <span class="string">" "</span>; height: <span class="number">0</span>; width: <span class="number">0</span>; pointer-events: none; border-style: solid; border-<span class="keyword">color</span>: transparent; border-right-<span class="keyword">color</span>: @color; border-width: <span class="keyword">unit</span>(@w, px); @margin: -@w; margin-top: <span class="keyword">unit</span>(@margin, px); &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 三角形箭头气泡效果, 带边框</span></span><br><span class="line">.arrow-with-border(top, @w: <span class="number">10</span>px, @color, @border-w: <span class="number">1</span>px, @border-<span class="keyword">color</span>, @x: <span class="number">50</span>%) &#123;</span><br><span class="line">position: relative;</span><br><span class="line">&amp;:before, &amp;:after &#123; bottom: <span class="number">100</span>%; left: @x; content: <span class="string">" "</span>; height: <span class="number">0</span>; width: <span class="number">0</span>; position: absolute; pointer-events: none; border-style: solid; border-<span class="keyword">color</span>: transparent; &#125;</span><br><span class="line">&amp;:after &#123; border-bottom-<span class="keyword">color</span>: @color; border-width: <span class="keyword">unit</span>(@w, px); @margin: -@w; margin-left: <span class="keyword">unit</span>(@margin, px); &#125;</span><br><span class="line">&amp;:before &#123; border-bottom-<span class="keyword">color</span>: @border-<span class="keyword">color</span>; @arrbo: @w+@border-w; border-width: <span class="keyword">unit</span>(@arrbo, px); @margin-bo: -@arrbo; margin-left: <span class="keyword">unit</span>(@margin-bo, px); &#125;</span><br><span class="line">&#125;</span><br><span class="line">.arrow-with-border(bottom, @w: <span class="number">10</span>px, @color, @border-w: <span class="number">1</span>px, @border-<span class="keyword">color</span>, @x: <span class="number">50</span>%) &#123;</span><br><span class="line">position: relative;</span><br><span class="line">&amp;:before, &amp;:after &#123; top: <span class="number">100</span>%; left: @x; content: <span class="string">" "</span>; height: <span class="number">0</span>; width: <span class="number">0</span>; position: absolute; pointer-events: none; border-style: solid; border-<span class="keyword">color</span>: transparent; &#125;</span><br><span class="line">&amp;:after &#123; border-top-<span class="keyword">color</span>: @color; border-width: <span class="keyword">unit</span>(@w, px); @margin: -@w; margin-left: <span class="keyword">unit</span>(@margin, px); &#125;</span><br><span class="line">&amp;:before &#123; border-top-<span class="keyword">color</span>: @border-<span class="keyword">color</span>; @arrbo: @w+@border-w; border-width: <span class="keyword">unit</span>(@arrbo, px); @margin-bo: -@arrbo; margin-left: <span class="keyword">unit</span>(@margin-bo, px); &#125;</span><br><span class="line">&#125;</span><br><span class="line">.arrow-with-border(left, @w: <span class="number">10</span>px, @color, @border-w: <span class="number">1</span>px, @border-<span class="keyword">color</span>, @y: <span class="number">50</span>%) &#123;</span><br><span class="line">position: relative;</span><br><span class="line">&amp;:before, &amp;:after &#123; top: @y; right: <span class="number">100</span>%; content: <span class="string">" "</span>; height: <span class="number">0</span>; width: <span class="number">0</span>; position: absolute; pointer-events: none; border-style: solid; border-<span class="keyword">color</span>: transparent; &#125;</span><br><span class="line">&amp;:after &#123; border-right-<span class="keyword">color</span>: @color; border-width: <span class="keyword">unit</span>(@w, px); @margin: -@w; margin-top: <span class="keyword">unit</span>(@margin, px); &#125;</span><br><span class="line">&amp;:before &#123; border-right-<span class="keyword">color</span>: @border-<span class="keyword">color</span>; @arrbo: @w+@border-w; border-width: <span class="keyword">unit</span>(@arrbo, px); @margin-bo: -@arrbo; margin-top: <span class="keyword">unit</span>(@margin-bo, px); &#125;</span><br><span class="line">&#125;</span><br><span class="line">.arrow-with-border(right, @w: <span class="number">10</span>px, @color, @border-w: <span class="number">1</span>px, @border-<span class="keyword">color</span>, @y: <span class="number">50</span>%) &#123;</span><br><span class="line">position: relative;</span><br><span class="line">&amp;:before, &amp;:after &#123; top: @y; left: <span class="number">100</span>%; content: <span class="string">" "</span>; height: <span class="number">0</span>; width: <span class="number">0</span>; position: absolute; pointer-events: none; border-style: solid; border-<span class="keyword">color</span>: transparent; &#125;</span><br><span class="line">&amp;:after &#123; border-left-<span class="keyword">color</span>: @color; border-width: <span class="keyword">unit</span>(@w, px); @margin: -@w; margin-top: <span class="keyword">unit</span>(@margin, px); &#125;</span><br><span class="line">&amp;:before &#123; border-left-<span class="keyword">color</span>: @border-<span class="keyword">color</span>; @arrbo: @w+@border-w; border-width: <span class="keyword">unit</span>(@arrbo, px); @margin-bo: -@arrbo; margin-top: <span class="keyword">unit</span>(@margin-bo, px); &#125;</span><br><span class="line">&#125;</span><br><span class="line">/------------------------------------- ├ 组件 ┆ └------------------------------------/</span><br><span class="line"><span class="comment">// 吸顶导航</span></span><br><span class="line">.fix-header(@h: <span class="number">70</span>px) &#123;</span><br><span class="line">.fixed();</span><br><span class="line">top: <span class="number">0</span>;</span><br><span class="line">left: <span class="number">0</span>;</span><br><span class="line">width: <span class="number">100</span>%;</span><br><span class="line">height: @h;</span><br><span class="line">z-index: <span class="number">1000</span>;</span><br><span class="line"><span class="comment">// background-color: rgba(256, 256, 256, .92);</span></span><br><span class="line"><span class="comment">// border-bottom: 1px solid rgba(7, 17, 27, 0.1);</span></span><br><span class="line"><span class="comment">// box-shadow: 0px 0px 20px rgba(0,0,0,0.2);</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 吸底导航</span></span><br><span class="line">.fix-header(@h: <span class="number">70</span>px) &#123;</span><br><span class="line">.fixed();</span><br><span class="line">left: <span class="number">0</span>;</span><br><span class="line">bottom: <span class="number">0</span>;</span><br><span class="line">width: <span class="number">100</span>%;</span><br><span class="line">height: @h;</span><br><span class="line">z-index: <span class="number">1000</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输入框</span></span><br><span class="line">.input-<span class="keyword">text</span>() &#123;</span><br><span class="line">display: block;</span><br><span class="line">width: <span class="number">100</span>%;</span><br><span class="line">padding: <span class="number">4</span>px <span class="number">8</span>px;</span><br><span class="line">font-<span class="keyword">size</span>: <span class="number">14</span>px;</span><br><span class="line">line-height: <span class="number">1.42858</span>;</span><br><span class="line"><span class="keyword">color</span>: #<span class="number">333</span>;</span><br><span class="line">border: <span class="number">1</span>px solid #ddd;</span><br><span class="line">background-<span class="keyword">color</span>: #fff;</span><br><span class="line">border-radius: <span class="number">3</span>px;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 分割线</span></span><br><span class="line"><span class="comment">// |/-</span></span><br><span class="line">.<span class="keyword">separator</span>() &#123;</span><br><span class="line">margin: <span class="number">0</span> <span class="number">10</span>px;</span><br><span class="line"><span class="keyword">color</span>: #<span class="number">999</span>;</span><br><span class="line">font-<span class="keyword">size</span>: <span class="number">14</span>px;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 分割线 / (面包屑导航)</span></span><br><span class="line">.separator2() &#123;</span><br><span class="line">&amp;:before &#123;</span><br><span class="line">padding: <span class="number">0</span> <span class="number">5</span>px;</span><br><span class="line"><span class="keyword">color</span>: #ccc;</span><br><span class="line">content: <span class="string">"/\00a0"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 支付宝：我也是有底线的</span></span><br><span class="line">.hr() &#123;</span><br><span class="line">height: <span class="number">1</span>px;</span><br><span class="line">margin: <span class="number">10</span>px <span class="number">0</span>;</span><br><span class="line">border: <span class="number">0</span>;</span><br><span class="line"><span class="keyword">clear</span>: both;</span><br><span class="line">background-<span class="keyword">color</span>: #e2e2e2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 改装的 fieldset</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line">返璞归真</span><br><span class="line">.fieldset() &#123;</span><br><span class="line">border-<span class="keyword">color</span>: #d2d2d2;</span><br><span class="line">border-width: <span class="number">1</span>px <span class="number">0</span> <span class="number">0</span>;</span><br><span class="line">border-style: solid;</span><br><span class="line">legend &#123;</span><br><span class="line">padding: <span class="number">0</span> <span class="number">20</span>px;</span><br><span class="line"><span class="keyword">text</span>-<span class="keyword">align</span>: center;</span><br><span class="line">font-<span class="keyword">size</span>: <span class="number">20</span>px;</span><br><span class="line">font-weight: <span class="number">300</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 引用区块（模仿 Layui）</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line">Lorem ipsum dolor sit amet.</span><br><span class="line">.blockquote() &#123;</span><br><span class="line">margin-bottom: <span class="number">10</span>px;</span><br><span class="line">padding: <span class="number">15</span>px;</span><br><span class="line">line-height: <span class="number">22</span>px;</span><br><span class="line">border-left: <span class="number">5</span>px solid #<span class="number">009688</span>;</span><br><span class="line">border-radius: <span class="number">0</span> <span class="number">2</span>px <span class="number">2</span>px <span class="number">0</span>;</span><br><span class="line">background-<span class="keyword">color</span>: #f2f2f2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 徽章 (椭圆、小圆点)</span></span><br><span class="line"><span class="comment">// 10</span></span><br><span class="line">.badge(...) &#123;</span><br><span class="line">position: relative;</span><br><span class="line">display: inline-block;</span><br><span class="line">font-<span class="keyword">size</span>: <span class="number">12</span>px;</span><br><span class="line"><span class="keyword">color</span>: #fff;</span><br><span class="line">background-<span class="keyword">color</span>: #FF5722;</span><br><span class="line">&#125;</span><br><span class="line">.badge(ellipse) &#123;</span><br><span class="line"><span class="keyword">min</span>-width: <span class="number">8</span>px;</span><br><span class="line">height: <span class="number">18</span>px;</span><br><span class="line">padding: <span class="number">2</span>px <span class="number">6</span>px;</span><br><span class="line"><span class="keyword">text</span>-<span class="keyword">align</span>: center;</span><br><span class="line">line-height: <span class="number">18</span>px;</span><br><span class="line">border-radius: <span class="number">9</span>px;</span><br><span class="line">&#125;</span><br><span class="line">.badge(<span class="keyword">dot</span>) &#123;</span><br><span class="line">width: <span class="number">8</span>px;</span><br><span class="line">height: <span class="number">8</span>px;</span><br><span class="line">border-radius: <span class="number">50</span>%;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 关闭按钮</span></span><br><span class="line"><span class="comment">// ×</span></span><br><span class="line">.close() &#123;</span><br><span class="line">position: relative;</span><br><span class="line">-webkit-appearance: none;</span><br><span class="line">padding: <span class="number">0</span>;</span><br><span class="line">cursor: pointer;</span><br><span class="line">background: <span class="number">0</span> <span class="number">0</span>;</span><br><span class="line">border: <span class="number">0</span>;</span><br><span class="line">font-<span class="keyword">size</span>: <span class="number">20</span>px;</span><br><span class="line">font-weight: <span class="number">700</span>;</span><br><span class="line">line-height: <span class="number">1</span>;</span><br><span class="line"><span class="keyword">color</span>: #<span class="number">000</span>;</span><br><span class="line"><span class="keyword">text</span>-shadow: <span class="number">0</span> <span class="number">1</span>px <span class="number">0</span> #fff;</span><br><span class="line"><span class="keyword">filter</span>: alpha(opacity=<span class="number">20</span>);</span><br><span class="line">opacity: <span class="number">.2</span>;</span><br><span class="line">&amp;:hover &#123;</span><br><span class="line"><span class="keyword">color</span>: #<span class="number">000</span>;</span><br><span class="line"><span class="keyword">text</span>-decoration: none;</span><br><span class="line">cursor: pointer;</span><br><span class="line"><span class="keyword">filter</span>: alpha(opacity=<span class="number">50</span>);</span><br><span class="line">opacity: <span class="number">.5</span>;</span><br><span class="line">&#125;</span><br><span class="line">&amp;:before &#123;</span><br><span class="line">content: <span class="string">''</span>;</span><br><span class="line">position: absolute;</span><br><span class="line">top: <span class="number">-10</span>px;</span><br><span class="line">left: <span class="number">-10</span>px;</span><br><span class="line">right: <span class="number">-10</span>px;</span><br><span class="line">bottom: <span class="number">-10</span>px;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 1 像素边框问题</span></span><br><span class="line">.onepx(...) &#123;</span><br><span class="line">position: relative;</span><br><span class="line">&amp;:after &#123;</span><br><span class="line">content: <span class="string">''</span>;</span><br><span class="line">display: block;</span><br><span class="line">position: absolute;</span><br><span class="line">left: <span class="number">0</span>;</span><br><span class="line">width: <span class="number">100</span>%;</span><br><span class="line">border-top: <span class="number">1</span>px solid rgba(<span class="number">7</span>, <span class="number">17</span>, <span class="number">27</span>, <span class="number">0.1</span>);</span><br><span class="line">transform: scaleY(<span class="number">0.5</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">.onepx(top) &#123; &amp;:after &#123; top: <span class="number">0</span>; &#125; &#125;</span><br><span class="line">.onepx(bottom) &#123; &amp;:after &#123; bottom: <span class="number">0</span>; &#125; &#125;</span><br><span class="line">.onepx-easy(top, @color: #ccc) &#123; box-shadow: inset <span class="number">0</span>px <span class="number">-1</span>px <span class="number">1</span>px <span class="number">-1</span>px @color; &#125;</span><br><span class="line">.onepx-easy(bottom, @color: #ccc) &#123; box-shadow: inset <span class="number">0</span>px <span class="number">1</span>px <span class="number">1</span>px <span class="number">-1</span>px @color; &#125;</span><br></pre></td></tr></table></figure></p><p>zless库<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// =============================================</span></span><br><span class="line"><span class="comment">// @des:            zless</span></span><br><span class="line"><span class="comment">// @author:         Busy</span></span><br><span class="line"><span class="comment">// @url:            www.aibusy.com || www.moyu-edu.com</span></span><br><span class="line"><span class="comment">// @time:           2013-12-08</span></span><br><span class="line"><span class="comment">// @lastTime          2016-12-10</span></span><br><span class="line"><span class="comment">// @version         0.6 beta</span></span><br><span class="line"><span class="comment">// =============================================</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// common reset use kissy reset</span></span><br><span class="line"><span class="selector-class">.reset</span>()&#123;</span><br><span class="line">    <span class="selector-tag">body</span>, <span class="selector-tag">div</span>, <span class="selector-tag">dl</span>, <span class="selector-tag">dt</span>, <span class="selector-tag">dd</span>, <span class="selector-tag">ul</span>, <span class="selector-tag">ol</span>, <span class="selector-tag">li</span>, <span class="selector-tag">h1</span>, <span class="selector-tag">h2</span>, <span class="selector-tag">h3</span>, <span class="selector-tag">h4</span>, <span class="selector-tag">h5</span>, <span class="selector-tag">h6</span>, <span class="selector-tag">pre</span>, <span class="selector-tag">code</span>, <span class="selector-tag">form</span>, <span class="selector-tag">fieldset</span>, <span class="selector-tag">legend</span>, <span class="selector-tag">input</span>, <span class="selector-tag">textarea</span>, <span class="selector-tag">p</span>, <span class="selector-tag">blockquote</span>, <span class="selector-tag">th</span>, <span class="selector-tag">td</span>, <span class="selector-tag">hr</span>, <span class="selector-tag">button</span>, <span class="selector-tag">article</span>, <span class="selector-tag">aside</span>, <span class="selector-tag">details</span>, <span class="selector-tag">figcaption</span>, <span class="selector-tag">figure</span>, <span class="selector-tag">footer</span>, <span class="selector-tag">header</span>, <span class="selector-tag">hgroup</span>, <span class="selector-tag">menu</span>, <span class="selector-tag">nav</span>, <span class="selector-tag">section</span>&#123;<span class="attribute">margin</span>: <span class="number">0</span>;<span class="attribute">padding</span>: <span class="number">0</span>;&#125;</span><br><span class="line">    <span class="selector-tag">body</span>&#123; <span class="attribute">margin</span>:<span class="number">0</span> auto; <span class="attribute">font-family</span>: <span class="string">"Helvetica Neue"</span>,Helvetica,Arial,<span class="string">"微软雅黑"</span>,sans-serif;<span class="attribute">color</span>:<span class="number">#222</span>; <span class="attribute">font-size</span>:<span class="number">12px</span>;&#125;</span><br><span class="line">    <span class="selector-tag">body</span>, <span class="selector-tag">button</span>, <span class="selector-tag">input</span>, <span class="selector-tag">select</span>, <span class="selector-tag">textarea</span> &#123;<span class="attribute">outline</span>:none;&#125;</span><br><span class="line">    <span class="selector-tag">input</span>, <span class="selector-tag">select</span>, <span class="selector-tag">textarea</span> &#123;<span class="attribute">font-size</span>: <span class="number">100%</span>;&#125;<span class="selector-tag">textarea</span>&#123;<span class="attribute">resize</span>:none;&#125;</span><br><span class="line">    <span class="selector-tag">table</span> &#123;<span class="attribute">border-collapse</span>:collapse; <span class="attribute">border-spacing</span>:<span class="number">0</span>;&#125;</span><br><span class="line">    <span class="selector-tag">th</span> &#123;<span class="attribute">text-align</span>: inherit;&#125;</span><br><span class="line">    <span class="selector-tag">fieldset</span>, <span class="selector-tag">img</span> &#123;<span class="attribute">border</span>: <span class="number">0</span>;&#125;</span><br><span class="line">    <span class="selector-tag">img</span>&#123;<span class="attribute">vertical-align</span>:middle;&#125;</span><br><span class="line">    <span class="selector-tag">iframe</span> &#123;<span class="attribute">display</span>: block;&#125;</span><br><span class="line">    <span class="selector-tag">abbr</span>, <span class="selector-tag">acronym</span> &#123;<span class="attribute">border</span>: <span class="number">0</span>;<span class="attribute">font-variant</span>: normal;&#125;</span><br><span class="line">    <span class="selector-tag">del</span> &#123;<span class="attribute">text-decoration</span>: line-through;&#125;</span><br><span class="line">    <span class="selector-tag">address</span>, <span class="selector-tag">caption</span>, <span class="selector-tag">cite</span>, <span class="selector-tag">code</span>, <span class="selector-tag">dfn</span>, <span class="selector-tag">em</span>, <span class="selector-tag">th</span>, <span class="selector-tag">var</span> &#123;<span class="attribute">font-style</span>: normal;<span class="attribute">font-weight</span>: <span class="number">500</span>;&#125;</span><br><span class="line">    <span class="selector-tag">menu</span>,<span class="selector-tag">ol</span>, <span class="selector-tag">ul</span> &#123;<span class="attribute">list-style</span>: none;&#125;</span><br><span class="line">    <span class="selector-tag">caption</span>, <span class="selector-tag">th</span> &#123;<span class="attribute">text-align</span>: left;&#125;</span><br><span class="line">    <span class="selector-tag">h1</span>, <span class="selector-tag">h2</span>, <span class="selector-tag">h3</span>, <span class="selector-tag">h4</span>, <span class="selector-tag">h5</span>, <span class="selector-tag">h6</span> &#123;<span class="attribute">font-size</span>: <span class="number">100%</span>;<span class="attribute">font-weight</span>: <span class="number">500</span>;&#125;</span><br><span class="line">    <span class="attribute">a</span>:hover &#123;<span class="attribute">text-decoration</span>:none;<span class="attribute">cursor</span>:pointer;&#125;</span><br><span class="line">    <span class="selector-tag">ins</span>, <span class="selector-tag">a</span>,<span class="selector-tag">a</span><span class="selector-pseudo">:visited</span> &#123;<span class="attribute">text-decoration</span>: none;<span class="attribute">outline</span>:none;&#125;</span><br><span class="line">    <span class="selector-tag">i</span>&#123;<span class="attribute">font-style</span>:normal;&#125;</span><br><span class="line">    <span class="selector-tag">button</span>, <span class="selector-tag">input</span>, <span class="selector-tag">select</span>, <span class="selector-tag">textarea</span> &#123;<span class="attribute">margin</span>: <span class="number">0</span>;<span class="attribute">font-size</span>: <span class="number">100%</span>;<span class="attribute">vertical-align</span>: middle;<span class="attribute">font-family</span>:<span class="string">"Helvetica Neue"</span>,Helvetica,Arial,<span class="string">"微软雅黑"</span>,sans-serif;&#125;</span><br><span class="line">    <span class="comment">/*input[type="checkbox"]&#123; background:#2460aa; color:#fff; -webkit-text-shadow:none; border-color:#2157db; margin-right:0.08rem; border-radius:2px; -webkit-box-shadow:none;&#125;*/</span></span><br><span class="line">    <span class="comment">/*去除ios浏览器中input button的风格*/</span></span><br><span class="line">    <span class="selector-tag">button</span>, <span class="selector-tag">input</span><span class="selector-attr">[type="button"]</span>, <span class="selector-tag">input</span><span class="selector-attr">[type="reset"]</span>, <span class="selector-tag">input</span><span class="selector-attr">[type="submit"]</span> &#123;</span><br><span class="line">        <span class="attribute">-webkit-appearance</span>:none;</span><br><span class="line">        <span class="attribute">outline</span>:none</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*移除html5 input="number"的小箭头*/</span></span><br><span class="line">    <span class="attribute">input</span>::-webkit-outer-spin-button,</span><br><span class="line">    <span class="attribute">input</span>::-webkit-inner-spin-button&#123;</span><br><span class="line">        <span class="attribute">-webkit-appearance</span>: none <span class="meta">!important</span>;</span><br><span class="line">        <span class="attribute">margin</span>: <span class="number">0</span>; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-tag">input</span><span class="selector-attr">[type="number"]</span>&#123;<span class="attribute">-moz-appearance</span>:textfield;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.reset-sina</span>()&#123;</span><br><span class="line">  <span class="selector-tag">html</span>, <span class="selector-tag">body</span>, <span class="selector-tag">ul</span>, <span class="selector-tag">li</span>, <span class="selector-tag">ol</span>, <span class="selector-tag">dl</span>, <span class="selector-tag">dd</span>, <span class="selector-tag">dt</span>, <span class="selector-tag">p</span>, <span class="selector-tag">h1</span>, <span class="selector-tag">h2</span>, <span class="selector-tag">h3</span>, <span class="selector-tag">h4</span>, <span class="selector-tag">h5</span>, <span class="selector-tag">h6</span>, <span class="selector-tag">form</span>, <span class="selector-tag">fieldset</span>, <span class="selector-tag">legend</span>, <span class="selector-tag">img</span> &#123; <span class="attribute">margin</span>:<span class="number">0</span>; <span class="attribute">padding</span>:<span class="number">0</span>; &#125;</span><br><span class="line">  <span class="selector-tag">fieldset</span>, <span class="selector-tag">img</span> &#123; <span class="attribute">border</span>:none; &#125;</span><br><span class="line">  <span class="selector-tag">img</span>&#123;<span class="attribute">display</span>: block;&#125;</span><br><span class="line">  <span class="selector-tag">address</span>, <span class="selector-tag">caption</span>, <span class="selector-tag">cite</span>, <span class="selector-tag">code</span>, <span class="selector-tag">dfn</span>, <span class="selector-tag">th</span>, <span class="selector-tag">var</span> &#123; <span class="attribute">font-style</span>:normal; <span class="attribute">font-weight</span>:normal; &#125;</span><br><span class="line">  <span class="selector-tag">ul</span>, <span class="selector-tag">ol</span> &#123; <span class="attribute">list-style</span>:none; &#125;</span><br><span class="line">  <span class="selector-tag">input</span> &#123; <span class="attribute">padding-top</span>:<span class="number">0</span>; <span class="attribute">padding-bottom</span>:<span class="number">0</span>; <span class="attribute">font-family</span>: <span class="string">"SimSun"</span>,<span class="string">"宋体"</span>;&#125;</span><br><span class="line">  <span class="attribute">input</span>::-moz-focus-inner &#123; <span class="attribute">border</span>:none; <span class="attribute">padding</span>:<span class="number">0</span>; &#125;</span><br><span class="line">  <span class="selector-tag">select</span>, <span class="selector-tag">input</span> &#123; <span class="attribute">vertical-align</span>:middle; &#125;</span><br><span class="line">  <span class="selector-tag">select</span>, <span class="selector-tag">input</span>, <span class="selector-tag">textarea</span> &#123; <span class="attribute">font-size</span>:<span class="number">12px</span>; <span class="attribute">margin</span>:<span class="number">0</span>; &#125;</span><br><span class="line">  <span class="selector-tag">input</span><span class="selector-attr">[type="text"]</span>, <span class="selector-tag">input</span><span class="selector-attr">[type="password"]</span>, <span class="selector-tag">textarea</span> &#123; <span class="attribute">outline-style</span>:none; <span class="attribute">-webkit-appearance</span>:none; &#125;</span><br><span class="line">  <span class="selector-tag">textarea</span> &#123; <span class="attribute">resize</span>:none; &#125;</span><br><span class="line">  <span class="selector-tag">input</span>,<span class="selector-tag">textarea</span>&#123;<span class="attribute">background</span>: none; <span class="attribute">border</span>: none;&#125;</span><br><span class="line">  <span class="selector-tag">table</span> &#123; <span class="attribute">border-collapse</span>:collapse; &#125;</span><br><span class="line">  <span class="selector-tag">body</span> &#123; <span class="attribute">color</span>:<span class="number">#333</span>; <span class="attribute">font</span>:<span class="number">12px</span>/<span class="number">20px</span> <span class="string">"SimSun"</span>,<span class="string">"宋体"</span>,<span class="string">"Arial Narrow"</span>,HELVETICA; <span class="attribute">background</span>:<span class="number">#fff</span>; &#125;</span><br><span class="line">  <span class="selector-tag">a</span> &#123; <span class="attribute">color</span>:<span class="number">#666</span>; <span class="attribute">text-decoration</span>:none; &#125;</span><br><span class="line">  <span class="attribute">a</span>:visited &#123; <span class="attribute">color</span>:<span class="number">#666</span>; &#125;</span><br><span class="line">  <span class="attribute">a</span>:hover, <span class="attribute">a</span>:active, <span class="attribute">a</span>:focus &#123; <span class="attribute">color</span>:<span class="number">#ff8400</span>; <span class="attribute">text-decoration</span>:underline; &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//去除a和label的虚线</span></span><br><span class="line"><span class="selector-class">.remove_dotted</span>()&#123;</span><br><span class="line">  <span class="selector-tag">a</span>,<span class="selector-tag">label</span> &#123;<span class="attribute">blr</span>:<span class="string">~'expression(this.onFocus=this.blur())'</span>&#125;</span><br><span class="line">  <span class="selector-tag">a</span>,<span class="selector-tag">label</span> &#123;<span class="attribute">outline</span>:none;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//浮动</span></span><br><span class="line"><span class="selector-class">.fl</span>(<span class="variable">@f</span>:left;)&#123;</span><br><span class="line">    <span class="attribute">float</span>: <span class="variable">@f</span>;</span><br><span class="line">    <span class="attribute">display</span>: inline;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.fr</span>(<span class="variable">@f</span>:right)&#123;</span><br><span class="line">  <span class="attribute">float</span>: <span class="variable">@f</span>;</span><br><span class="line">  <span class="attribute">display</span>: inline;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//定位</span></span><br><span class="line"><span class="selector-class">.rel</span>(<span class="variable">@rel</span>:relative)&#123;</span><br><span class="line">  <span class="attribute">position</span>: <span class="variable">@rel</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.abs</span>(<span class="variable">@abs</span>:absolute)&#123;</span><br><span class="line">  <span class="attribute">position</span>: <span class="variable">@abs</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.fix</span>(<span class="variable">@fix</span>:fixed)&#123;</span><br><span class="line">  <span class="attribute">position</span>: <span class="variable">@fix</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//全局定位</span></span><br><span class="line"><span class="selector-class">.pos</span> (r)&#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.pos</span> (a)&#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.pos</span> (f)&#123;</span><br><span class="line">  <span class="attribute">position</span>: fixed;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.pos-box</span>(<span class="variable">@w</span>:<span class="number">500px</span>,<span class="variable">@h</span>:<span class="number">400px</span>,<span class="variable">@pos</span>:absolute)&#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="variable">@w</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="variable">@h</span>;</span><br><span class="line">  <span class="attribute">position</span>: <span class="variable">@pos</span>;</span><br><span class="line">  <span class="attribute">left</span>:<span class="number">0</span>;</span><br><span class="line">  <span class="attribute">top</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//定位居中</span></span><br><span class="line"><span class="selector-class">.pos-box-cc</span>(<span class="variable">@w</span>:<span class="number">600px</span>,<span class="variable">@h</span>:<span class="number">360px</span>,<span class="variable">@pos</span>:absolute)&#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="variable">@w</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="variable">@h</span>;</span><br><span class="line">  <span class="attribute">position</span>: <span class="variable">@pos</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">margin-left</span>: -<span class="variable">@w</span> / <span class="number">2</span>;</span><br><span class="line">  <span class="attribute">margin-top</span>: -<span class="variable">@h</span> / <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//布局</span></span><br><span class="line"><span class="selector-class">.bc</span>()&#123;</span><br><span class="line">  <span class="attribute">margin-left</span>: auto;</span><br><span class="line">  <span class="attribute">margin-right</span>: auto;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.bc-d</span>(<span class="variable">@w</span>:<span class="number">500px</span>)&#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="variable">@w</span>;</span><br><span class="line">  <span class="selector-class">.bc</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.wh</span>(<span class="variable">@w</span>)&#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="variable">@w</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="variable">@w</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.w-be-h</span>(<span class="variable">@w</span>)&#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="variable">@w</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="variable">@w</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.z-index</span>(<span class="variable">@index</span>:<span class="number">1</span>)&#123;</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="variable">@index</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//高度100%</span></span><br><span class="line"><span class="selector-class">.h100</span>()&#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//文字垂直居中</span></span><br><span class="line"><span class="selector-class">.txt-ver</span>(<span class="variable">@h</span>)&#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="variable">@h</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="variable">@h</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 同.txt-ver</span></span><br><span class="line"><span class="selector-class">.l-h</span>(<span class="variable">@h</span>)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="variable">@h</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="variable">@h</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//display</span></span><br><span class="line"><span class="selector-class">.d-b</span>()&#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.db</span>()&#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.d-i</span>()&#123;</span><br><span class="line">  <span class="attribute">display</span>: inline;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.di</span>()&#123;</span><br><span class="line">  <span class="attribute">display</span>: inline;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.d-ib</span>()&#123;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.dib</span>()&#123;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.d-ib7</span>()&#123;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  *<span class="attribute">display</span>: inline;</span><br><span class="line">  *<span class="attribute">zoom</span>:<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.dib7</span>()&#123;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  *<span class="attribute">display</span>: inline;</span><br><span class="line">  *<span class="attribute">zoom</span>:<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.d-t</span>()&#123;</span><br><span class="line">  <span class="attribute">display</span>:table;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.dt</span>()&#123;</span><br><span class="line">  <span class="attribute">display</span>:table;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.d-n</span>()&#123;</span><br><span class="line">  <span class="attribute">display</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.dn</span>()&#123;</span><br><span class="line">  <span class="attribute">display</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//font family</span></span><br><span class="line"><span class="selector-class">.font-apple</span>()&#123;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">'punctuation'</span>, <span class="string">'PingFangSC-Regular'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.font-all</span>()&#123;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">'punctuation'</span>, <span class="string">'PingFangSC-Regular'</span>, <span class="string">"Microsoft YaHei"</span>, <span class="string">"微软雅黑"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.font-fm</span>()&#123;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">"Microsoft Yahei"</span>,<span class="string">"微软雅黑"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.font-fs</span>()&#123;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">"SimSun"</span>,<span class="string">"宋体"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.font-fa</span>()&#123;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">"Arial"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.font-fv</span>()&#123;</span><br><span class="line">  <span class="attribute">font-family</span>:Verdana;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//font weight</span></span><br><span class="line"><span class="selector-class">.font-w700</span>()&#123;</span><br><span class="line">  <span class="attribute">font-weight</span>: <span class="number">700</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.font-wb</span>()&#123;</span><br><span class="line">  <span class="attribute">font-weight</span>: bold;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.font-w400</span>()&#123;</span><br><span class="line">  <span class="attribute">font-weight</span>: <span class="number">400</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.font-wn</span>()&#123;</span><br><span class="line">  <span class="attribute">font-weight</span>: normal;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//font size</span></span><br><span class="line"><span class="selector-class">.font-s</span>(<span class="variable">@p</span>: <span class="number">12px</span>)&#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="variable">@p</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.font-s0</span>()&#123;<span class="attribute">font-size</span>: <span class="number">0px</span>;&#125;</span><br><span class="line"><span class="selector-class">.font-s1</span>()&#123;<span class="attribute">font-size</span>: <span class="number">1px</span>;&#125;</span><br><span class="line"><span class="selector-class">.font-s2</span>()&#123;<span class="attribute">font-size</span>: <span class="number">2px</span>;&#125;</span><br><span class="line"><span class="selector-class">.font-s3</span>()&#123;<span class="attribute">font-size</span>: <span class="number">3px</span>;&#125;</span><br><span class="line"><span class="selector-class">.font-s4</span>()&#123;<span class="attribute">font-size</span>: <span class="number">4px</span>;&#125;</span><br><span class="line"><span class="selector-class">.font-s5</span>()&#123;<span class="attribute">font-size</span>: <span class="number">5px</span>;&#125;</span><br><span class="line"><span class="selector-class">.font-s6</span>()&#123;<span class="attribute">font-size</span>: <span class="number">6px</span>;&#125;</span><br><span class="line"><span class="selector-class">.font-s7</span>()&#123;<span class="attribute">font-size</span>: <span class="number">7px</span>;&#125;</span><br><span class="line"><span class="selector-class">.font-s8</span>()&#123;<span class="attribute">font-size</span>: <span class="number">8px</span>;&#125;</span><br><span class="line"><span class="selector-class">.font-s9</span>()&#123;<span class="attribute">font-size</span>: <span class="number">9px</span>;&#125;</span><br><span class="line"><span class="selector-class">.font-s10</span>()&#123;<span class="attribute">font-size</span>: <span class="number">10px</span>;&#125;</span><br><span class="line"><span class="selector-class">.font-s11</span>()&#123;<span class="attribute">font-size</span>: <span class="number">11px</span>;&#125;</span><br><span class="line"><span class="selector-class">.font-s12</span>()&#123;<span class="attribute">font-size</span>: <span class="number">12px</span>;&#125;</span><br><span class="line"><span class="selector-class">.font-s13</span>()&#123;<span class="attribute">font-size</span>: <span class="number">13px</span>;&#125;</span><br><span class="line"><span class="selector-class">.font-s14</span>()&#123;<span class="attribute">font-size</span>: <span class="number">14px</span>;&#125;</span><br><span class="line"><span class="selector-class">.font-s15</span>()&#123;<span class="attribute">font-size</span>: <span class="number">15px</span>;&#125;</span><br><span class="line"><span class="selector-class">.font-s16</span>()&#123;<span class="attribute">font-size</span>: <span class="number">16px</span>;&#125;</span><br><span class="line"><span class="selector-class">.font-s17</span>()&#123;<span class="attribute">font-size</span>: <span class="number">17px</span>;&#125;</span><br><span class="line"><span class="selector-class">.font-s18</span>()&#123;<span class="attribute">font-size</span>: <span class="number">18px</span>;&#125;</span><br><span class="line"><span class="selector-class">.font-s19</span>()&#123;<span class="attribute">font-size</span>: <span class="number">19px</span>;&#125;</span><br><span class="line"><span class="selector-class">.font-s20</span>()&#123;<span class="attribute">font-size</span>: <span class="number">20px</span>;&#125;</span><br><span class="line"><span class="selector-class">.font-s21</span>()&#123;<span class="attribute">font-size</span>: <span class="number">21px</span>;&#125;</span><br><span class="line"><span class="selector-class">.font-s22</span>()&#123;<span class="attribute">font-size</span>: <span class="number">22px</span>;&#125;</span><br><span class="line"><span class="selector-class">.font-s23</span>()&#123;<span class="attribute">font-size</span>: <span class="number">23px</span>;&#125;</span><br><span class="line"><span class="selector-class">.font-s24</span>()&#123;<span class="attribute">font-size</span>: <span class="number">24px</span>;&#125;</span><br><span class="line"><span class="selector-class">.font-s25</span>()&#123;<span class="attribute">font-size</span>: <span class="number">25px</span>;&#125;</span><br><span class="line"><span class="selector-class">.font-s26</span>()&#123;<span class="attribute">font-size</span>: <span class="number">26px</span>;&#125;</span><br><span class="line"><span class="selector-class">.font-s27</span>()&#123;<span class="attribute">font-size</span>: <span class="number">27px</span>;&#125;</span><br><span class="line"><span class="selector-class">.font-s28</span>()&#123;<span class="attribute">font-size</span>: <span class="number">28px</span>;&#125;</span><br><span class="line"><span class="selector-class">.font-s29</span>()&#123;<span class="attribute">font-size</span>: <span class="number">29px</span>;&#125;</span><br><span class="line"><span class="selector-class">.font-s30</span>()&#123;<span class="attribute">font-size</span>: <span class="number">30px</span>;&#125;</span><br><span class="line"><span class="selector-class">.font-s31</span>()&#123;<span class="attribute">font-size</span>: <span class="number">31px</span>;&#125;</span><br><span class="line"><span class="selector-class">.font-s32</span>()&#123;<span class="attribute">font-size</span>: <span class="number">32px</span>;&#125;</span><br><span class="line"><span class="selector-class">.font-s33</span>()&#123;<span class="attribute">font-size</span>: <span class="number">33px</span>;&#125;</span><br><span class="line"><span class="selector-class">.font-s34</span>()&#123;<span class="attribute">font-size</span>: <span class="number">34px</span>;&#125;</span><br><span class="line"><span class="selector-class">.font-s35</span>()&#123;<span class="attribute">font-size</span>: <span class="number">35px</span>;&#125;</span><br><span class="line"><span class="selector-class">.font-s36</span>()&#123;<span class="attribute">font-size</span>: <span class="number">36px</span>;&#125;</span><br><span class="line"><span class="selector-class">.font-s37</span>()&#123;<span class="attribute">font-size</span>: <span class="number">37px</span>;&#125;</span><br><span class="line"><span class="selector-class">.font-s38</span>()&#123;<span class="attribute">font-size</span>: <span class="number">38px</span>;&#125;</span><br><span class="line"><span class="selector-class">.font-s39</span>()&#123;<span class="attribute">font-size</span>: <span class="number">39px</span>;&#125;</span><br><span class="line"><span class="selector-class">.font-s40</span>()&#123;<span class="attribute">font-size</span>: <span class="number">40px</span>;&#125;</span><br><span class="line"><span class="selector-class">.font-s41</span>()&#123;<span class="attribute">font-size</span>: <span class="number">41px</span>;&#125;</span><br><span class="line"><span class="selector-class">.font-s42</span>()&#123;<span class="attribute">font-size</span>: <span class="number">42px</span>;&#125;</span><br><span class="line"><span class="selector-class">.font-s43</span>()&#123;<span class="attribute">font-size</span>: <span class="number">43px</span>;&#125;</span><br><span class="line"><span class="selector-class">.font-s44</span>()&#123;<span class="attribute">font-size</span>: <span class="number">44px</span>;&#125;</span><br><span class="line"><span class="selector-class">.font-s45</span>()&#123;<span class="attribute">font-size</span>: <span class="number">45px</span>;&#125;</span><br><span class="line"><span class="selector-class">.font-s46</span>()&#123;<span class="attribute">font-size</span>: <span class="number">46px</span>;&#125;</span><br><span class="line"><span class="selector-class">.font-s47</span>()&#123;<span class="attribute">font-size</span>: <span class="number">47px</span>;&#125;</span><br><span class="line"><span class="selector-class">.font-s48</span>()&#123;<span class="attribute">font-size</span>: <span class="number">48px</span>;&#125;</span><br><span class="line"><span class="selector-class">.font-s49</span>()&#123;<span class="attribute">font-size</span>: <span class="number">49px</span>;&#125;</span><br><span class="line"><span class="selector-class">.font-s50</span>()&#123;<span class="attribute">font-size</span>: <span class="number">50px</span>;&#125;</span><br><span class="line"><span class="selector-class">.font-s51</span>()&#123;<span class="attribute">font-size</span>: <span class="number">51px</span>;&#125;</span><br><span class="line"><span class="selector-class">.font-s52</span>()&#123;<span class="attribute">font-size</span>: <span class="number">52px</span>;&#125;</span><br><span class="line"><span class="selector-class">.font-s53</span>()&#123;<span class="attribute">font-size</span>: <span class="number">53px</span>;&#125;</span><br><span class="line"><span class="selector-class">.font-s54</span>()&#123;<span class="attribute">font-size</span>: <span class="number">54px</span>;&#125;</span><br><span class="line"><span class="selector-class">.font-s55</span>()&#123;<span class="attribute">font-size</span>: <span class="number">55px</span>;&#125;</span><br><span class="line"><span class="selector-class">.font-s56</span>()&#123;<span class="attribute">font-size</span>: <span class="number">56px</span>;&#125;</span><br><span class="line"><span class="selector-class">.font-s57</span>()&#123;<span class="attribute">font-size</span>: <span class="number">57px</span>;&#125;</span><br><span class="line"><span class="selector-class">.font-s58</span>()&#123;<span class="attribute">font-size</span>: <span class="number">58px</span>;&#125;</span><br><span class="line"><span class="selector-class">.font-s59</span>()&#123;<span class="attribute">font-size</span>: <span class="number">59px</span>;&#125;</span><br><span class="line"><span class="selector-class">.font-s60</span>()&#123;<span class="attribute">font-size</span>: <span class="number">60px</span>;&#125;</span><br><span class="line"><span class="selector-class">.font-s61</span>()&#123;<span class="attribute">font-size</span>: <span class="number">61px</span>;&#125;</span><br><span class="line"><span class="selector-class">.font-s62</span>()&#123;<span class="attribute">font-size</span>: <span class="number">62px</span>;&#125;</span><br><span class="line"><span class="selector-class">.font-s63</span>()&#123;<span class="attribute">font-size</span>: <span class="number">63px</span>;&#125;</span><br><span class="line"><span class="selector-class">.font-s64</span>()&#123;<span class="attribute">font-size</span>: <span class="number">64px</span>;&#125;</span><br><span class="line"><span class="selector-class">.font-s65</span>()&#123;<span class="attribute">font-size</span>: <span class="number">65px</span>;&#125;</span><br><span class="line"><span class="selector-class">.font-s66</span>()&#123;<span class="attribute">font-size</span>: <span class="number">66px</span>;&#125;</span><br><span class="line"><span class="selector-class">.font-s67</span>()&#123;<span class="attribute">font-size</span>: <span class="number">67px</span>;&#125;</span><br><span class="line"><span class="selector-class">.font-s68</span>()&#123;<span class="attribute">font-size</span>: <span class="number">68px</span>;&#125;</span><br><span class="line"><span class="selector-class">.font-s69</span>()&#123;<span class="attribute">font-size</span>: <span class="number">69px</span>;&#125;</span><br><span class="line"><span class="selector-class">.font-s70</span>()&#123;<span class="attribute">font-size</span>: <span class="number">70px</span>;&#125;</span><br><span class="line"><span class="selector-class">.font-s71</span>()&#123;<span class="attribute">font-size</span>: <span class="number">71px</span>;&#125;</span><br><span class="line"><span class="selector-class">.font-s72</span>()&#123;<span class="attribute">font-size</span>: <span class="number">72px</span>;&#125;</span><br><span class="line"><span class="selector-class">.font-s73</span>()&#123;<span class="attribute">font-size</span>: <span class="number">73px</span>;&#125;</span><br><span class="line"><span class="selector-class">.font-s74</span>()&#123;<span class="attribute">font-size</span>: <span class="number">74px</span>;&#125;</span><br><span class="line"><span class="selector-class">.font-s75</span>()&#123;<span class="attribute">font-size</span>: <span class="number">75px</span>;&#125;</span><br><span class="line"><span class="selector-class">.font-s76</span>()&#123;<span class="attribute">font-size</span>: <span class="number">76px</span>;&#125;</span><br><span class="line"><span class="selector-class">.font-s77</span>()&#123;<span class="attribute">font-size</span>: <span class="number">77px</span>;&#125;</span><br><span class="line"><span class="selector-class">.font-s78</span>()&#123;<span class="attribute">font-size</span>: <span class="number">78px</span>;&#125;</span><br><span class="line"><span class="selector-class">.font-s79</span>()&#123;<span class="attribute">font-size</span>: <span class="number">79px</span>;&#125;</span><br><span class="line"><span class="selector-class">.font-s80</span>()&#123;<span class="attribute">font-size</span>: <span class="number">80px</span>;&#125;</span><br><span class="line"><span class="selector-class">.font-s81</span>()&#123;<span class="attribute">font-size</span>: <span class="number">81px</span>;&#125;</span><br><span class="line"><span class="selector-class">.font-s82</span>()&#123;<span class="attribute">font-size</span>: <span class="number">82px</span>;&#125;</span><br><span class="line"><span class="selector-class">.font-s83</span>()&#123;<span class="attribute">font-size</span>: <span class="number">83px</span>;&#125;</span><br><span class="line"><span class="selector-class">.font-s84</span>()&#123;<span class="attribute">font-size</span>: <span class="number">84px</span>;&#125;</span><br><span class="line"><span class="selector-class">.font-s85</span>()&#123;<span class="attribute">font-size</span>: <span class="number">85px</span>;&#125;</span><br><span class="line"><span class="selector-class">.font-s86</span>()&#123;<span class="attribute">font-size</span>: <span class="number">86px</span>;&#125;</span><br><span class="line"><span class="selector-class">.font-s87</span>()&#123;<span class="attribute">font-size</span>: <span class="number">87px</span>;&#125;</span><br><span class="line"><span class="selector-class">.font-s88</span>()&#123;<span class="attribute">font-size</span>: <span class="number">88px</span>;&#125;</span><br><span class="line"><span class="selector-class">.font-s89</span>()&#123;<span class="attribute">font-size</span>: <span class="number">89px</span>;&#125;</span><br><span class="line"><span class="selector-class">.font-s90</span>()&#123;<span class="attribute">font-size</span>: <span class="number">90px</span>;&#125;</span><br><span class="line"><span class="selector-class">.font-s91</span>()&#123;<span class="attribute">font-size</span>: <span class="number">91px</span>;&#125;</span><br><span class="line"><span class="selector-class">.font-s92</span>()&#123;<span class="attribute">font-size</span>: <span class="number">92px</span>;&#125;</span><br><span class="line"><span class="selector-class">.font-s93</span>()&#123;<span class="attribute">font-size</span>: <span class="number">93px</span>;&#125;</span><br><span class="line"><span class="selector-class">.font-s94</span>()&#123;<span class="attribute">font-size</span>: <span class="number">94px</span>;&#125;</span><br><span class="line"><span class="selector-class">.font-s95</span>()&#123;<span class="attribute">font-size</span>: <span class="number">95px</span>;&#125;</span><br><span class="line"><span class="selector-class">.font-s96</span>()&#123;<span class="attribute">font-size</span>: <span class="number">96px</span>;&#125;</span><br><span class="line"><span class="selector-class">.font-s97</span>()&#123;<span class="attribute">font-size</span>: <span class="number">97px</span>;&#125;</span><br><span class="line"><span class="selector-class">.font-s98</span>()&#123;<span class="attribute">font-size</span>: <span class="number">98px</span>;&#125;</span><br><span class="line"><span class="selector-class">.font-s99</span>()&#123;<span class="attribute">font-size</span>: <span class="number">99px</span>;&#125;</span><br><span class="line"><span class="selector-class">.font-s100</span>()&#123;<span class="attribute">font-size</span>: <span class="number">100px</span>;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//background</span></span><br><span class="line"><span class="selector-class">.bg</span>(<span class="variable">@url</span>)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attribute">background</span>: url(<span class="string">@url</span>) <span class="number">0</span> <span class="number">0</span> repeat;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.bg-m</span>(<span class="variable">@url</span>,<span class="variable">@x</span>:<span class="number">0</span>,<span class="variable">@y</span>:<span class="number">0</span>,<span class="variable">@repeat</span>:no-repeat)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attribute">background</span>: url(<span class="string">@url</span>) <span class="variable">@x</span> <span class="variable">@y</span> <span class="variable">@repeat</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.bgi</span>(<span class="variable">@url</span>)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attribute">background-image</span>: url(<span class="string">@url</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.bgp</span>(<span class="variable">@x</span>:<span class="number">0</span>,<span class="variable">@y</span>:<span class="number">0</span>)&#123;</span><br><span class="line">  <span class="attribute">background-position</span>: <span class="variable">@x</span> <span class="variable">@y</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.bgr-r</span>()&#123;</span><br><span class="line">  <span class="attribute">background-repeat</span>: repeat;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.bgr-x</span>()&#123;</span><br><span class="line">  <span class="attribute">background-repeat</span>: repeat-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.bgr-y</span>()&#123;</span><br><span class="line">  <span class="attribute">background-repeat</span>: repeat-y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.bgr-no</span>()&#123;</span><br><span class="line">  <span class="attribute">background-repeat</span>: no-repeat;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.bga-fix</span>()&#123;</span><br><span class="line">  <span class="attribute">background-attachment</span>: fixed;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//lis</span></span><br><span class="line"><span class="selector-class">.list-sn</span>()&#123;</span><br><span class="line">  <span class="attribute">list-style</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//text</span></span><br><span class="line"><span class="selector-class">.text-n</span>(<span class="variable">@p</span>: none)&#123;</span><br><span class="line">  <span class="attribute">text-decoration</span>: <span class="variable">@p</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//添加下划线</span></span><br><span class="line"><span class="selector-class">.tu</span>()&#123;</span><br><span class="line">  <span class="attribute">text-decoration</span>: underline;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.tn</span>()&#123;</span><br><span class="line">  <span class="attribute">text-decoration</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.tl</span>()&#123;</span><br><span class="line">  <span class="attribute">text-align</span>: left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.text-l</span>()&#123;</span><br><span class="line">  <span class="attribute">text-align</span>: left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.tc</span>()&#123;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.text-c</span>()&#123;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.tr</span>()&#123;</span><br><span class="line">  <span class="attribute">text-align</span>: right;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.text-r</span>()&#123;</span><br><span class="line">  <span class="attribute">text-align</span>: right;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//特殊需求</span></span><br><span class="line"><span class="selector-class">.min-width</span>(<span class="variable">@width</span>)&#123;</span><br><span class="line">  <span class="attribute">min-width</span>: <span class="variable">@width</span>;</span><br><span class="line">  <span class="attribute">_width</span>:<span class="variable">@width</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.max-width</span>(<span class="variable">@width</span>,<span class="variable">@id</span>)&#123;</span><br><span class="line">  <span class="attribute">max-width</span>: <span class="variable">@width</span>;</span><br><span class="line">  <span class="attribute">_width</span>:<span class="string">~'expression(document.getElementById("@&#123;id&#125;").offsetHeight&gt;parseInt("@&#123;width&#125;")?"@&#123;width&#125;": "auto")'</span>;</span><br><span class="line">  <span class="attribute">overflow</span>:hidden;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.min-height</span>(<span class="variable">@height</span>)&#123;</span><br><span class="line">  <span class="attribute">min-height</span>: <span class="variable">@height</span>;</span><br><span class="line">  <span class="attribute">_height</span>:<span class="variable">@height</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.max-height</span>(<span class="variable">@height</span>,<span class="variable">@id</span>)&#123;</span><br><span class="line">  <span class="attribute">max-height</span>: <span class="variable">@height</span>;</span><br><span class="line">  <span class="attribute">_height</span>:<span class="string">~'expression(document.getElementById("@&#123;id&#125;").offsetHeight&gt;parseInt("@&#123;height&#125;")?"@&#123;height&#125;": "auto")'</span>;</span><br><span class="line">  <span class="attribute">overflow</span>:hidden;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//三角</span></span><br><span class="line"><span class="selector-class">.triangle</span> (top,<span class="variable">@w</span>:<span class="number">5px</span>,<span class="variable">@color</span>:<span class="number">#ccc</span>)&#123;</span><br><span class="line">  <span class="attribute">border-style</span>:solid dashed dashed dashed;</span><br><span class="line">  <span class="attribute">border-color</span>:<span class="variable">@color</span> transparent transparent transparent;</span><br><span class="line">  <span class="attribute">border-width</span>:<span class="variable">@w</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.triangle</span> (right,<span class="variable">@w</span>:<span class="number">5px</span>,<span class="variable">@color</span>:<span class="number">#ccc</span>)&#123;</span><br><span class="line">  <span class="attribute">border-style</span>:dashed solid dashed dashed;</span><br><span class="line">  <span class="attribute">border-color</span>:transparent <span class="variable">@color</span> transparent transparent;</span><br><span class="line">  <span class="attribute">border-width</span>:<span class="variable">@w</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.triangle</span> (bottom,<span class="variable">@w</span>:<span class="number">5px</span>,<span class="variable">@color</span>:<span class="number">#ccc</span>)&#123;</span><br><span class="line">  <span class="attribute">border-style</span>:dashed dashed solid dashed;</span><br><span class="line">  <span class="attribute">border-color</span>:transparent transparent <span class="variable">@color</span> transparent;</span><br><span class="line">  <span class="attribute">border-width</span>:<span class="variable">@w</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.triangle</span> (left,<span class="variable">@w</span>:<span class="number">5px</span>,<span class="variable">@color</span>:<span class="number">#ccc</span>)&#123;</span><br><span class="line">  <span class="attribute">border-style</span>:dashed dashed dashed solid;</span><br><span class="line">  <span class="attribute">border-color</span>:transparent transparent transparent <span class="variable">@color</span>;</span><br><span class="line">  <span class="attribute">border-width</span>:<span class="variable">@w</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.triangle</span> (<span class="variable">@_</span>,<span class="variable">@w</span>:<span class="number">5px</span>,<span class="variable">@color</span>:<span class="number">#ccc</span>)&#123;</span><br><span class="line">  <span class="selector-class">.triangle-compatible</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//边框附加内容</span></span><br><span class="line"><span class="selector-class">.triangle-compatible</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">0</span>; <span class="attribute">height</span>: <span class="number">0</span>; <span class="attribute">overflow</span>:hidden;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//单独方向</span></span><br><span class="line"><span class="selector-class">.triangle-b</span>(<span class="variable">@w</span>:<span class="number">5px</span>,<span class="variable">@color</span>:<span class="number">#ccc</span>)&#123;</span><br><span class="line">  <span class="attribute">border-style</span>:solid dashed dashed dashed;</span><br><span class="line">  <span class="attribute">border-color</span>:<span class="variable">@color</span> transparent transparent transparent;</span><br><span class="line">  <span class="attribute">border-width</span>:<span class="variable">@w</span>;</span><br><span class="line">  <span class="selector-class">.triangle-compatible</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.triangle-l</span>(<span class="variable">@w</span>:<span class="number">5px</span>,<span class="variable">@color</span>:<span class="number">#ccc</span>)&#123;</span><br><span class="line">  <span class="attribute">border-style</span>:dashed solid dashed dashed;</span><br><span class="line">  <span class="attribute">border-color</span>:transparent <span class="variable">@color</span> transparent transparent;</span><br><span class="line">  <span class="attribute">border-width</span>:<span class="variable">@w</span>;</span><br><span class="line">  <span class="selector-class">.triangle-compatible</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.triangle-t</span>(<span class="variable">@w</span>:<span class="number">5px</span>,<span class="variable">@color</span>:<span class="number">#ccc</span>)&#123;</span><br><span class="line">  <span class="attribute">border-style</span>:dashed dashed solid dashed;</span><br><span class="line">  <span class="attribute">border-color</span>:transparent transparent <span class="variable">@color</span> transparent;</span><br><span class="line">  <span class="attribute">border-width</span>:<span class="variable">@w</span>;</span><br><span class="line">  <span class="selector-class">.triangle-compatible</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.triangle-r</span>(<span class="variable">@w</span>:<span class="number">5px</span>,<span class="variable">@color</span>:<span class="number">#ccc</span>)&#123;</span><br><span class="line">  <span class="attribute">border-style</span>:dashed dashed dashed solid;</span><br><span class="line">  <span class="attribute">border-color</span>:transparent transparent transparent <span class="variable">@color</span>;</span><br><span class="line">  <span class="attribute">border-width</span>:<span class="variable">@w</span>;</span><br><span class="line">  <span class="selector-class">.triangle-compatible</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//透明度</span></span><br><span class="line"><span class="selector-class">.opa</span>(<span class="variable">@opacity</span>: <span class="number">80</span>) &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="variable">@opacity</span> / <span class="number">100</span>;</span><br><span class="line">  <span class="attribute">filter</span>: <span class="string">~"alpha(opacity=@&#123;opacity&#125;)"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.rgba</span>(<span class="variable">@red</span>, <span class="variable">@green</span>, <span class="variable">@blue</span>, <span class="variable">@alpha</span>:<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="variable">@filtercolor:</span><span class="built_in">`(_f = function(d)&#123; var v = (parseInt(d)|0).toString(16);return v.length&lt;2 ? "0"+v : v;&#125;,'#'+_f(@&#123;alpha&#125;*255) + _f(@&#123;red&#125;) + _f(@&#123;green&#125;)+ _f(@&#123;blue&#125;))`</span>;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">background-color</span>: <span class="string">~'rgba(@&#123;red&#125;,@&#123;green&#125;,@&#123;blue&#125;,@&#123;alpha&#125;)'</span>;</span><br><span class="line">        <span class="attribute">-ms-filter</span>:<span class="string">~"progid:DXImageTransform.Microsoft.gradient(startColorstr='@&#123;filtercolor&#125;',endColorstr='@&#123;filtercolor&#125;')"</span>;</span><br><span class="line">        <span class="attribute">filter</span>:<span class="string">~"progid:DXImageTransform.Microsoft.gradient(startColorstr='@&#123;filtercolor&#125;',endColorstr='@&#123;filtercolor&#125;')"</span>;        </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.clearfix</span>() &#123;</span><br><span class="line">  *<span class="attribute">zoom</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="selector-tag">&amp;</span><span class="selector-pseudo">:before</span>,</span><br><span class="line">  <span class="selector-tag">&amp;</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: table;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">""</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-tag">&amp;</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">    <span class="attribute">clear</span>: both;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//文字省略号</span></span><br><span class="line"><span class="comment">// @substract单位为%</span></span><br><span class="line"><span class="selector-class">.ellipsis-basic</span>()&#123;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="attribute">text-overflow</span>: ellipsis;</span><br><span class="line">  <span class="attribute">white-space</span>: nowrap;</span><br><span class="line">  <span class="selector-class">.font-fa</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.ellipsis</span>(<span class="variable">@substract</span>:<span class="number">0</span>) &#123;</span><br><span class="line">  <span class="selector-class">.ellipsis-basic</span>();</span><br><span class="line">  <span class="attribute">width</span>:<span class="number">100%</span> - <span class="variable">@substract</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;平常项目用到less样式封装，zless库（常用的less公共样式库）&lt;br&gt;
    
    </summary>
    
      <category term="css" scheme="https://chongdee.github.io/categories/css/"/>
    
    
      <category term="css" scheme="https://chongdee.github.io/tags/css/"/>
    
      <category term="less" scheme="https://chongdee.github.io/tags/less/"/>
    
  </entry>
  
  <entry>
    <title>Less 编码规范</title>
    <link href="https://chongdee.github.io/2018/11/04/Less-%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83/"/>
    <id>https://chongdee.github.io/2018/11/04/Less-编码规范/</id>
    <published>2018-11-04T07:38:00.000Z</published>
    <updated>2018-11-05T07:12:33.837Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2 id="代码组织"><a href="#代码组织" class="headerlink" title="代码组织"></a>代码组织</h2><p>代码必须（MUST）按如下形式按顺序组织：</p><ul><li>@import</li><li>变量声明</li><li>样式声明<figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ✓</span></span><br><span class="line"><span class="keyword">@import</span> <span class="string">"est/all.less"</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">@default-text-color:</span> <span class="number">#333</span>;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.page</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">960px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="import-语句"><a href="#import-语句" class="headerlink" title="@import 语句"></a>@import 语句</h2><p>@import 语句引用的文件必须（MUST）写在一对引号内，.less 后缀不得（MUST NOT）省略（与引入 CSS 文件时的路径格式一致）。引号使用 ‘ 和 “ 均可，但在同一项目内必须（MUST）统一。</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ✗</span></span><br><span class="line">@<span class="keyword">import</span> <span class="string">'est/all'</span>;</span><br><span class="line">@<span class="keyword">import</span> <span class="string">"my/mixins.less"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ✓</span></span><br><span class="line">@<span class="keyword">import</span> <span class="string">"est/all.less"</span>;</span><br><span class="line">@<span class="keyword">import</span> <span class="string">"my/mixins.less"</span>;</span><br></pre></td></tr></table></figure><h2 id="空格"><a href="#空格" class="headerlink" title="空格"></a>空格</h2><p>属性、变量<br>选择器和 { 之间必须（MUST）保留一个空格。</p><p>属性名后的冒号（:）与属性值之间必须（MUST）保留一个空格，冒号前不得（MUST NOT）保留空格。</p><p>定义变量时冒号（:）与变量值之间必须（MUST）保留一个空格，冒号前不得（MUST NOT）保留空格。</p><p>在用逗号（,）分隔的列表（Less 函数参数列表、以 , 分隔的属性值等）中，逗号后必须（MUST）保留一个空格，逗号前不得（MUST NOT）保留空格。</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ✗</span></span><br><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">    <span class="variable">@w:</span><span class="number">50px</span>;</span><br><span class="line">    <span class="variable">@h :</span><span class="number">30px</span>;</span><br><span class="line">    <span class="attribute">width</span>:<span class="variable">@w</span>;</span><br><span class="line">    <span class="attribute">height </span>:<span class="variable">@h</span>;</span><br><span class="line">    <span class="attribute">color</span>: rgba(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>,.<span class="number">3</span>);</span><br><span class="line">    <span class="attribute">transition</span>: width <span class="number">1s</span>,height <span class="number">3s</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ✓</span></span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="variable">@w:</span> <span class="number">50px</span>;</span><br><span class="line">    <span class="variable">@h:</span> <span class="number">30px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="variable">@w</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="variable">@h</span>;</span><br><span class="line">    <span class="attribute">transition</span>: width <span class="number">1s</span>, height <span class="number">3s</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="运算"><a href="#运算" class="headerlink" title="运算"></a>运算</h2><ul><li>/ - / * / / 四个运算符两侧必须（MUST）保留一个空格。+ / - 两侧的操作数必须（MUST）有相同的单位，如果其中一个是变量，另一个数值必须（MUST）书写单位。<figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ✗</span></span><br><span class="line"><span class="variable">@a:</span> <span class="number">200px</span>;</span><br><span class="line"><span class="variable">@b:</span> (<span class="variable">@a</span>+<span class="number">100</span>)*<span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ✓</span></span><br><span class="line"><span class="variable">@a:</span> <span class="number">200px</span>;</span><br><span class="line"><span class="variable">@b:</span> (<span class="variable">@a</span> + <span class="number">100px</span>) * <span class="number">2</span>;</span><br></pre></td></tr></table></figure></li></ul><h2 id="混入（Mixin）"><a href="#混入（Mixin）" class="headerlink" title="混入（Mixin）"></a>混入（Mixin）</h2><p>在定义 mixin 时，如果 mixin 名称不是一个需要使用的 className，必须（MUST）加上括号，否则即使不被调用也会输出到 CSS 中。<br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ✗</span></span><br><span class="line">.big-<span class="built_in">text</span> &#123;</span><br><span class="line">    font-<span class="built_in">size</span>: <span class="number">2</span>em;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">h3 &#123;</span><br><span class="line">    .big-<span class="built_in">text</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ✓</span></span><br><span class="line">.big-<span class="built_in">text</span>() &#123;</span><br><span class="line">    font-<span class="built_in">size</span>: <span class="number">2</span>em;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">h3 &#123;</span><br><span class="line">    .big-<span class="built_in">text</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>如果混入的是本身不输出内容的 mixin，必须（MUST）在 mixin 后添加括号（即使不传参数），以区分这是否是一个 className（修改以后是否会影响 HTML）。<br><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">//</span> ✗</span><br><span class="line"><span class="string">.box</span> &#123;</span><br><span class="line">    <span class="string">.size</span><span class="params">(30px,20px)</span>;</span><br><span class="line">    <span class="string">.clearfix</span> <span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="string">//</span> ✓</span><br><span class="line"><span class="string">.box</span> &#123;</span><br><span class="line">    <span class="string">.size</span><span class="params">(30px, 20px)</span>;</span><br><span class="line">    <span class="string">.clearfix</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><blockquote><p>Mixin 的参数分隔符使用 , 和 ; 均可，但在同一项目中必须（MUST）保持统一。</p></blockquote><h2 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h2><p>当多个选择器共享一个声明块时，每个选择器声明必须（MUST）独占一行。<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ✗</span></span><br><span class="line"><span class="selector-tag">h1</span>, <span class="selector-tag">h2</span>, <span class="selector-tag">h3</span> &#123;</span><br><span class="line">    <span class="attribute">font-weight</span>: <span class="number">700</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ✓</span></span><br><span class="line"><span class="selector-tag">h1</span>,</span><br><span class="line"><span class="selector-tag">h2</span>,</span><br><span class="line"><span class="selector-tag">h3</span> &#123;</span><br><span class="line">    <span class="attribute">font-weight</span>: <span class="number">700</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><blockquote><p>Class 命名不得以样式信息进行描述，如 .float-right、text-red 等。</p></blockquote><h2 id="省略与缩写"><a href="#省略与缩写" class="headerlink" title="省略与缩写"></a>省略与缩写</h2><h3 id="缩写"><a href="#缩写" class="headerlink" title="缩写"></a>缩写</h3><p>多个属性定义可以使用缩写时， 尽量（SHOULD）使用缩写。缩写更清晰字节数更少。常见缩写有 margin、border、padding、font、list-style 等。在书写时必须（MUST）考量缩写展开后是否有不需要覆盖的属性内容被修改，从而带来副作用。</p><h3 id="数值"><a href="#数值" class="headerlink" title="数值"></a>数值</h3><p>对于处于 (0, 1) 范围内的数值，小数点前的 0 可以（MAY）省略，同一项目中必须（MUST）保持一致。<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ✗</span></span><br><span class="line">transition-duration: <span class="number">0.5s</span>, <span class="number">.7s</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ✓</span></span><br><span class="line">transition-duration: <span class="number">.5s</span>, <span class="number">.7s</span>;</span><br></pre></td></tr></table></figure></p><h3 id="0-值"><a href="#0-值" class="headerlink" title="0 值"></a>0 值</h3><p>当属性值为 0 时，必须（MUST）省略可省的单位（长度单位如 px、em，不包括时间、角度等如 s、deg）。<br><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ✗</span></span><br><span class="line"><span class="attribute">margin-top</span>: <span class="number">0px</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ✓</span></span><br><span class="line"><span class="attribute">margin-top</span>: <span class="number">0</span>;</span><br></pre></td></tr></table></figure></p><h3 id="颜色"><a href="#颜色" class="headerlink" title="颜色"></a>颜色</h3><p>颜色定义必须（MUST）使用 #rrggbb 格式定义，并在可能时尽量（SHOULD）缩写为 #rgb 形式，且避免直接使用颜色名称与 rgb() 表达式。</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ✗</span></span><br><span class="line"><span class="attribute">border-color</span>: red;</span><br><span class="line"><span class="attribute">color</span>: rgb(<span class="number">254</span>, <span class="number">254</span>, <span class="number">254</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// ✓</span></span><br><span class="line"><span class="attribute">border-color</span>: <span class="number">#f00</span>;</span><br><span class="line"><span class="attribute">color</span>: <span class="number">#fefefe</span>;</span><br></pre></td></tr></table></figure><h3 id="私有属性前缀"><a href="#私有属性前缀" class="headerlink" title="私有属性前缀"></a>私有属性前缀</h3><p>同一属性有不同私有前缀的，尽量（SHOULD）按前缀长度降序书写，标准形式必须（MUST）写在最后。且这一组属性以第一条的位置为准，尽量（SHOULD）按冒号的位置对齐。<br><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ✓</span></span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    -webkit-<span class="attribute">transform</span>: rotate(<span class="number">30deg</span>);</span><br><span class="line">       -moz-<span class="attribute">transform</span>: rotate(<span class="number">30deg</span>);</span><br><span class="line">        -ms-<span class="attribute">transform</span>: rotate(<span class="number">30deg</span>);</span><br><span class="line">         -o-<span class="attribute">transform</span>: rotate(<span class="number">30deg</span>);</span><br><span class="line">            <span class="attribute">transform</span>: rotate(<span class="number">30deg</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>可以（MAY）在无其他更好解决办法时使用 CSS hack，并且尽量（SHOULD）使用简单的属性名 hack 如 _zoom、*margin。</p><p>可以（MAY）但谨慎使用 IE 滤镜。需要注意的是，IE 滤镜中图片的 URL 是以页面路径作为相对目录，而不是 CSS 文件路径。</p><h2 id="嵌套和缩进"><a href="#嵌套和缩进" class="headerlink" title="嵌套和缩进"></a>嵌套和缩进</h2><p>必须（MUST）采用 4 个空格为一次缩进， 不得（MUST NOT）采用 TAB 作为缩进。</p><p>嵌套的声明块前必须（MUST）增加一次缩进，有多个声明块共享命名空间时尽量（SHOULD）嵌套书写，避免选择器的重复。</p><p>但是需注意的是，尽量（SHOULD）仅在必须区分上下文时才引入嵌套关系（在嵌套书写前先考虑如果不能嵌套，会如何书写选择器）。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ✗</span></span><br><span class="line"><span class="selector-class">.main</span> <span class="selector-class">.title</span> &#123;</span><br><span class="line">  <span class="attribute">font-weight</span>: <span class="number">700</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.main</span> <span class="selector-class">.content</span> &#123;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">1.5</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.main</span> &#123;</span><br><span class="line"><span class="selector-class">.warning</span> &#123;</span><br><span class="line">  <span class="attribute">font-weight</span>: <span class="number">700</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.comment-form</span> &#123;</span><br><span class="line">    <span class="selector-id">#comment</span>:invalid &#123;</span><br><span class="line">      <span class="attribute">color</span>: red;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ✓</span></span><br><span class="line"><span class="selector-class">.main</span> &#123;</span><br><span class="line">    <span class="selector-class">.title</span> &#123;</span><br><span class="line">        <span class="attribute">font-weight</span>: <span class="number">700</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.content</span> &#123;</span><br><span class="line">        <span class="attribute">line-height</span>: <span class="number">1.5</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.warning</span> &#123;</span><br><span class="line">        <span class="attribute">font-weight</span>: <span class="number">700</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#comment</span>:invalid &#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>Less 的变量值总是以同一作用域下最后一个同名变量为准，务必注意后面的设定会覆盖所有之前的设定。</p><p>变量命名必须（MUST）采用 @foo-bar 形式，不得（MUST NOT）使用 @fooBar 形式。</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ✗</span></span><br><span class="line"><span class="variable">@sidebarWidth:</span> <span class="number">200px</span>;</span><br><span class="line"><span class="variable">@width:</span><span class="number">800px</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ✓</span></span><br><span class="line"><span class="variable">@sidebar-width:</span> <span class="number">200px</span>;</span><br><span class="line"><span class="variable">@width:</span> <span class="number">800px</span>;</span><br></pre></td></tr></table></figure><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p>使用继承时，如果在声明块内书写 :extend 语句，必须（MUST）写在开头：<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ✗</span></span><br><span class="line"><span class="selector-class">.sub</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">    <span class="selector-tag">&amp;</span><span class="selector-pseudo">:extend(.mod</span> <span class="keyword">all</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ✓</span></span><br><span class="line"><span class="selector-class">.sub</span> &#123;</span><br><span class="line">    <span class="selector-tag">&amp;</span><span class="selector-pseudo">:extend(.mod</span> <span class="keyword">all</span>);</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="命名空间"><a href="#命名空间" class="headerlink" title="命名空间"></a>命名空间</h2><p>变量和 mixin 在命名时必须（MUST）遵循如下原则：</p><ul><li>一个项目只能引入一个无命名前缀的基础样式库（如 est）</li><li>业务代码和其他被引入的样式代码中，变量和 mixin 必须有项目或库的前缀<h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2>在进行字符串转义时，使用 ~”” 表达式与 e() 函数均可，但在同一项目中必须（MUST）保持一致。</li></ul><p>字符串两侧的引号必须（MUST）使用 “。</p><h2 id="JS-表达式"><a href="#JS-表达式" class="headerlink" title="JS 表达式"></a>JS 表达式</h2><p>可以（MAY）使用 JS 表达式（~``）生成属性值或变量，其中包含的字符串两侧的引号尽量（SHOULD）使用单引号（’）。</p><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p>单行注释尽量（SHOULD）使用 // 方式。</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Hide everything</span></span><br><span class="line"><span class="comment">* &#123;</span></span><br><span class="line">    <span class="keyword">display</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=&quot;\assets\js\APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;h2 id=&quot;代码组织&quot;&gt;&lt;a href=&quot;#代码组织&quot; class=&quot;headerlink&quot; title=&quot;代码组织&quot;&gt;&lt;/a&gt;代码组织&lt;/h2&gt;&lt;p&gt;代码必须（MUST）按如
      
    
    </summary>
    
      <category term="css" scheme="https://chongdee.github.io/categories/css/"/>
    
    
      <category term="代码规范" scheme="https://chongdee.github.io/tags/%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83/"/>
    
      <category term="css" scheme="https://chongdee.github.io/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>Airbnb CSS / Sass 指南</title>
    <link href="https://chongdee.github.io/2018/11/04/Airbnb-CSS-Sass-%E6%8C%87%E5%8D%97/"/>
    <id>https://chongdee.github.io/2018/11/04/Airbnb-CSS-Sass-指南/</id>
    <published>2018-11-04T06:44:45.000Z</published>
    <updated>2018-11-04T07:35:55.950Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2 id="规则声明"><a href="#规则声明" class="headerlink" title="规则声明"></a>规则声明</h2><p>我们把一个（或一组）选择器和一组属性称之为 “规则声明”。举个例子：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.listing</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">18px</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">1.2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><a id="more"></a><h2 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h2><p>在规则声明中，“选择器” 负责选取 DOM 树中的元素，这些元素将被定义的属性所修饰。选择器可以匹配 HTML 元素，也可以匹配一个元素的类名、ID, 或者元素拥有的属性。以下是选择器的例子：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.my-element-class</span> &#123;</span><br><span class="line">  <span class="comment">/* ... */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-attr">[aria-hidden]</span> &#123;</span><br><span class="line">  <span class="comment">/* ... */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h2><p>最后，属性决定了规则声明里被选择的元素将得到何种样式。属性以键值对形式存在，一个规则声明可以包含一或多个属性定义。以下是属性定义的例子：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* some selector */</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#f1f1f1</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#333</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h2><h3 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h3><ul><li>使用 2 个空格作为缩进。</li><li>类名建议使用破折号代替驼峰法。如果你使用 BEM，也可以使用下划线（参见下面的 OOCSS 和 BEM）。</li><li>不要使用 ID 选择器。</li><li>在一个规则声明中应用了多个选择器时，每个选择器独占一行。</li><li>在规则声明的左大括号 { 前加上一个空格。</li><li>在属性的冒号 : 后面加上一个空格，前面不加空格。</li><li>规则声明的右大括号 } 独占一行。</li><li>规则声明之间用空行分隔开。<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Bad</span></span><br><span class="line">.avatar&#123;</span><br><span class="line">    <span class="attribute">border-radius</span>:<span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">border</span>:<span class="number">2px</span> solid white; &#125;</span><br><span class="line"><span class="selector-class">.no</span>, <span class="selector-class">.nope</span>, <span class="selector-class">.not_good</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#lol-no</span> &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Good</span></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.avatar</span> &#123;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">2px</span> solid white;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.one</span>,</span><br><span class="line"><span class="selector-class">.selector</span>,</span><br><span class="line"><span class="selector-class">.per-line</span> &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><ol><li>建议使用行注释 (在 Sass 中是 //) 代替块注释。</li><li>建议注释独占一行。避免行末注释。</li><li>给没有自注释的代码写上详细说明，比如：<ul><li>为什么用到了 z-index</li><li>兼容性处理或者针对特定浏览器的 hack</li></ul></li></ol><h2 id="OOCSS-和-BEM"><a href="#OOCSS-和-BEM" class="headerlink" title="OOCSS 和 BEM"></a>OOCSS 和 BEM</h2><p>出于以下原因，我们鼓励使用 OOCSS 和 BEM 的某种组合：</p><ul><li>可以帮助我们理清 CSS 和 HTML 之间清晰且严谨的关系。</li><li>可以帮助我们创建出可重用、易装配的组件。</li><li>可以减少嵌套，降低特定性。</li><li>可以帮助我们创建出可扩展的样式表。</li></ul><p><strong>OOCSS</strong>，也就是 “Object Oriented CSS（面向对象的CSS）”，是一种写 CSS 的方法，其思想就是鼓励你把样式表看作“对象”的集合：创建可重用性、可重复性的代码段让你可以在整个网站中多次使用。</p><p>参考资料：</p><ul><li>Nicole Sullivan 的 <a href="https://github.com/stubbornella/oocss/wiki" target="_blank" rel="noopener">OOCSS wiki</a></li><li>Smashing Magazine 的 <a href="https://www.smashingmagazine.com/2011/12/an-introduction-to-object-oriented-css-oocss/#top" target="_blank" rel="noopener">Introduction to OOCSS</a></li></ul><p><strong>BEM</strong>，也就是 “Block-Element-Modifier”，是一种用于 HTML 和 CSS 类名的<em>命名约定</em>。BEM 最初是由 Yandex 提出的，要知道他们拥有巨大的代码库和可伸缩性，BEM 就是为此而生的，并且可以作为一套遵循 OOCSS 的参考指导规范。</p><p>CSS Trick 的 <a href="https://css-tricks.com/bem-101/" target="_blank" rel="noopener">BEM 101</a><br>Harry Roberts 的 <a href="https://csswizardry.com/2013/01/mindbemding-getting-your-head-round-bem-syntax/" target="_blank" rel="noopener">introduction to BEM</a></p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">article</span> class=<span class="string">"listing-card listing-card--featured"</span>&gt;</span><br><span class="line"></span><br><span class="line">  &lt;<span class="selector-tag">h1</span> class=<span class="string">"listing-card__title"</span>&gt;Adorable <span class="number">2</span>BR <span class="keyword">in</span> the sunny Mission&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">  &lt;<span class="selector-tag">div</span> class=<span class="string">"listing-card__content"</span>&gt;</span><br><span class="line">    &lt;p&gt;Vestibulum id ligula porta felis euismod semper.&lt;/p&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;/article&gt;</span><br><span class="line"><span class="selector-class">.listing-card</span> &#123; &#125;</span><br><span class="line"><span class="selector-class">.listing-card--featured</span> &#123; &#125;</span><br><span class="line"><span class="selector-class">.listing-card__title</span> &#123; &#125;</span><br><span class="line"><span class="selector-class">.listing-card__content</span> &#123; &#125;</span><br></pre></td></tr></table></figure><ul><li>.listing-card 是一个块（block），表示高层次的组件。</li><li>.listing-card__title 是一个元素（element），它属于 .listing-card 的一部分，因此块是由元素组成的。</li><li>.listing-card–featured 是一个修饰符（modifier），表示这个块与 .listing-card 有着不同的状态或者变化。</li></ul><h3 id="BEM"><a href="#BEM" class="headerlink" title="BEM"></a><a href="http://getbem.com/" target="_blank" rel="noopener">BEM</a></h3><p><strong>Naming</strong><br>由拉丁字母, 数字, -组成css的单个名称.<br><strong>Block</strong><br>使用简洁的前缀名字来命名一个独立且有意义的抽象块或组件。<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.block</span><br><span class="line"></span><br><span class="line">.header</span><br><span class="line"></span><br><span class="line">.site-search</span><br></pre></td></tr></table></figure></p><p><strong>Element</strong><br>使用__连接符来连接Block 和 Element。<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.block__element</span><br><span class="line"></span><br><span class="line">.header__title</span><br><span class="line"></span><br><span class="line">.site-search__field</span><br></pre></td></tr></table></figure></p><p><strong>Modifier</strong><br>使用–连接符来连接Block 或 Element 和 Modifier。<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">.block--modifier</span><br><span class="line"></span><br><span class="line">.block__element--modifier</span><br><span class="line"></span><br><span class="line">.header--hide</span><br><span class="line"></span><br><span class="line">.header__title--<span class="attribute">color</span>-red</span><br><span class="line"></span><br><span class="line">.site-search__field--disabled</span><br></pre></td></tr></table></figure></p><p><strong>示例</strong><br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//html</span></span><br><span class="line">&lt;<span class="selector-tag">form</span> class=<span class="string">"form form--theme-xmas form--simple"</span>&gt;</span><br><span class="line">  &lt;<span class="selector-tag">input</span> class=<span class="string">"form__input"</span> type=<span class="string">"text"</span> /&gt;</span><br><span class="line">  &lt;<span class="selector-tag">input</span> class=<span class="string">"form__submit form__submit--disabled"</span> type=<span class="string">"submit"</span> /&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">//CSS</span></span><br><span class="line"><span class="selector-class">.form</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.form--theme-xmas</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.form--simple</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.form__input</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.form__submit</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.form__submit--disabled</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="ID-选择器"><a href="#ID-选择器" class="headerlink" title="ID 选择器"></a>ID 选择器</h2><p>在 CSS 中，虽然可以通过 ID 选择元素，但大家通常都会把这种方式列为反面教材。ID 选择器给你的规则声明带来了不必要的高优先级，而且 ID 选择器是不可重用的。</p><p>想要了解关于这个主题的更多内容，参见 <a href="https://csswizardry.com/2014/07/hacks-for-dealing-with-specificity/" target="_blank" rel="noopener">CSS Wizardry</a> 的文章，文章中有关于如何处理优先级的内容。</p><h2 id="JavaScript-钩子"><a href="#JavaScript-钩子" class="headerlink" title="JavaScript 钩子"></a>JavaScript 钩子</h2><p>避免在 CSS 和 JavaScript 中绑定相同的类。否则开发者在重构时通常会出现以下情况：轻则浪费时间在对照查找每个要改变的类，重则因为害怕破坏功能而不敢作出更改。</p><p>我们推荐在创建用于特定 JavaScript 的类名时，添加 .js- 前缀：<br><figure class="highlight vbscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;button <span class="keyword">class</span>=<span class="string">"btn btn-primary js-request-to-book"</span>&gt;<span class="built_in">Request</span> <span class="keyword">to</span> Book&lt;/button&gt;</span><br></pre></td></tr></table></figure></p><h2 id="边框"><a href="#边框" class="headerlink" title="边框"></a>边框</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Bad</span></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.foo</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Good</span></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.foo</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Sass"><a href="#Sass" class="headerlink" title="Sass"></a>Sass</h2><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><ul><li>使用 .scss 的语法，不使用 .sass 原本的语法。</li><li>CSS 和 @include 声明按照以下逻辑排序（参见下文）</li></ul><h3 id="属性声明的排序"><a href="#属性声明的排序" class="headerlink" title="属性声明的排序"></a>属性声明的排序</h3><p>1.属性声明<br>首先列出除去 @include 和嵌套选择器之外的所有属性声明。<br><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.btn-green</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: green;</span><br><span class="line">  <span class="attribute">font-weight</span>: bold;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>2.@include 声明<br>紧随后面的是 @include，这样可以使得整个选择器的可读性更高。<br><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.btn-green</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: green;</span><br><span class="line">  <span class="attribute">font-weight</span>: bold;</span><br><span class="line">  @<span class="keyword">include</span> transition(background 0.5s ease);</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>3.嵌套选择器<br>如果有必要用到嵌套选择器，把它们放到最后，在规则声明和嵌套选择器之间要加上空白，相邻嵌套选择器之间也要加上空白。嵌套选择器中的内容也要遵循上述指引。<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.btn</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: green;</span><br><span class="line">  <span class="attribute">font-weight</span>: bold;</span><br><span class="line">  @include <span class="attribute">transition</span>(background <span class="number">0.5s</span> ease);</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.icon</span> &#123;</span><br><span class="line">    <span class="attribute">margin-right</span>: <span class="number">10px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><p>变量名应使用破折号（例如 $my-variable）代替 camelCased 和 snake_cased 风格。对于仅用在当前文件的变量，可以在变量名之前添加下划线前缀（例如 $_my-variable）。</p><h3 id="Mixins"><a href="#Mixins" class="headerlink" title="Mixins"></a>Mixins</h3><p>为了让代码遵循 DRY 原则（Don’t Repeat Yourself）、增强清晰性或抽象化复杂性，应该使用 mixin，这与那些命名良好的函数的作用是异曲同工的。虽然 mixin 可以不接收参数，但要注意，假如你不压缩负载（比如通过 gzip），这样会导致最终的样式包含不必要的代码重复。</p><h3 id="扩展指令"><a href="#扩展指令" class="headerlink" title="扩展指令"></a>扩展指令</h3><p>应避免使用 @extend 指令，因为它并不直观，而且具有潜在风险，特别是用在嵌套选择器的时候。即便是在顶层占位符选择器使用扩展，如果选择器的顺序最终会改变，也可能会导致问题。（比如，如果它们存在于其他文件，而加载顺序发生了变化）。其实，使用 @extend 所获得的大部分优化效果，gzip 压缩已经帮助你做到了，因此你只需要通过 mixin 让样式表更符合 DRY 原则就足够了。</p><h3 id="嵌套选择器"><a href="#嵌套选择器" class="headerlink" title="嵌套选择器"></a>嵌套选择器</h3><p><strong>请不要让嵌套选择器的深度超过 3 层！</strong><br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.page-container</span> &#123;</span><br><span class="line">  <span class="selector-class">.content</span> &#123;</span><br><span class="line">    <span class="selector-class">.profile</span> &#123;</span><br><span class="line">      <span class="comment">// STOP!</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>当遇到以上情况的时候，你也许是这样写 CSS 的：</p><ul><li>与 HTML 强耦合的（也是脆弱的）</li><li>过于具体（强大）</li><li>没有重用</li></ul><p>再说一遍: <strong>永远不要嵌套 ID 选择器！</strong></p><p>如果你始终坚持要使用 ID 选择器（劝你三思），那也不应该嵌套它们。如果你正打算这么做，你需要先重新检查你的标签，或者指明原因。如果你想要写出风格良好的 HTML 和 CSS，你是不应该这样做的。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;规则声明&quot;&gt;&lt;a href=&quot;#规则声明&quot; class=&quot;headerlink&quot; title=&quot;规则声明&quot;&gt;&lt;/a&gt;规则声明&lt;/h2&gt;&lt;p&gt;我们把一个（或一组）选择器和一组属性称之为 “规则声明”。举个例子：&lt;br&gt;&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.listing&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;font-size&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;18px&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;line-height&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;1.2&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="css" scheme="https://chongdee.github.io/categories/css/"/>
    
    
      <category term="代码规范" scheme="https://chongdee.github.io/tags/%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83/"/>
    
      <category term="css" scheme="https://chongdee.github.io/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>Airbnb JavaScript 编码风格指南</title>
    <link href="https://chongdee.github.io/2018/11/03/Airbnb-JavaScript-%E7%BC%96%E7%A0%81%E9%A3%8E%E6%A0%BC%E6%8C%87%E5%8D%97/"/>
    <id>https://chongdee.github.io/2018/11/03/Airbnb-JavaScript-编码风格指南/</id>
    <published>2018-11-03T09:29:15.000Z</published>
    <updated>2018-11-04T07:36:01.622Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2 id="Airbnb-JavaScript-编码风格指南（2018年最新版）"><a href="#Airbnb-JavaScript-编码风格指南（2018年最新版）" class="headerlink" title="Airbnb JavaScript 编码风格指南（2018年最新版）"></a>Airbnb JavaScript 编码风格指南（2018年最新版）</h2><blockquote><p>Airbnb JS规范原文： <a href="https://github.com/airbnb/javascript" target="_blank" rel="noopener">https://github.com/airbnb/javascript</a></p></blockquote><h2 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h2><p>1.基本类型：直接存取</p><ul><li>string</li><li>number</li><li>boolean</li><li>null</li><li>undefined</li><li>symbol<a id="more"></a><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">const foo = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="built_in">bar</span> = foo;</span><br><span class="line"></span><br><span class="line"><span class="built_in">bar</span> = <span class="number">9</span>;</span><br><span class="line"></span><br><span class="line">console.<span class="built_in">log</span>(foo, <span class="built_in">bar</span>); <span class="comment">// =&gt; 1, 9</span></span><br></pre></td></tr></table></figure></li></ul><p><strong>symbol 类型不能完全polyfilled，所以请谨慎使用</strong></p><p>2.复杂类型: 通过引用的方式存取</p><ul><li>object</li><li>array</li><li>function<figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">const foo = [<span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line">const bar = foo;</span><br><span class="line"></span><br><span class="line">bar[<span class="number">0</span>] = <span class="number">9</span>;</span><br><span class="line"></span><br><span class="line">console.log(foo[<span class="number">0</span>], bar[<span class="number">0</span>]); <span class="comment">// =&gt; 9, 9</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><p>1.使用const申明引用类型，避免使用var。eslint 设置：<a href="https://eslint.org/docs/rules/prefer-const.html" target="_blank" rel="noopener">prefer-const</a>,<a href="https://eslint.org/docs/rules/no-const-assign.html" target="_blank" rel="noopener">no-const-assign</a></p><blockquote><p>为什么？这能确保你无法对引用重新赋值，也不会导致出现 bug 或难以理解。</p></blockquote><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> b = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">const</span> b = <span class="number">2</span>;</span><br></pre></td></tr></table></figure><p>2.如果必须对引用类型重新赋值，使用let而非var。eslint设置：<a href="https://eslint.org/docs/rules/no-var.html" target="_blank" rel="noopener">no-var </a></p><blockquote><p>为什么？相比于var函数作用域，let块级作用域更容易理解</p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">var</span> <span class="built_in">count</span> = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">  <span class="built_in">count</span> += <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good, use the let.</span></span><br><span class="line"><span class="keyword">let</span> <span class="built_in">count</span> = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">  <span class="built_in">count</span> += <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.注意let和const都是块级作用域<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// const and let only exist in the blocks they are defined in.</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">let</span> a = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">const</span> b = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// ReferenceError</span></span><br><span class="line"><span class="built_in">console</span>.log(b); <span class="comment">// ReferenceError</span></span><br></pre></td></tr></table></figure></p><h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><p>1.使用字面值创建对象。eslint: <a href="https://eslint.org/docs/rules/no-new-object.html" target="_blank" rel="noopener">no-new-object</a><br><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> item = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> item = &#123;&#125;;</span><br></pre></td></tr></table></figure></p><p>2.创建对象的动态属性时，使用计算属性</p><blockquote><p>为什么？这样可以在一个地方定义对象所有的属性</p></blockquote><figure class="highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getKey</span>(<span class="params">k</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`a key named <span class="subst">$&#123;k&#125;</span>`</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attribute">id:</span><span class="string"> 5,</span></span><br><span class="line"><span class="string">  name</span>: <span class="string">'San Francisco'</span>,</span><br><span class="line">&#125;;</span><br><span class="line">obj[getKey(<span class="string">'enabled'</span>)] = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attribute">id:</span><span class="string"> 5,</span></span><br><span class="line"><span class="string">  name</span>: <span class="string">'San Francisco'</span>,</span><br><span class="line">  [getKey(<span class="string">'enabled'</span>)]: <span class="literal">true</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>3.使用对象方法的简写形式。 eslint: <a href="https://eslint.org/docs/rules/object-shorthand.html" target="_blank" rel="noopener">object-shorthand</a></p><blockquote><p>为什么？方法定义简洁清晰</p></blockquote><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> atom = &#123;</span><br><span class="line">  <span class="keyword">value</span>: <span class="number">1</span>,</span><br><span class="line"></span><br><span class="line">  addValue: function (<span class="keyword">value</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> atom.<span class="keyword">value</span> + <span class="keyword">value</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> atom = &#123;</span><br><span class="line">  <span class="keyword">value</span>: <span class="number">1</span>,</span><br><span class="line"></span><br><span class="line">  addValue(<span class="keyword">value</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> atom.<span class="keyword">value</span> + <span class="keyword">value</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>4.使用属性值简写形式</p><blockquote><p>为什么？书写更加简洁，更有描述性。</p></blockquote><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> lukeSkywalker = <span class="string">'Luke Skywalker'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  lukeSkywalker: lukeSkywalker,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  lukeSkywalker,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>5.对象声明时分类简写和非简写的属性名。</p><blockquote><p>为什么？更清晰的了解哪些属性是简写的。</p></blockquote><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> anakinSkywalker = <span class="string">'Anakin Skywalker'</span>;</span><br><span class="line"><span class="keyword">const</span> lukeSkywalker = <span class="string">'Luke Skywalker'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  episodeOne: <span class="number">1</span>,</span><br><span class="line">  twoJediWalkIntoACantina: <span class="number">2</span>,</span><br><span class="line">  lukeSkywalker,</span><br><span class="line">  episodeThree: <span class="number">3</span>,</span><br><span class="line">  mayTheFourth: <span class="number">4</span>,</span><br><span class="line">  anakinSkywalker,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  lukeSkywalker,</span><br><span class="line">  anakinSkywalker,</span><br><span class="line">  episodeOne: <span class="number">1</span>,</span><br><span class="line">  twoJediWalkIntoACantina: <span class="number">2</span>,</span><br><span class="line">  episodeThree: <span class="number">3</span>,</span><br><span class="line">  mayTheFourth: <span class="number">4</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>6.只有对那些不合法的属性名标识符添加引号。</p><blockquote><p>为什么？对象属性更直观，可读性强。能够代码高亮显示，同时对于大多数的js引擎更容易优化代码。</p></blockquote><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> bad = &#123;</span><br><span class="line">  <span class="string">'foo'</span>: <span class="number">3</span>,</span><br><span class="line">  <span class="string">'bar'</span>: <span class="number">4</span>,</span><br><span class="line">  <span class="string">'data-blah'</span>: <span class="number">5</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> good = &#123;</span><br><span class="line">  foo: <span class="number">3</span>,</span><br><span class="line">  bar: <span class="number">4</span>,</span><br><span class="line">  <span class="string">'data-blah'</span>: <span class="number">5</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>7.不要直接使用Object.prototype上的方法，例如hasOwnProperty, propertyIsEnumerable, 和 isPrototypeOf。</p><blockquote><p>为什么？这些方法可能受对象的其他属性影响。例如{ hasOwnProperty: false } 或者 对象可能是null(Object.create(null))</p></blockquote><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line">console.<span class="built_in">log</span>(object.hasOwnProperty(<span class="built_in">key</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> object = <span class="keyword">Object</span>.create(<span class="keyword">null</span>);</span><br><span class="line">obj.hasOwnProperty(<span class="built_in">key</span>) <span class="comment">// Uncaught TypeError: obj.hasOwnProperty is not a function</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">console.<span class="built_in">log</span>(<span class="keyword">Object</span>.prototype.hasOwnProperty.call(object, <span class="built_in">key</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// best</span></span><br><span class="line"><span class="keyword">const</span> has = <span class="keyword">Object</span>.prototype.hasOwnProperty; <span class="comment">// cache the lookup once, in module scope.</span></span><br><span class="line"><span class="comment">/* or */</span></span><br><span class="line"><span class="keyword">import</span> has from <span class="string">'has'</span>; <span class="comment">// https://www.npmjs.com/package/has</span></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">console.<span class="built_in">log</span>(has.call(object, <span class="built_in">key</span>));</span><br></pre></td></tr></table></figure><p>8.浅拷贝对象时推荐使用对象展开操作（object spread operator）而不是Object.assign。使用对象剩余操作符（object rest operator）获取对象中剩余的属性。</p><blockquote><p>为什么？Object.assign使用不当会修改原对象</p></blockquote><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// very bad</span></span><br><span class="line"><span class="keyword">const</span> original = <span class="comment">&#123; a: 1, b: 2 &#125;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">copy</span> = Object.assign(original, <span class="comment">&#123; c: 3 &#125;</span>); <span class="comment">// this mutates `original` ಠ_ಠ</span></span><br><span class="line">delete <span class="keyword">copy</span>.a; <span class="comment">// so does this</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> original = <span class="comment">&#123; a: 1, b: 2 &#125;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">copy</span> = Object.assign(<span class="comment">&#123;&#125;</span>, original, <span class="comment">&#123; c: 3 &#125;</span>); <span class="comment">// copy =&gt; &#123; a: 1, b: 2, c: 3 &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> original = <span class="comment">&#123; a: 1, b: 2 &#125;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">copy</span> = <span class="comment">&#123; ...original, c: 3 &#125;</span>; <span class="comment">// copy =&gt; &#123; a: 1, b: 2, c: 3 &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="comment">&#123; a, ...noA &#125;</span> = <span class="keyword">copy</span>; <span class="comment">// noA =&gt; &#123; b: 2, c: 3 &#125;</span></span><br></pre></td></tr></table></figure><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p>1.使用字面量声明数组。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> items = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> items = [];</span><br></pre></td></tr></table></figure></p><p>2.向数组添加元素时，使用Arrary#push替代直接赋值。<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> someStack = [];</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line">someStack[someStack.length] = <span class="string">'abracadabra'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">someStack.push(<span class="string">'abracadabra'</span>);</span><br></pre></td></tr></table></figure></p><p>3.使用数组展开操作符…拷贝数组<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> <span class="built_in">len</span> = items.length;</span><br><span class="line"><span class="keyword">const</span> itemsCopy = [];</span><br><span class="line">let i;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="built_in">len</span>; i += <span class="number">1</span>) &#123;</span><br><span class="line">  itemsCopy[i] = items[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> itemsCopy = [...items];</span><br></pre></td></tr></table></figure></p><p>4.将类数组对象（array-like）转换成数组时，使用…而不是Array.from<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> foo = <span class="built_in">document</span>.<span class="built_in">querySelectorAll</span>(<span class="string">'.foo'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> nodes = Array.from(foo);</span><br><span class="line"></span><br><span class="line"><span class="comment">// best</span></span><br><span class="line"><span class="keyword">const</span> nodes = [...foo];</span><br></pre></td></tr></table></figure></p><p>5.当需要对可遍历对象进行map操作时，使用Array.from而不是展开操作符…,避免新建一个临时数组。<br><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> baz = [...foo].<span class="built_in">map</span>(bar);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> baz = <span class="keyword">Array</span>.from(foo, bar);</span><br></pre></td></tr></table></figure></p><p>6.数组方法回调需要有返回值。如果函数体比较简单，可以直接用表达式，省略return语句。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// good</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].map(<span class="function">(<span class="params">x</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> y = x + <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">return</span> x * y;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].map(<span class="function"><span class="params">x</span> =&gt;</span> x + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad - no returned value means `memo` becomes undefined after the first iteration</span></span><br><span class="line">[[<span class="number">0</span>, <span class="number">1</span>], [<span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>]].reduce(<span class="function">(<span class="params">memo, item, index</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> flatten = memo.concat(item);</span><br><span class="line">  memo[index] = flatten;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">[[<span class="number">0</span>, <span class="number">1</span>], [<span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>]].reduce(<span class="function">(<span class="params">memo, item, index</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> flatten = memo.concat(item);</span><br><span class="line">  memo[index] = flatten;</span><br><span class="line">  <span class="keyword">return</span> flatten;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line">inbox.filter(<span class="function">(<span class="params">msg</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; subject, author &#125; = msg;</span><br><span class="line">  <span class="keyword">if</span> (subject === <span class="string">'Mockingbird'</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> author === <span class="string">'Harper Lee'</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">inbox.filter(<span class="function">(<span class="params">msg</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; subject, author &#125; = msg;</span><br><span class="line">  <span class="keyword">if</span> (subject === <span class="string">'Mockingbird'</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> author === <span class="string">'Harper Lee'</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>7.如果数组有多行，请在打开和关闭数组括号之前使用换行符(特别是数组对象数据)</p><blockquote><p>为什么？ 更具有可读性</p></blockquote><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">// bad</span><br><span class="line">const arr = <span class="comment">[</span></span><br><span class="line"><span class="comment">  <span class="comment">[0, 1]</span>, <span class="comment">[2, 3]</span>, <span class="comment">[4, 5]</span>,</span></span><br><span class="line"><span class="comment">]</span>;</span><br><span class="line"></span><br><span class="line">const objectInArray = <span class="comment">[&#123;</span></span><br><span class="line"><span class="comment">  id: 1,</span></span><br><span class="line"><span class="comment">&#125;, &#123;</span></span><br><span class="line"><span class="comment">  id: 2,</span></span><br><span class="line"><span class="comment">&#125;]</span>;</span><br><span class="line"></span><br><span class="line">const numberInArray = <span class="comment">[</span></span><br><span class="line"><span class="comment">  1, 2,</span></span><br><span class="line"><span class="comment">]</span>;</span><br><span class="line"></span><br><span class="line">// good</span><br><span class="line">const arr = <span class="comment">[<span class="comment">[0, 1]</span>, <span class="comment">[2, 3]</span>, <span class="comment">[4, 5]</span>]</span>;</span><br><span class="line"></span><br><span class="line">const objectInArray = <span class="comment">[</span></span><br><span class="line"><span class="comment">  &#123;</span></span><br><span class="line"><span class="comment">    id: 1,</span></span><br><span class="line"><span class="comment">  &#125;,</span></span><br><span class="line"><span class="comment">  &#123;</span></span><br><span class="line"><span class="comment">    id: 2,</span></span><br><span class="line"><span class="comment">  &#125;,</span></span><br><span class="line"><span class="comment">]</span>;</span><br><span class="line"></span><br><span class="line">const numberInArray = <span class="comment">[</span></span><br><span class="line"><span class="comment">  1,</span></span><br><span class="line"><span class="comment">  2,</span></span><br><span class="line"><span class="comment">]</span>;</span><br></pre></td></tr></table></figure><h2 id="解构"><a href="#解构" class="headerlink" title="解构"></a>解构</h2><p>1.访问和使用对象的多个属性时用对象解构操作。</p><blockquote><p>为什么？解构可以避免为这些属性创建临时引用。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFullName</span>(<span class="params">user</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> firstName = user.firstName;</span><br><span class="line">  <span class="keyword">const</span> lastName = user.lastName;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;firstName&#125;</span> <span class="subst">$&#123;lastName&#125;</span>`</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFullName</span>(<span class="params">user</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; firstName, lastName &#125; = user;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;firstName&#125;</span> <span class="subst">$&#123;lastName&#125;</span>`</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// best</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFullName</span>(<span class="params">&#123; firstName, lastName &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;firstName&#125;</span> <span class="subst">$&#123;lastName&#125;</span>`</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.使用数组解构<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">const arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line">const first = arr[<span class="number">0</span>];</span><br><span class="line">const second = arr[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">const [first, second] = arr;</span><br></pre></td></tr></table></figure></p><p>3.使用对象解构来实现多个返回值，而不是数组解构。</p><blockquote><p>为什么？你可以随时为返回值新增属性而不用关心属性的顺序。</p></blockquote><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">processInput</span><span class="params">(input)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// then a miracle occurs</span></span><br><span class="line">  <span class="keyword">return</span> [left, right, top, bottom];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用者需要注意返回值中对象的顺序</span></span><br><span class="line"><span class="keyword">const</span> [left, __, top] = processInput(input);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">processInput</span><span class="params">(input)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// then a miracle occurs</span></span><br><span class="line">  <span class="keyword">return</span> &#123; left, right, top, bottom &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用者只需要使用它需要的对象</span></span><br><span class="line"><span class="keyword">const</span> &#123; left, top &#125; = processInput(input);</span><br></pre></td></tr></table></figure><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><p>1.字符串使用单引号。<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> name = <span class="string">"Capt. Janeway"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad - 当需要插值或者换行时才使用模板文字</span></span><br><span class="line"><span class="keyword">const</span> name = <span class="string">`Capt. Janeway`</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> name = <span class="string">'Capt. Janeway'</span>;</span><br></pre></td></tr></table></figure></p><p>2.不超过100个字符的字符串不应该使用连接符或者换行书写。</p><blockquote><p>为什么？换行的字符串不好阅读，并且不方便搜索代码。</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">// bad</span><br><span class="line">const errorMessage = 'This is a super long error that was thrown because \</span><br><span class="line">of Batman. When you <span class="keyword">stop</span> <span class="keyword">to</span> think about how Batman had anything <span class="keyword">to</span> <span class="keyword">do</span> \</span><br><span class="line"><span class="keyword">with</span> this, you would <span class="keyword">get</span> nowhere \</span><br><span class="line">fast.<span class="string">';</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// bad</span></span><br><span class="line"><span class="string">const errorMessage = '</span>This <span class="keyword">is</span> a super <span class="keyword">long</span> <span class="keyword">error</span> that was thrown because <span class="string">' +</span></span><br><span class="line"><span class="string">  '</span><span class="keyword">of</span> Batman. <span class="keyword">When</span> you <span class="keyword">stop</span> <span class="keyword">to</span> think about how Batman had anything <span class="keyword">to</span> <span class="keyword">do</span> <span class="string">' +</span></span><br><span class="line"><span class="string">  '</span><span class="keyword">with</span> this, you would <span class="keyword">get</span> nowhere fast.<span class="string">';</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// good</span></span><br><span class="line"><span class="string">const errorMessage = '</span>This <span class="keyword">is</span> a super <span class="keyword">long</span> <span class="keyword">error</span> that was thrown because <span class="keyword">of</span> Batman. <span class="keyword">When</span> you <span class="keyword">stop</span> <span class="keyword">to</span> think about how Batman had anything <span class="keyword">to</span> <span class="keyword">do</span> <span class="keyword">with</span> this, you would <span class="keyword">get</span> nowhere fast.<span class="string">';</span></span><br></pre></td></tr></table></figure><p>3.以编程方式构建字符串时，使用模板字符串而不是连接符。</p><blockquote><p>为什么？模板字符串更为简洁，更具可读性。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayHi</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">'How are you, '</span> + name + <span class="string">'?'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayHi</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> [<span class="string">'How are you, '</span>, name, <span class="string">'?'</span>].join();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayHi</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`How are you, <span class="subst">$&#123; name &#125;</span>?`</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayHi</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`How are you, <span class="subst">$&#123;name&#125;</span>?`</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.永远不要在字符串上使用eval()方法，它有太多的问题。<br>5.不要过多的转义字符串。</p><blockquote><p>为什么？反斜杠影响代码可读性，只有在必要的时候才使用。</p></blockquote><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> foo = <span class="string">'\'</span>this\<span class="string">' \i\s \"quoted\"'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> foo = <span class="string">'\'</span>this\<span class="string">' is "quoted"'</span>;</span><br><span class="line"><span class="keyword">const</span> foo = `my <span class="keyword">name</span> <span class="keyword">is</span> <span class="string">'$&#123;name&#125;'</span>`;</span><br></pre></td></tr></table></figure><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>1.使用命名函数表达式而不是函数声明。</p><blockquote><p>为什么？函数声明会被提前。这意味着很可能在函数定义前引用该函数，但是不会报错。这不利于代码的可读性和可维护性。如果你发现一个函数定义的很大很复杂，以至于妨碍了了解文件中的其他内容，那么是时候把这个函数提取到自己的模块中去了！不要忘记显示指定表达式的名称，尽管它能从变量名中被推断出来（现代浏览器或者编译器（如Babel）支持）。这能让错误的调用栈更清晰。(讨论)</p></blockquote><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> foo = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="comment">// 函数名和变量引用名不同</span></span><br><span class="line"><span class="keyword">const</span> short = <span class="function"><span class="keyword">function</span> <span class="title">longUniqueMoreDescriptiveLexicalFoo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Is it worse</span></span><br><span class="line"><span class="keyword">const</span> sum = <span class="function"><span class="keyword">function</span><span class="params">(a, b)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// than this?</span></span><br><span class="line"><span class="keyword">const</span> my_sum = <span class="function"><span class="keyword">function</span> <span class="title">sum</span><span class="params">(a, b)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>第一个函数没有.name属性，在debugging过程中，它会是一个匿名函数。第二个函数有名字为sum，你可以检索到它，调试过程中能够快速定位。<br>使用banel 和babel-preset-env配置，const foo = () =&gt; {}会转换成var foo = function foo () {}，并且从Node v6开始，const foo = () =&gt; {}中的foo 也有.name。所以它不再是匿名函数。（函数名字推断）</p></blockquote><p>2.用圆括号包裹立即执行函数表达式（IIFE）。</p><blockquote><p>为什么？ 立即执行函数表达式是单一执行单元-使用圆括号包裹调用，简洁明了的表示了这一点。请注意，在通用的模块中，你几乎用不到IIFE。</p></blockquote><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// immediately-invoked function expression (<span class="name">IIFE</span>)</span><br><span class="line">(<span class="name">function</span> () &#123;</span><br><span class="line">  console.log('Welcome to the Internet. Please follow me.')<span class="comment">;</span></span><br><span class="line">&#125;())<span class="comment">;</span></span><br></pre></td></tr></table></figure><p>3.永远不要在一个非函数代码块（if、while 等）中声明一个函数，把那个函数赋给一个变量。浏览器允许你这么做，但它们的解析表现不一致。<br>4.注意：ECMA-262把block定义为一组语句。但是函数声明不是语句。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">if</span> (currentUser) &#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Nope.'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">let</span> test;</span><br><span class="line"><span class="keyword">if</span> (currentUser) &#123;</span><br><span class="line">  test = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Yup.'</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>5.永远不要把参数命名为arguments。这将取代原来函数作用域内的 arguments对象。<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span><span class="params">(name, options, arguments)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span><span class="params">(name, options, args)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>6.不要使用arguments。可以选择 rest 语法 … 替代。</p><blockquote><p>为什么？使用 … 能明确你要传入的参数。另外 rest 参数是一个真正的数组，而 arguments 是一个类数组。</p></blockquote><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">concatenateAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> args = Array.prototype.slice.call(arguments);</span><br><span class="line">  <span class="keyword">return</span> args.join(<span class="string">''</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">concatenateAll</span><span class="params">(<span class="rest_arg">...args</span>)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> args.join(<span class="string">''</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>7.使用函数默认参数指定默认值，而不是用一个可变的函数参数<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// really bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleThings</span><span class="params">(opts)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 不！我们不应该改变函数参数</span></span><br><span class="line">  <span class="comment">// 更糟糕的是: 如果 opts 是 falsy (为''或者是false), 它仍然会被赋值为对象，但是这可能会引发bug</span></span><br><span class="line">  opts = opts || &#123;&#125;;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// still bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleThings</span><span class="params">(opts)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (opts === <span class="keyword">void</span> <span class="number">0</span>) &#123;</span><br><span class="line">    opts = &#123;&#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleThings</span><span class="params">(opts = &#123;&#125;)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>8.1使用默认参数避免副作用。</p><blockquote><p>为什么？这样的写法会让人困惑。</p></blockquote><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> b = 1;</span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line">function <span class="keyword">count</span>(a = b++) &#123;</span><br><span class="line">  console.<span class="built_in">log</span>(a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">count</span>();  <span class="comment">// 1</span></span><br><span class="line"><span class="keyword">count</span>();  <span class="comment">// 2</span></span><br><span class="line"><span class="keyword">count</span>(3); <span class="comment">// 3</span></span><br><span class="line"><span class="keyword">count</span>();  <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><p><strong>参数默认值放在函数参数列表的最后。</strong></p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleThings</span><span class="params">(opts = &#123;&#125;, name)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleThings</span><span class="params">(name, opts = &#123;&#125;)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>8.2不要使用Function构造器创建函数。</p><blockquote><p>为什么？通过这种方式创建的函数和使用eval()类似，会带来不确定的问题</p></blockquote><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">var</span> <span class="keyword">add</span> = <span class="keyword">new</span> <span class="function"><span class="keyword">Function</span><span class="params">(<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'return a + b'</span>)</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// still bad</span></span><br><span class="line"><span class="keyword">var</span> subtract = <span class="function"><span class="keyword">Function</span><span class="params">(<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'return a - b'</span>)</span>;</span></span><br></pre></td></tr></table></figure><p>8.3函数名两边留白。</p><blockquote><p>为什么？保持代码一致性，当你添加或者删除名字时不需要额外增减空格。</p></blockquote><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> f = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;&#125;;</span><br><span class="line"><span class="keyword">const</span> g = <span class="function"><span class="keyword">function</span> <span class="params">()</span></span>&#123;&#125;;</span><br><span class="line"><span class="keyword">const</span> h = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> x = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;&#125;;</span><br><span class="line"><span class="keyword">const</span> y = <span class="function"><span class="keyword">function</span> <span class="title">a</span><span class="params">()</span> </span>&#123;&#125;;</span><br></pre></td></tr></table></figure><p>8.4不要修改参数。</p><blockquote><p>为什么？操作参数对象会在原始调用方中导致不可预知的变量副作用。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  obj.key = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f2</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> key = <span class="built_in">Object</span>.prototype.hasOwnProperty.call(obj, <span class="string">'key'</span>) ? obj.key : <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>8.5不要给参数赋值。</p><blockquote><p>为什么？重新分配参数可能会导致意外的行为，特别是在访问参数对象时。 它也可能导致优化问题，特别是在V8中。</p></blockquote><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span><span class="params">(a)</span> </span>&#123;</span><br><span class="line">  a = <span class="number">1</span>;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f2</span><span class="params">(a)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!a) &#123; a = <span class="number">1</span>; &#125;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f3</span><span class="params">(a)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> b = a || <span class="number">1</span>;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f4</span><span class="params">(a = 1)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>8.6使用展开操作符…调用可变参数函数。</p><blockquote><p>为什么？它更简洁，你不需要提供上下文，并且组合使用new和apply不容易。</p></blockquote><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line">const x = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line">console.log.apply(console, x);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">const x = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line">console.log(...x);</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line">new (Function.prototype.bind.apply(Date, [null, <span class="number">2016</span>, <span class="number">8</span>, <span class="number">5</span>]));</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">new Date(...[<span class="number">2016</span>, <span class="number">8</span>, <span class="number">5</span>]);</span><br></pre></td></tr></table></figure><p>8.7带有多行函数签名或调用的函数应该像本指南中的其他多行列表一样缩进：每行中包含一项，最后一个项目带有逗号。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">bar,</span></span></span><br><span class="line"><span class="function"><span class="params">             baz,</span></span></span><br><span class="line"><span class="function"><span class="params">             quux</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  bar,</span></span></span><br><span class="line"><span class="function"><span class="params">  baz,</span></span></span><br><span class="line"><span class="function"><span class="params">  quux,</span></span></span><br><span class="line"><span class="function"><span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="built_in">console</span>.log(foo,</span><br><span class="line">  bar,</span><br><span class="line">  baz);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="built_in">console</span>.log(</span><br><span class="line">  foo,</span><br><span class="line">  bar,</span><br><span class="line">  baz,</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h2><p>1.当你必须要使用匿名函数（如在传递内联回调时），请使用箭头函数。</p><blockquote><p>为什么?因为箭头函数创造了新的一个 this 执行环境，通常情况下都能满足你的需求，而且这样的写法更为简洁。（参考 Arrow functions - JavaScript | MDN ）<br>为什么不？如果你有一个相当复杂的函数，你或许可以把逻辑部分转移到一个函数声明上。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].map(<span class="function"><span class="keyword">function</span> (<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> y = x + <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">return</span> x * y;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].map(<span class="function">(<span class="params">x</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> y = x + <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">return</span> x * y;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>2.如果一个函数适合用一行写出并且只有一个参数，那就把花括号、圆括号和 return 都省略掉。如果不是，那就不要省略。</p><blockquote><p>为什么？这是一个很好用的语法糖。在链式调用中可读性很高。</p></blockquote><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].map(<span class="function"><span class="params">number</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> nextNumber = <span class="built_in">number</span> + <span class="number">1</span>;</span><br><span class="line">  <span class="string">`A string containing the <span class="subst">$&#123;nextNumber&#125;</span>.`</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].map(<span class="function"><span class="params">number</span> =&gt;</span> <span class="string">`A string containing the <span class="subst">$&#123;number&#125;</span>.`</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].map(<span class="function">(<span class="params"><span class="built_in">number</span></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> nextNumber = <span class="built_in">number</span> + <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`A string containing the <span class="subst">$&#123;nextNumber&#125;</span>.`</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].map(<span class="function">(<span class="params"><span class="built_in">number</span>, index</span>) =&gt;</span> (&#123;</span><br><span class="line">  [index]: <span class="built_in">number</span>,</span><br><span class="line">&#125;));</span><br><span class="line"></span><br><span class="line"><span class="comment">// No implicit return with side effects</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">callback</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> val = callback();</span><br><span class="line">  <span class="keyword">if</span> (val === <span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="comment">// Do something if callback returns true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> bool = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line">foo(<span class="function"><span class="params">()</span> =&gt;</span> bool = <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">foo(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  bool = <span class="literal">true</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>3.如果表达式过长需要多行表示，请将其包含在括号中，增加可读性。</p><blockquote><p>为什么？它能清除的标识函数的开始和结束位置。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line">[<span class="string">'get'</span>, <span class="string">'post'</span>, <span class="string">'put'</span>].map(<span class="function"><span class="params">httpMethod</span> =&gt;</span> <span class="built_in">Object</span>.prototype.hasOwnProperty.call(</span><br><span class="line">    httpMagicObjectWithAVeryLongName,</span><br><span class="line">    httpMethod,</span><br><span class="line">  )</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">[<span class="string">'get'</span>, <span class="string">'post'</span>, <span class="string">'put'</span>].map(<span class="function"><span class="params">httpMethod</span> =&gt;</span> (</span><br><span class="line">  <span class="built_in">Object</span>.prototype.hasOwnProperty.call(</span><br><span class="line">    httpMagicObjectWithAVeryLongName,</span><br><span class="line">    httpMethod,</span><br><span class="line">  )</span><br><span class="line">));</span><br></pre></td></tr></table></figure><p>4.如果函数只有一个参数并且函数体没有使用花括号，那就省略括号。否则，为了保持清晰一致性，总在参数周围加上括号。</p><blockquote><p>为什么？ 不那么混乱，可读性强。</p></blockquote><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].map((x) =&gt; x * x);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].map(x =&gt; x * x);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].map(number =&gt; (</span><br><span class="line">  `A long <span class="type">string</span> with the $&#123;number&#125;. It’s so long that we don’t want it to take up space on the .map line!`</span><br><span class="line">));</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].map(x =&gt; &#123;</span><br><span class="line">  const y = x + <span class="number">1</span>;</span><br><span class="line">  return x * y;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].map((x) =&gt; &#123;</span><br><span class="line">  const y = x + <span class="number">1</span>;</span><br><span class="line">  return x * y;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>5.避免箭头函数语法（=&gt;）和比较运算符（&lt;=,=&gt;）一起使用时带来的困惑。<br><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">// <span class="keyword">bad</span></span><br><span class="line"><span class="keyword">const </span><span class="keyword">itemHeight </span>= <span class="keyword">item </span>=&gt; <span class="keyword">item.height </span>&gt; <span class="number">256</span> ? <span class="keyword">item.largeSize </span>: <span class="keyword">item.smallSize;</span></span><br><span class="line"><span class="keyword"></span></span><br><span class="line"><span class="keyword">// </span><span class="keyword">bad</span></span><br><span class="line"><span class="keyword">const </span><span class="keyword">itemHeight </span>= (<span class="keyword">item) </span>=&gt; <span class="keyword">item.height </span>&gt; <span class="number">256</span> ? <span class="keyword">item.largeSize </span>: <span class="keyword">item.smallSize;</span></span><br><span class="line"><span class="keyword"></span></span><br><span class="line"><span class="keyword">// </span>good</span><br><span class="line"><span class="symbol">const</span> <span class="keyword">itemHeight </span>= <span class="keyword">item </span>=&gt; (<span class="keyword">item.height </span>&gt; <span class="number">256</span> ? <span class="keyword">item.largeSize </span>: <span class="keyword">item.smallSize);</span></span><br><span class="line"><span class="keyword"></span></span><br><span class="line"><span class="keyword">// </span>good</span><br><span class="line"><span class="symbol">const</span> <span class="keyword">itemHeight </span>= (<span class="keyword">item) </span>=&gt; &#123;</span><br><span class="line">  const &#123; height, largeSize, smallSize &#125; = <span class="keyword">item;</span></span><br><span class="line"><span class="keyword"> </span> return height &gt; <span class="number">256</span> ? largeSize : smallSize<span class="comment">;</span></span><br><span class="line">&#125;<span class="comment">;</span></span><br></pre></td></tr></table></figure></p><h2 id="类-amp-构造函数"><a href="#类-amp-构造函数" class="headerlink" title="类 &amp; 构造函数"></a>类 &amp; 构造函数</h2><p>1.总是使用class。避免直接操作prototype。</p><blockquote><p>为什么？class语法更简洁更易于理解。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Queue</span>(<span class="params">contents = []</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.queue = [...contents];</span><br><span class="line">&#125;</span><br><span class="line">Queue.prototype.pop = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> value = <span class="keyword">this</span>.queue[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">this</span>.queue.splice(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">return</span> value;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Queue</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(contents = []) &#123;</span><br><span class="line">    <span class="keyword">this</span>.queue = [...contents];</span><br><span class="line">  &#125;</span><br><span class="line">  pop() &#123;</span><br><span class="line">    <span class="keyword">const</span> value = <span class="keyword">this</span>.queue[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">this</span>.queue.splice(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.使用extends继承。</p><blockquote><p>为什么？ 因为 extends 是一个内建的原型继承方法并且不会破坏 instanceof。</p></blockquote><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line">const inherits = require(<span class="symbol">'inherit</span>s');</span><br><span class="line">function <span class="type">PeekableQueue</span>(contents) &#123;</span><br><span class="line">  <span class="type">Queue</span>.apply(<span class="keyword">this</span>, contents);</span><br><span class="line">&#125;</span><br><span class="line">inherits(<span class="type">PeekableQueue</span>, <span class="type">Queue</span>);</span><br><span class="line"><span class="type">PeekableQueue</span>.prototype.peek = function () &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.queue[<span class="number">0</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PeekableQueue</span> <span class="keyword">extends</span> <span class="title">Queue</span> </span>&#123;</span><br><span class="line">  peek() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.queue[<span class="number">0</span>];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.方法可以返回 this 来帮助链式调用。</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line">Jedi.prototype.jump = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.jumping = <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Jedi.prototype.setHeight = <span class="function"><span class="keyword">function</span> <span class="params">(height)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.height = height;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> luke = <span class="keyword">new</span> Jedi();</span><br><span class="line">luke.jump(); <span class="comment">// =&gt; true</span></span><br><span class="line">luke.setHeight(<span class="number">20</span>); <span class="comment">// =&gt; undefined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Jedi</span> </span>&#123;</span><br><span class="line">  jump() &#123;</span><br><span class="line">    <span class="keyword">this</span>.jumping = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  setHeight(height) &#123;</span><br><span class="line">    <span class="keyword">this</span>.height = height;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> luke = <span class="keyword">new</span> Jedi();</span><br><span class="line"></span><br><span class="line">luke.jump()</span><br><span class="line">  .setHeight(<span class="number">20</span>);</span><br></pre></td></tr></table></figure><p>4.可以写一个自定义的 toString() 方法，但要确保它能正常运行并且不会引起副作用。<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Jedi</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(options = &#123;&#125;) &#123;</span><br><span class="line">    <span class="keyword">this</span>.name = options.name || <span class="string">'no name'</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  getName() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  toString() &#123;</span><br><span class="line">    <span class="keyword">return</span> `Jedi - $&#123;<span class="keyword">this</span>.getName()&#125;`;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>5.类有默认构造器。一个空的构造函数或者只是重载父类构造函数是不必要的。<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Jedi</span> </span>&#123;</span><br><span class="line">  constructor() &#123;&#125;</span><br><span class="line"></span><br><span class="line">  getName() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rey</span> <span class="keyword">extends</span> <span class="title">Jedi</span> </span>&#123;</span><br><span class="line">  constructor(...args) &#123;</span><br><span class="line">    <span class="keyword">super</span>(...args);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rey</span> <span class="keyword">extends</span> <span class="title">Jedi</span> </span>&#123;</span><br><span class="line">  constructor(...args) &#123;</span><br><span class="line">    <span class="keyword">super</span>(...args);</span><br><span class="line">    <span class="keyword">this</span>.name = <span class="symbol">'Re</span>y';</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>6.避免重复的类成员。</p><blockquote><p>为什么？重复的类成员声明中只有最后一个生效-重复的声明肯定是一个错误。</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;</span><br><span class="line">  bar() &#123; <span class="keyword">return</span> <span class="number">1</span>; &#125;</span><br><span class="line">  bar() &#123; <span class="keyword">return</span> <span class="number">2</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;</span><br><span class="line">  bar() &#123; <span class="keyword">return</span> <span class="number">1</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;</span><br><span class="line">  bar() &#123; <span class="keyword">return</span> <span class="number">2</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h2><p>1.总是使用模组 (import/export) 而不是其他非标准模块系统。你可以编译为你喜欢的模块系统。</p><blockquote><p>为什么？模块是未来，让我们开始迈向未来吧。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> AirbnbStyleGuide = <span class="built_in">require</span>(<span class="string">'./AirbnbStyleGuide'</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = AirbnbStyleGuide.es6;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ok</span></span><br><span class="line"><span class="keyword">import</span> AirbnbStyleGuide <span class="keyword">from</span> <span class="string">'./AirbnbStyleGuide'</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> AirbnbStyleGuide.es6;</span><br><span class="line"></span><br><span class="line"><span class="comment">// best</span></span><br><span class="line"><span class="keyword">import</span> &#123; es6 &#125; <span class="keyword">from</span> <span class="string">'./AirbnbStyleGuide'</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> es6;</span><br></pre></td></tr></table></figure><p>2.不要使用通配符 import</p><blockquote><p>为什么？这样确保只有一个默认的export</p></blockquote><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> AirbnbStyleGuide <span class="keyword">from</span> <span class="string">'./AirbnbStyleGuide'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">import</span> AirbnbStyleGuide <span class="keyword">from</span> <span class="string">'./AirbnbStyleGuide'</span>;</span><br></pre></td></tr></table></figure><p>3.不要直接从import中export</p><blockquote><p>为什么？虽然一行代码简洁明了，但让 import 和 export 各司其职让事情能保持一致。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="comment">// filename es6.js</span></span><br><span class="line"><span class="keyword">export</span> &#123; es6 <span class="keyword">as</span> <span class="keyword">default</span> &#125; <span class="keyword">from</span> <span class="string">'./AirbnbStyleGuide'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="comment">// filename es6.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; es6 &#125; <span class="keyword">from</span> <span class="string">'./AirbnbStyleGuide'</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> es6;</span><br></pre></td></tr></table></figure><p>4.同一个路径只使用一次import。</p><blockquote><p>为什么？相同路径有多个import会导致代码难以维护。</p></blockquote><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">import</span> foo <span class="keyword">from</span> <span class="string">'foo'</span>;</span><br><span class="line"><span class="comment">// … some other imports … //</span></span><br><span class="line"><span class="keyword">import</span> &#123; named1, named2 &#125; <span class="keyword">from</span> <span class="string">'foo'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">import</span> foo, &#123; named1, named2 &#125; <span class="keyword">from</span> <span class="string">'foo'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">import</span> foo, &#123;</span><br><span class="line">  named1,</span><br><span class="line">  named2,</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">'foo'</span>;</span><br></pre></td></tr></table></figure><p>5.不要export可变的绑定。</p><blockquote><p>为什么？避免不确定的可变量，特别是export可变的绑定。如果某些特殊情况需要使用这种场景，通常应该export常量引用。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">let</span> foo = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">export</span> &#123; foo &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> foo = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">export</span> &#123; foo &#125;;</span><br></pre></td></tr></table></figure><p>6.模块中只有单个export,最好使用default export 。</p><blockquote><p>为什么？一个文件最好只做一件事，这样更具备可读性和可维护性。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>6.模块中只有单个export,最好使用default export 。 </p><blockquote><p>为什么？一个文件最好只做一件事，这样更具备可读性和可维护性。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>7.将所有的import语句放在文件的顶部。</p><blockquote><p>为什么？由于imports会被提升，最好保持它们在顶部以防出现不可预期的行为。</p></blockquote><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">import</span> foo <span class="keyword">from</span> <span class="string">'foo'</span>;</span><br><span class="line">foo.init();</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> bar <span class="keyword">from</span> <span class="string">'bar'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">import</span> foo <span class="keyword">from</span> <span class="string">'foo'</span>;</span><br><span class="line"><span class="keyword">import</span> bar <span class="keyword">from</span> <span class="string">'bar'</span>;</span><br><span class="line"></span><br><span class="line">foo.init();</span><br></pre></td></tr></table></figure><p>8.多行import应该和多行数组和对象一样有缩进。</p><blockquote><p>为什么？花括号需要遵循与指南中的每个其他花括号相同的缩进规则，末尾的逗号也一样。</p></blockquote><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">import</span> &#123;longNameA, longNameB, longNameC, longNameD, longNameE&#125; <span class="keyword">from</span> <span class="string">'path'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  longNameA,</span><br><span class="line">  longNameB,</span><br><span class="line">  longNameC,</span><br><span class="line">  longNameD,</span><br><span class="line">  longNameE,</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">'path'</span>;</span><br></pre></td></tr></table></figure><p>9.禁止在模块导入语句中使用Webpack加载器语法。</p><blockquote><p>为什么？在import中使用webpack 语法会将代码耦合进bundler中。推荐在webpack.config.js中配置loader 规则。</p></blockquote><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">import</span> fooSass <span class="keyword">from</span> <span class="string">'css!sass!foo.scss'</span>;</span><br><span class="line"><span class="keyword">import</span> barCss <span class="keyword">from</span> <span class="string">'style!css!bar.css'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">import</span> fooSass <span class="keyword">from</span> <span class="string">'foo.scss'</span>;</span><br><span class="line"><span class="keyword">import</span> barCss <span class="keyword">from</span> <span class="string">'bar.css'</span>;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Airbnb-JavaScript-编码风格指南（2018年最新版）&quot;&gt;&lt;a href=&quot;#Airbnb-JavaScript-编码风格指南（2018年最新版）&quot; class=&quot;headerlink&quot; title=&quot;Airbnb JavaScript 编码风格指南（2018年最新版）&quot;&gt;&lt;/a&gt;Airbnb JavaScript 编码风格指南（2018年最新版）&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Airbnb JS规范原文： &lt;a href=&quot;https://github.com/airbnb/javascript&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/airbnb/javascript&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;类型&quot;&gt;&lt;a href=&quot;#类型&quot; class=&quot;headerlink&quot; title=&quot;类型&quot;&gt;&lt;/a&gt;类型&lt;/h2&gt;&lt;p&gt;1.基本类型：直接存取&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;string&lt;/li&gt;
&lt;li&gt;number&lt;/li&gt;
&lt;li&gt;boolean&lt;/li&gt;
&lt;li&gt;null&lt;/li&gt;
&lt;li&gt;undefined&lt;/li&gt;
&lt;li&gt;symbol
    
    </summary>
    
      <category term="JavaScript" scheme="https://chongdee.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://chongdee.github.io/tags/JavaScript/"/>
    
      <category term="代码规范" scheme="https://chongdee.github.io/tags/%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83/"/>
    
  </entry>
  
  <entry>
    <title>js设计模式-享元模式</title>
    <link href="https://chongdee.github.io/2018/10/31/js%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F/"/>
    <id>https://chongdee.github.io/2018/10/31/js设计模式-享元模式/</id>
    <published>2018-10-31T13:46:23.000Z</published>
    <updated>2018-11-06T14:55:25.976Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2 id="享元模式"><a href="#享元模式" class="headerlink" title="享元模式"></a>享元模式</h2><p>享元模式是一种用于性能优化的模式，如果系统中因为创建了大量类似的对象而导致内存不足或占用过高这种模式就非常有用了。<br>下面通过具体的实例来看看。</p><p>假设有个内衣工厂，目前的产品有50种男士内衣与50种女士内衣，为了推销产品，工厂决定生产一些塑料模特来穿上它们的内衣拍成内衣广告。<br>正常情况需要50个男模特与50个女模特，然后让他们每人分别穿上一套内衣来拍照。不使用享元模式可能会有这种方式来写：<br><a id="more"></a></p><h2 id="内衣厂展示许多商品"><a href="#内衣厂展示许多商品" class="headerlink" title="内衣厂展示许多商品"></a>内衣厂展示许多商品</h2><p>方案一：造 50 个塑料男模和 50 个塑料女模，让他们穿上展示，代码如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Model = <span class="function"><span class="keyword">function</span> (<span class="params">sex,underwear</span>) </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.sex = sex;</span><br><span class="line"><span class="keyword">this</span>.underwear = underwear;</span><br><span class="line">&#125;</span><br><span class="line">Model.prototype.takePhoto = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'sex='</span> + <span class="keyword">this</span>.sex + <span class="string">'underwear='</span> + <span class="keyword">this</span>.underwear )</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;=<span class="number">50</span>; i++)&#123;</span><br><span class="line"> <span class="keyword">var</span> maleModel = <span class="keyword">new</span> Model(<span class="string">'male'</span>,<span class="string">'underwear'</span> + i)</span><br><span class="line"> maleModel.takePhoto();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;=<span class="number">50</span>; i++)&#123;</span><br><span class="line"> <span class="keyword">var</span> maleModel = <span class="keyword">new</span> Model(<span class="string">'female'</span>,<span class="string">'underwear'</span> + i)</span><br><span class="line"> femaleModel.takePhoto();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>方案二：造 1 个塑料男模特 1 个塑料女模特，分别试穿 50 款内衣</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Model = <span class="function"><span class="keyword">function</span> (<span class="params">sex</span>) </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.sex = sex;</span><br><span class="line">&#125;</span><br><span class="line">Model.prototype.takePhoto = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'sex='</span> + <span class="keyword">this</span>.sex + <span class="string">'underwear='</span> + <span class="keyword">this</span>.underwear )</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> maleModel = <span class="keyword">new</span> Model(<span class="string">'male'</span>),</span><br><span class="line">female    = <span class="keyword">new</span> Model(<span class="string">'female'</span>);    </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;=<span class="number">50</span>; i++)&#123;</span><br><span class="line"> maleModel.underwear = <span class="string">'underwear'</span> + i;</span><br><span class="line"> maleModel.takePhoto();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;=<span class="number">50</span>; i++)&#123;</span><br><span class="line"> female.underwear = <span class="string">'underwear'</span> + i;</span><br><span class="line"> femaleModel.takePhoto();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>对比发现：方案一创建了 100 个对象，方案二只创建了 2 个对象，在该 demo 中，gender(性别) 是内部对象，underwear(穿着) 是外部对象。</p></blockquote><h2 id="对象池"><a href="#对象池" class="headerlink" title="对象池"></a>对象池</h2><p>对象池维护一个装载空闲对象的池子，如果需要对象的时候，不是直接new，而是转从对象池里获取对象。如果对象池里没有空闲对象则创建一个新的对象，当获取的对象完成他的职责之后，再进入池子等待被下次获取。<br>对象池的原理很好理解，下面我们从地图应用来理解。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 气泡工厂的对象池为数组是私有属性被包含在工厂闭包里，这个工厂又两个暴露对外的方法，</span></span><br><span class="line"><span class="comment">// create表示获取一个div节点，recover表示回收一个div节点。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> toolTipFactory = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> toolTipPool  = [];   <span class="comment">// toolTip 对象池</span></span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line">      create : <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(toolTipPool.length === <span class="number">0</span>)&#123;</span><br><span class="line">             <span class="keyword">var</span> div = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</span><br><span class="line">             <span class="built_in">document</span>.body.appendChild(div);</span><br><span class="line">             <span class="keyword">return</span> div;</span><br><span class="line">        &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">             <span class="keyword">return</span> toolTipPool.shift(); <span class="comment">//shift a dom</span></span><br><span class="line">        &#125;,</span><br><span class="line">        recover : <span class="function"><span class="keyword">function</span> (<span class="params">tooltipDom</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> toolTipPool.push(tooltipDom);  </span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 第一次搜索（2个气泡）</span></span><br><span class="line"><span class="keyword">var</span> ary = [];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>, str; str = [<span class="string">'A'</span>,<span class="string">'B'</span>][i++])&#123;  <span class="comment">// get ary elem</span></span><br><span class="line"> <span class="keyword">var</span> toolTip = toolTipFactory.create();</span><br><span class="line"> toolTip.innerHTML = str;</span><br><span class="line"> ary.push(toolTip)</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 现在开始回收节点：</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span> , toolTip ; toolTip = ary[i++])&#123;</span><br><span class="line">toolTip.recover(toolTip)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 第二次搜索（6个气泡）</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i =<span class="number">0</span> , str; str = [<span class="string">'A'</span>,<span class="string">'B'</span>,<span class="string">'C'</span>,<span class="string">'D'</span>,<span class="string">'E'</span>,<span class="string">'F'</span>][i++]; )&#123;</span><br><span class="line"> <span class="keyword">var</span> toolTip = toolTipFactory.create();</span><br><span class="line"> toolTip.innerHTML(str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>现在页面中已经出现了6个节点，上一次创建好的节点被共享给了下一次操作。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;享元模式&quot;&gt;&lt;a href=&quot;#享元模式&quot; class=&quot;headerlink&quot; title=&quot;享元模式&quot;&gt;&lt;/a&gt;享元模式&lt;/h2&gt;&lt;p&gt;享元模式是一种用于性能优化的模式，如果系统中因为创建了大量类似的对象而导致内存不足或占用过高这种模式就非常有用了。&lt;br&gt;下面通过具体的实例来看看。&lt;/p&gt;
&lt;p&gt;假设有个内衣工厂，目前的产品有50种男士内衣与50种女士内衣，为了推销产品，工厂决定生产一些塑料模特来穿上它们的内衣拍成内衣广告。&lt;br&gt;正常情况需要50个男模特与50个女模特，然后让他们每人分别穿上一套内衣来拍照。不使用享元模式可能会有这种方式来写：&lt;br&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="https://chongdee.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://chongdee.github.io/tags/JavaScript/"/>
    
      <category term="JS设计模式" scheme="https://chongdee.github.io/tags/JS%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>js设计模式-状态模式</title>
    <link href="https://chongdee.github.io/2018/10/31/js%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F/"/>
    <id>https://chongdee.github.io/2018/10/31/js设计模式-状态模式/</id>
    <published>2018-10-31T13:45:44.000Z</published>
    <updated>2018-11-06T12:14:04.928Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2 id="状态模式的基础"><a href="#状态模式的基础" class="headerlink" title="状态模式的基础"></a>状态模式的基础</h2><p>定义：状态模式（State）定义一个对象，这个对象可以通过管理其状态从而使得应用程序作出相应的变化。<br>状态模式是一个非常常用的设计模式，它主要有两个角色组成：<br>（1）环境类：拥有一个状态成员，可以修改其状态并作出相应反应。<br>（2）状态类：表示一种状态，包含其相应的处理方法<br>作用：状态模式就是一种适合多种状态场景下的设计模式。使用状态模式可以让代码更加清晰，提高应用程序的维护性和扩展性。<br>使用场景：文件下载（开始、暂停、完成、失败等）、红绿灯<br><a id="more"></a></p><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><p>比如超级玛丽，就可能同时有好几个状态比如 跳跃，移动，射击，蹲下 等，如果对这些动作一个个进行处理判断，需要多个if-else或者switch不仅丑陋不说，而且在遇到有组合动作的时候，实现就会变的更为复杂，这里可以使用状态模式来实现。</p><p>状态模式的思路是：首先创建一个状态对象或者数组，内部保存状态变量，然后内部封装好每种动作对应的状态，然后状态对象返回一个接口对象，它可以对内部的状态修改或者调用。</p><h3 id="红绿灯"><a href="#红绿灯" class="headerlink" title="红绿灯"></a>红绿灯</h3><p>定义环境类（红绿灯对象）<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> trafficLight = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> currentLight = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line">change: <span class="function"><span class="keyword">function</span> (<span class="params">light</span>) </span>&#123;</span><br><span class="line">currentLight = light;</span><br><span class="line">currentLight.go();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line">定义状态类（三种不同颜色的灯）</span><br><span class="line"></span><br><span class="line"><span class="comment">// 红灯</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">RedLight</span>(<span class="params"></span>) </span>&#123; &#125;</span><br><span class="line">RedLight.prototype.go = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"this is red light"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 绿灯</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">GreenLight</span>(<span class="params"></span>) </span>&#123; &#125;</span><br><span class="line">GreenLight.prototype.go = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"this is green light"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 黄灯</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">YellowLight</span>(<span class="params"></span>) </span>&#123; &#125;</span><br><span class="line">YellowLight.prototype.go = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"this is yellow light"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">trafficLight.change(<span class="keyword">new</span> RedLight()); <span class="comment">// this is red light</span></span><br><span class="line">trafficLight.change(<span class="keyword">new</span> YellowLight()); <span class="comment">// this is yellow light</span></span><br></pre></td></tr></table></figure></p><h3 id="菜单组件"><a href="#菜单组件" class="headerlink" title="菜单组件"></a>菜单组件</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Menu</span>(<span class="params"></span>) </span>&#123; &#125;</span><br><span class="line">Menu.prototype.toggle = <span class="function"><span class="keyword">function</span> (<span class="params">state</span>) </span>&#123;</span><br><span class="line">state();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> menuStates = &#123;</span><br><span class="line"><span class="string">"show"</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"the menu is showing"</span>);</span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">"hide"</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"the menu is hiding"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> menu = <span class="keyword">new</span> Menu();</span><br><span class="line">menu.toggle(menuStates.show);</span><br><span class="line">menu.toggle(menuStates.hide);</span><br></pre></td></tr></table></figure><blockquote><p>这段代码实例化了一个Menu对象，然后分别切换了显示和隐藏两种状态，如果有第三种状态，我们只需要menuStates添加相应的状态和处理程序即可。</p></blockquote><h3 id="超级玛丽动作"><a href="#超级玛丽动作" class="headerlink" title="超级玛丽动作"></a>超级玛丽动作</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> SuperMarry = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;    </span><br><span class="line">  <span class="keyword">let</span> _currentState = [],        <span class="comment">// 状态数组</span></span><br><span class="line">      states = &#123;</span><br><span class="line">        jump() &#123;<span class="built_in">console</span>.log(<span class="string">'跳跃!'</span>)&#125;,</span><br><span class="line">        move() &#123;<span class="built_in">console</span>.log(<span class="string">'移动!'</span>)&#125;,</span><br><span class="line">        shoot() &#123;<span class="built_in">console</span>.log(<span class="string">'射击!'</span>)&#125;,</span><br><span class="line">        squat() &#123;<span class="built_in">console</span>.log(<span class="string">'蹲下!'</span>)&#125;</span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">const</span> Action = &#123;</span><br><span class="line">    changeState(arr) &#123;  <span class="comment">// 更改当前动作</span></span><br><span class="line">      _currentState = arr</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span></span><br><span class="line">    &#125;,</span><br><span class="line">    goes() &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'触发动作'</span>)</span><br><span class="line">      _currentState.forEach(<span class="function"><span class="params">T</span> =&gt;</span> states[T] &amp;&amp; states[T]())</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    change: Action.changeState,</span><br><span class="line">    go: Action.goes</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)()</span><br><span class="line"></span><br><span class="line">SuperMarry</span><br><span class="line">    .change([<span class="string">'jump'</span>, <span class="string">'shoot'</span>])</span><br><span class="line">    .go()                    <span class="comment">// 触发动作  跳跃!  射击!</span></span><br><span class="line">    .go()                    <span class="comment">// 触发动作  跳跃!  射击!</span></span><br><span class="line">    .change([<span class="string">'squat'</span>])</span><br><span class="line">    .go()                    <span class="comment">// 触发动作  蹲下!</span></span><br></pre></td></tr></table></figure><p>这里可以使用ES6的class优化一下：<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SuperMarry</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">this</span>._currentState = []</span><br><span class="line">    <span class="keyword">this</span>.states = &#123;</span><br><span class="line">      jump() &#123;console.log(<span class="string">'跳跃!'</span>)&#125;,</span><br><span class="line">      move() &#123;console.log(<span class="string">'移动!'</span>)&#125;,</span><br><span class="line">      shoot() &#123;console.log(<span class="string">'射击!'</span>)&#125;,</span><br><span class="line">      squat() &#123;console.log(<span class="string">'蹲下!'</span>)&#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  change(arr) &#123;  <span class="comment">// 更改当前动作</span></span><br><span class="line">    <span class="keyword">this</span>._currentState = arr</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  go() &#123;</span><br><span class="line">    console.log(<span class="string">'触发动作'</span>)</span><br><span class="line">    <span class="keyword">this</span>._currentState.forEach(T =&gt; <span class="keyword">this</span>.states[T] &amp;&amp; <span class="keyword">this</span>.states[T]())</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">new SuperMarry()</span><br><span class="line">    .change([<span class="string">'jump'</span>, <span class="string">'shoot'</span>])</span><br><span class="line">    .go()                    <span class="comment">// 触发动作  跳跃!  射击!</span></span><br><span class="line">    .go()                    <span class="comment">// 触发动作  跳跃!  射击!</span></span><br><span class="line">    .change([<span class="string">'squat'</span>])</span><br><span class="line">    .go()                    <span class="comment">// 触发动作  蹲下!</span></span><br></pre></td></tr></table></figure></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>状态模式的使用场景也特别明确，有如下两点：</p><p>一个对象的行为取决于它的状态，并且它必须在运行时刻根据状态改变它的行为。<br>一个操作中含有大量的分支语句，而且这些分支语句依赖于该对象的状态。状态通常为一个或多个枚举常量的表示。<br>简而言之，当遇到很多同级if-else或者switch的时候，可以使用状态模式来进行简化。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;状态模式的基础&quot;&gt;&lt;a href=&quot;#状态模式的基础&quot; class=&quot;headerlink&quot; title=&quot;状态模式的基础&quot;&gt;&lt;/a&gt;状态模式的基础&lt;/h2&gt;&lt;p&gt;定义：状态模式（State）定义一个对象，这个对象可以通过管理其状态从而使得应用程序作出相应的变化。&lt;br&gt;状态模式是一个非常常用的设计模式，它主要有两个角色组成：&lt;br&gt;（1）环境类：拥有一个状态成员，可以修改其状态并作出相应反应。&lt;br&gt;（2）状态类：表示一种状态，包含其相应的处理方法&lt;br&gt;作用：状态模式就是一种适合多种状态场景下的设计模式。使用状态模式可以让代码更加清晰，提高应用程序的维护性和扩展性。&lt;br&gt;使用场景：文件下载（开始、暂停、完成、失败等）、红绿灯&lt;br&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="https://chongdee.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://chongdee.github.io/tags/JavaScript/"/>
    
      <category term="JS设计模式" scheme="https://chongdee.github.io/tags/JS%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>js设计模式-职责链模式</title>
    <link href="https://chongdee.github.io/2018/10/31/js%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%81%8C%E8%B4%A3%E9%93%BE%E6%A8%A1%E5%BC%8F/"/>
    <id>https://chongdee.github.io/2018/10/31/js设计模式-职责链模式/</id>
    <published>2018-10-31T13:45:16.000Z</published>
    <updated>2018-11-06T12:49:58.464Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2 id="职责链模式的基础"><a href="#职责链模式的基础" class="headerlink" title="职责链模式的基础"></a>职责链模式的基础</h2><p>定义：职责链模式（Chain of responsibility）是使多个对象都有机会处理请求，从而避免请求的发送者和接受者之间的耦合关系。将这个对象连成一条链，并沿着这条链传递该请求，直到有一个对象处理他为止。职责链模式的名字非常形象，一系列可能会处理请求的对象被该连接成一条链，请求在这些对象之间依次传递，直到遇到一个可以处理它的对象，我们把这些对象成为链中的节点。<br>优点：请求发送者只需要知道链中的第一个节点，从而弱化了发送者和一组接收者之间的强联系。</p><p>使用场景：挤公交车递钱（只有售票员可以收钱）、交押金预定手机<br><a id="more"></a></p><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><p>假设一个电视购物网站对于某部新上市的手机经过了2轮缴纳500元定金与200元定金的预定，现在已经到了正式购买的阶段。<br>支付了500元定金的用户在购买阶段可以使用100元优惠券，200元定金可以使用50元优惠券，普通用户没有优惠且当库存不足不一定能买到。</p><p>orderType: 表示订单类型(定金或者普通用户),code的值为1时候是500元定金用户，为2是200元定金用户，为3则是普通用户。</p><p>pay : 表示用户是否支付定金，用户虽然下过500元定金的订单但是如果他一直没有支付定金，那么只能降级为普通用户。</p><p>stock : 仅用户普通用户的库存数量，定金用户不受限制。</p><p>简洁版：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 500 order</span></span><br><span class="line"><span class="keyword">var</span> order500 = <span class="function"><span class="keyword">function</span> (<span class="params">orderType,pay,stock</span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(orderType === <span class="number">1</span> &amp;&amp; pay === <span class="literal">true</span>)&#123;</span><br><span class="line">     <span class="built_in">console</span>.log(<span class="string">'500 rmb deposit, get 100 coupon '</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">     order100(orderType,pay,stock)  <span class="comment">// req pass to 200 order</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> order200 = <span class="function"><span class="keyword">function</span> (<span class="params">orderType,pay,stock</span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(orderType === <span class="number">2</span> &amp;&amp; pay === <span class="literal">true</span>)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'200 rmb deposit , get 50 coupon'</span>)</span><br><span class="line">&#125; <span class="keyword">else</span>&#123;</span><br><span class="line">    orderNormal(orderType,pay,stock) </span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> orderNormal = <span class="function"><span class="keyword">function</span> (<span class="params">orderType,pay,stock</span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(stock &gt; <span class="number">0</span>)&#123;</span><br><span class="line">     <span class="built_in">console</span>.log(<span class="string">'normal buy no coupon'</span>)</span><br><span class="line">&#125; <span class="keyword">else</span>&#123;</span><br><span class="line">     <span class="built_in">console</span>.log(<span class="string">'the stock lack'</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//test result:</span></span><br><span class="line">order500(<span class="number">1</span>,<span class="literal">true</span>,<span class="number">500</span>);</span><br><span class="line">order500(<span class="number">2</span>,<span class="literal">true</span>,<span class="number">500</span>);</span><br><span class="line">order500(<span class="number">3</span>,<span class="literal">true</span>,<span class="number">500</span>);</span><br><span class="line">order500(<span class="number">1</span>,<span class="literal">false</span>,<span class="number">500</span>);</span><br></pre></td></tr></table></figure></p><blockquote><p>现在已经基本符合了职责链模式定义，下面实现灵活可拆分的职责链模式，我的意思就是不要像上述那样面向过程的从500传递到200然后再到普通，万一我们想传递到100呢？ 岂不是还得要大修一番？</p></blockquote><p><strong>职责链模式重构</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 500 order</span></span><br><span class="line"><span class="keyword">var</span> order500 = <span class="function"><span class="keyword">function</span> (<span class="params">orderType,pay,stock</span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(orderType === <span class="number">1</span> &amp;&amp; pay === <span class="literal">true</span>)&#123;</span><br><span class="line">     <span class="built_in">console</span>.log(<span class="string">'500 rmb deposit, get 100 coupon '</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'nextSuccessor'</span>  <span class="comment">// unknow the next node but always pass to next.</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> order200 = <span class="function"><span class="keyword">function</span> (<span class="params">orderType,pay,stock</span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(orderType === <span class="number">2</span> &amp;&amp; pay === <span class="literal">true</span>)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'200 rmb deposit , get 50 coupon'</span>)</span><br><span class="line">&#125; <span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'nextSuccessor'</span>; </span><br><span class="line">&#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> orderNormal = <span class="function"><span class="keyword">function</span> (<span class="params">orderType,pay,stock</span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(stock &gt; <span class="number">0</span>)&#123;</span><br><span class="line">     <span class="built_in">console</span>.log(<span class="string">'normal buy no coupon'</span>)</span><br><span class="line">&#125; <span class="keyword">else</span>&#123;</span><br><span class="line">     <span class="built_in">console</span>.log(<span class="string">'the stock lack'</span>)</span><br><span class="line">&#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> Chain = <span class="function"><span class="keyword">function</span> (<span class="params">fn</span>) </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.fn = fn;</span><br><span class="line"><span class="keyword">this</span>.successor = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">Chain.prototype.setNextSuccessor = <span class="function"><span class="keyword">function</span> (<span class="params">successor</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.successor = successor;</span><br><span class="line">&#125;</span><br><span class="line">Chain.prototype.passRequest = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> ret = <span class="keyword">this</span>.fn.apply(<span class="keyword">this</span>.arguments);</span><br><span class="line"><span class="keyword">if</span>(ret === <span class="string">'nextSuccessor'</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.successor &amp;&amp; <span class="keyword">this</span>.successor.passRequest.apply(<span class="keyword">this</span>.successor,<span class="built_in">arguments</span>)</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//现在我们把3个订单函数分别包装成职责链的节点</span></span><br><span class="line"><span class="keyword">var</span> chainOrder500 = <span class="keyword">new</span> Chain(order500);</span><br><span class="line"><span class="keyword">var</span> chainOrder200 = <span class="keyword">new</span> Chain(order200);</span><br><span class="line"><span class="keyword">var</span> chainOrderNormal = <span class="keyword">new</span> Chain(orderNormal);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//最后把请求传递给第一个节点</span></span><br><span class="line">    chainOrder500.setNextSuccessor(chainOrder200)</span><br><span class="line">    chainOrder200.setNextSuccessor(chainOrderNormal)</span><br><span class="line"></span><br><span class="line"><span class="comment">//最后把请求传递给第一个节点</span></span><br><span class="line"><span class="comment">//test</span></span><br><span class="line">chainOrder500.passRequest(<span class="number">1</span>,<span class="literal">true</span>,<span class="number">500</span>);</span><br><span class="line">chainOrder500.passRequest(<span class="number">2</span>,<span class="literal">true</span>,<span class="number">500</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过改进，我们可以自由灵活的增加移除和链中的节点顺序，假如我们        又想支持</span></span><br><span class="line"><span class="comment">//300元定金购买，那我们就在改链中增加一个节点即可：</span></span><br><span class="line"><span class="keyword">var</span> order300 = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="comment">// todo</span></span><br><span class="line">&#125;;</span><br><span class="line">chainOrder300 = <span class="keyword">new</span> Chain(chainOrder300)</span><br><span class="line">chainOrder500.setNextSuccessor(chainOrder300)</span><br><span class="line">chainOrder300.setNextSuccessor(chainOrder200)</span><br></pre></td></tr></table></figure></p><p>我们可以自由灵活的增加移除和链中的节点顺序，这样就很简单能满足瞬息万变的需求了。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;职责链模式的基础&quot;&gt;&lt;a href=&quot;#职责链模式的基础&quot; class=&quot;headerlink&quot; title=&quot;职责链模式的基础&quot;&gt;&lt;/a&gt;职责链模式的基础&lt;/h2&gt;&lt;p&gt;定义：职责链模式（Chain of responsibility）是使多个对象都有机会处理请求，从而避免请求的发送者和接受者之间的耦合关系。将这个对象连成一条链，并沿着这条链传递该请求，直到有一个对象处理他为止。职责链模式的名字非常形象，一系列可能会处理请求的对象被该连接成一条链，请求在这些对象之间依次传递，直到遇到一个可以处理它的对象，我们把这些对象成为链中的节点。&lt;br&gt;优点：请求发送者只需要知道链中的第一个节点，从而弱化了发送者和一组接收者之间的强联系。&lt;/p&gt;
&lt;p&gt;使用场景：挤公交车递钱（只有售票员可以收钱）、交押金预定手机&lt;br&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="https://chongdee.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://chongdee.github.io/tags/JavaScript/"/>
    
      <category term="JS设计模式" scheme="https://chongdee.github.io/tags/JS%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>js设计模式-备忘录模式</title>
    <link href="https://chongdee.github.io/2018/10/31/js%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%A4%87%E5%BF%98%E5%BD%95%E6%A8%A1%E5%BC%8F/"/>
    <id>https://chongdee.github.io/2018/10/31/js设计模式-备忘录模式/</id>
    <published>2018-10-31T13:45:00.000Z</published>
    <updated>2018-11-06T11:12:48.685Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2 id="备忘录模式的基础"><a href="#备忘录模式的基础" class="headerlink" title="备忘录模式的基础"></a>备忘录模式的基础</h2><p>定义：在不破坏封装性的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态。这样就可以将该对象恢复到原先保存的状态<br>作用：在我们的开发中偶尔会遇到这样一种情况，需要对用户的行为进行撤销。要想实现撤销，首先需要保存软件系统的历史状态，当用户执行撤销时用之前的状态覆盖当前状态。本节介绍的备忘录模式提供了一种状态恢复的实现机制，使得用户可以方便的回到一个特定的历史步骤。备忘录模式在js中经常用于数据缓存。<br>使用场景：分页控件、撤销组件</p><a id="more"></a><h2 id="分页控件"><a href="#分页控件" class="headerlink" title="分页控件"></a>分页控件</h2><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">var Page = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">let page = <span class="number">1</span>,</span><br><span class="line">cache = &#123;&#125;,</span><br><span class="line"><span class="keyword">data</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">function</span><span class="params">( page )</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> ( cache[ page ] )&#123;</span><br><span class="line"><span class="keyword">data</span> =  cache[ page ];</span><br><span class="line">render( <span class="keyword">data</span> );</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">Ajax.send( <span class="string">'cgi.xx.com/xxx'</span>, <span class="function"><span class="keyword">function</span><span class="params">( data )</span></span>&#123;</span><br><span class="line">   cache[ page ] = <span class="keyword">data</span>;</span><br><span class="line">   render( <span class="keyword">data</span> );</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;();</span><br></pre></td></tr></table></figure><blockquote><p>分页控件, 从服务器获得某一页的数据后可以存入缓存。以后再翻回这一页的时候，可以直接使用缓存里的数据而无需再次请求服务器。</p></blockquote><h2 id="高阶函数实现缓存-备忘模式"><a href="#高阶函数实现缓存-备忘模式" class="headerlink" title="高阶函数实现缓存(备忘模式)"></a>高阶函数实现缓存(备忘模式)</h2><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> add = <span class="function"><span class="keyword">function</span><span class="params">(a)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>每次运行add(1)的时候都会输出2，但是输入1每次还是会计算一下1+1，如果是开销很大的操作的话就比较消耗性能了，这里其实可以对这个计算进行一次缓存。<br>所以这里可以利用高阶函数的思想来实现一个简单的缓存，我可以在函数内部用一个对象存储输入的参数，如果下次再输入相同的参数，那就比较一下对象的属性，把值从这个对象里面取出来。</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> memorize = <span class="function"><span class="keyword">function</span><span class="params">(fn)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> cache = &#123;&#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span><span class="params">(<span class="rest_arg">...args</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> _args = JSON.stringify(args)</span><br><span class="line">    <span class="keyword">return</span> cache[_args] || (cache[_args] = fn.apply(fn, args))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> add = <span class="function"><span class="keyword">function</span><span class="params">(a)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a + <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> adder = memorize(add)</span><br><span class="line">adder(<span class="number">1</span>)    <span class="comment">// 2    cache: &#123; '[1]': 2 &#125;</span></span><br><span class="line">adder(<span class="number">1</span>)    <span class="comment">// 2    cache: &#123; '[1]': 2 &#125;</span></span><br><span class="line">adder(<span class="number">2</span>)    <span class="comment">// 3    cache: &#123; '[1]': 2, '[2]': 3 &#125;</span></span><br></pre></td></tr></table></figure><p>用JSON.stringify把传给 adder 函数的参数变成了字符串，并且把它当做 cache 的 key，将 add 函数运行的结果当做 value 传到了 cache 里面，这样 memorize 的匿名函数运行的时候会返回cache[_args]，如果cache[_args]不存在的话就返回fn.apply(fn,args)，把fn.apply(fn, arguments)赋值给cache[_args]并返回。<br>注意：cache不可以是Map，因为Map的键是使用===比较的，[1]！==[1]，因此即使传入相同的对象或者数组，那么还是被存为不同的键。</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> memorize = <span class="function"><span class="keyword">function</span><span class="params">(fn)</span> </span>&#123;        <span class="comment">//  X 错误示范</span></span><br><span class="line">  <span class="keyword">const</span> cache = <span class="keyword">new</span> Map()</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span><span class="params">(<span class="rest_arg">...args</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> cache.get(args) || cache.set(args, fn.apply(fn, args)).get(args)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> add = <span class="function"><span class="keyword">function</span><span class="params">(a)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a + <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> adder = memorize(add)</span><br><span class="line">adder(<span class="number">1</span>)    <span class="comment">// 2    cache: &#123; [ 1 ] =&gt; 2 &#125;</span></span><br><span class="line">adder(<span class="number">1</span>)    <span class="comment">// 2    cache: &#123; [ 1 ] =&gt; 2, [ 1 ] =&gt; 2 &#125;</span></span><br><span class="line">adder(<span class="number">2</span>)    <span class="comment">// 3    cache: &#123; [ 1 ] =&gt; 2, [ 1 ] =&gt; 2, [ 2 ] =&gt; 3 &#125;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;备忘录模式的基础&quot;&gt;&lt;a href=&quot;#备忘录模式的基础&quot; class=&quot;headerlink&quot; title=&quot;备忘录模式的基础&quot;&gt;&lt;/a&gt;备忘录模式的基础&lt;/h2&gt;&lt;p&gt;定义：在不破坏封装性的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态。这样就可以将该对象恢复到原先保存的状态&lt;br&gt;作用：在我们的开发中偶尔会遇到这样一种情况，需要对用户的行为进行撤销。要想实现撤销，首先需要保存软件系统的历史状态，当用户执行撤销时用之前的状态覆盖当前状态。本节介绍的备忘录模式提供了一种状态恢复的实现机制，使得用户可以方便的回到一个特定的历史步骤。备忘录模式在js中经常用于数据缓存。&lt;br&gt;使用场景：分页控件、撤销组件&lt;/p&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="https://chongdee.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://chongdee.github.io/tags/JavaScript/"/>
    
      <category term="JS设计模式" scheme="https://chongdee.github.io/tags/JS%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>js设计模式-组合模式</title>
    <link href="https://chongdee.github.io/2018/10/31/js%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F/"/>
    <id>https://chongdee.github.io/2018/10/31/js设计模式-组合模式/</id>
    <published>2018-10-31T13:44:39.000Z</published>
    <updated>2018-11-06T10:35:20.788Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2 id="组合模式的基础"><a href="#组合模式的基础" class="headerlink" title="组合模式的基础"></a>组合模式的基础</h2><p>定义：组合模式（Composite）将对象组合成树形结构以表示“部分-整体”的层次结构，组合模式使得用户对单个对象和组合对象的使用具有一致性。<br>作用：组合模式让你可以优化处理递归或分级数据结构。<br>使用场景：系统目录结构、网站导航结构、文件扫描、DOM的机制，一个DOM节点可以包含子节点，不管是父节点还是子节点都有添加、删除、遍历子节点的通用功能。<br>该模式由两部分构成：<br>1.子对象（Leaf）：组成组合对象的最基本对象。<br>2.组合对象（Composite）：由子对象组合起来的复杂对象。</p><a id="more"></a><h2 id="组合模式的例子"><a href="#组合模式的例子" class="headerlink" title="组合模式的例子"></a>组合模式的例子</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义组合对象（文件夹）</span></span><br><span class="line"><span class="keyword">let</span> Folder = <span class="function"><span class="keyword">function</span>(<span class="params"> name </span>)</span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line"><span class="keyword">this</span>.files = [];</span><br><span class="line">&#125;;</span><br><span class="line">Folder.prototype.add = <span class="function"><span class="keyword">function</span>(<span class="params"> file </span>)</span>&#123;</span><br><span class="line"><span class="keyword">this</span>.files.push( file );</span><br><span class="line">&#125;;</span><br><span class="line">Folder.prototype.scan = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'开始文件扫描:'</span> + <span class="keyword">this</span>.name);</span><br><span class="line"><span class="keyword">for</span>( <span class="keyword">let</span> i = <span class="number">0</span>, file, files = <span class="keyword">this</span>.files; file = files[i++]; )&#123;</span><br><span class="line">file.scan();</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//定义叶子对象（文件）</span></span><br><span class="line"><span class="keyword">let</span> File = <span class="function"><span class="keyword">function</span>(<span class="params"> name </span>)</span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;;</span><br><span class="line">File.prototype.add = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'文件下面不能再添加文件'</span>);</span><br><span class="line">&#125;;</span><br><span class="line">File.prototype.scan = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'开始扫瞄：'</span> + <span class="keyword">this</span>.name);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> folder = <span class="keyword">new</span> Folder(<span class="string">'前端学习'</span>);</span><br><span class="line"><span class="keyword">let</span> folder1 = <span class="keyword">new</span> Folder(<span class="string">'JS学习'</span>);</span><br><span class="line"><span class="keyword">let</span> folder2 = <span class="keyword">new</span> Folder(<span class="string">'JQ学习'</span>);</span><br><span class="line"><span class="keyword">let</span> file1 = <span class="keyword">new</span> File(<span class="string">'JS设计模式'</span>);</span><br><span class="line"><span class="keyword">let</span> file2 = <span class="keyword">new</span> File(<span class="string">'JQ实战'</span>);</span><br><span class="line"><span class="keyword">let</span> file3 = <span class="keyword">new</span> File(<span class="string">'前端性能'</span>);</span><br><span class="line">folder1.add(file1);</span><br><span class="line">folder2.add(file2);</span><br><span class="line">folder.add(folder1);</span><br><span class="line">folder.add(folder2);</span><br><span class="line">folder.add(file3);</span><br><span class="line">folder.scan();</span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line">开始文件扫描：前端学习</span><br><span class="line">开始文件扫描：JS学习</span><br><span class="line">开始扫瞄：JS设计模式</span><br><span class="line">开始文件扫描：JQ学习</span><br><span class="line">开始扫瞄：JQ实战</span><br><span class="line">开始扫瞄：前端性能</span><br></pre></td></tr></table></figure><blockquote><p>父类和子类必须具有相同的接口（方法），只不过它们相同的方法具有的功能不相同，例如父类的实例具有 add 方法作用是，可以添加文件夹 或者 文件。子类的实例具有 add 方法则不能添加文件夹 或者 文件，却抛出一个错误（子类重写父类的方法）。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;组合模式的基础&quot;&gt;&lt;a href=&quot;#组合模式的基础&quot; class=&quot;headerlink&quot; title=&quot;组合模式的基础&quot;&gt;&lt;/a&gt;组合模式的基础&lt;/h2&gt;&lt;p&gt;定义：组合模式（Composite）将对象组合成树形结构以表示“部分-整体”的层次结构，组合模式使得用户对单个对象和组合对象的使用具有一致性。&lt;br&gt;作用：组合模式让你可以优化处理递归或分级数据结构。&lt;br&gt;使用场景：系统目录结构、网站导航结构、文件扫描、DOM的机制，一个DOM节点可以包含子节点，不管是父节点还是子节点都有添加、删除、遍历子节点的通用功能。&lt;br&gt;该模式由两部分构成：&lt;br&gt;1.子对象（Leaf）：组成组合对象的最基本对象。&lt;br&gt;2.组合对象（Composite）：由子对象组合起来的复杂对象。&lt;/p&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="https://chongdee.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://chongdee.github.io/tags/JavaScript/"/>
    
      <category term="JS设计模式" scheme="https://chongdee.github.io/tags/JS%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>js设计模式-模板方法模式</title>
    <link href="https://chongdee.github.io/2018/10/31/js%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/"/>
    <id>https://chongdee.github.io/2018/10/31/js设计模式-模板方法模式/</id>
    <published>2018-10-31T13:44:24.000Z</published>
    <updated>2018-11-06T10:19:13.354Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2 id="模版方法模式"><a href="#模版方法模式" class="headerlink" title="模版方法模式"></a>模版方法模式</h2><p>定义：模板方法模式由二部分组成，第一部分是抽象父类，第二部分是具体实现的子类，一般的情况下是抽象父类封装了子类的算法框架，包括实现一些公共方法及封装子类中所有方法的执行顺序，子类可以继承这个父类，并且可以在子类中重写父类的方法，从而实现自己的业务逻辑。<br>使用场景：（主要用于步骤相似的事情）</p><ol><li>泡饮品（茶 和 coffee）</li><li>公司面试<a id="more"></a></li></ol><h2 id="泡饮品（茶-和-coffee）"><a href="#泡饮品（茶-和-coffee）" class="headerlink" title="泡饮品（茶 和 coffee）"></a>泡饮品（茶 和 coffee）</h2><p>在例子中聊，泡茶和泡咖啡有同样的步骤，比如烧开水（boilWater）、冲泡（brew）、倒在杯子里（pourOnCup），加小料（addCondiments）等等。但每种饮料冲泡的方法以及所加的小料不一样，所以我们可以利用模板方法实现这个主要步骤。</p><p>首先先来定义抽象步骤（模板）：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> CaffeineBeverage = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line">CaffeineBeverage.prototype.prepareRecipe = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.boilWater();</span><br><span class="line">    <span class="keyword">this</span>.brew();</span><br><span class="line">    <span class="keyword">this</span>.pourOnCup();</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.customerWantsCondiments()) &#123;</span><br><span class="line">        <span class="comment">// 如果想加小料，就加上</span></span><br><span class="line">         <span class="keyword">this</span>.addCondiments();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">CaffeineBeverage.prototype.boilWater = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"将水烧开!"</span>);</span><br><span class="line">&#125;;</span><br><span class="line">CaffeineBeverage.prototype.pourOnCup = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"将饮料到再杯子里!"</span>);</span><br><span class="line">&#125;;</span><br><span class="line">CaffeineBeverage.prototype.brew = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"该方法必须重写!"</span>);</span><br><span class="line">&#125;;</span><br><span class="line">CaffeineBeverage.prototype.addCondiments = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"该方法必须重写!"</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 默认加上小料</span></span><br><span class="line">CaffeineBeverage.prototype.customerWantsCondiments = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>下面两个函数分别是冲咖啡和冲茶所对应的函数：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 冲咖啡</span></span><br><span class="line"><span class="keyword">var</span> Coffee = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    CaffeineBeverage.apply(<span class="keyword">this</span>);</span><br><span class="line">&#125;;</span><br><span class="line">Coffee.prototype = <span class="keyword">new</span> CaffeineBeverage();</span><br><span class="line">Coffee.prototype.brew = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"从咖啡机想咖啡倒进去!"</span>);</span><br><span class="line">&#125;;</span><br><span class="line">Coffee.prototype.addCondiments = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"添加糖和牛奶"</span>);</span><br><span class="line">&#125;;</span><br><span class="line">Coffee.prototype.customerWantsCondiments = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> confirm(<span class="string">"你想添加糖和牛奶吗？"</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//冲茶</span></span><br><span class="line"><span class="keyword">var</span> Tea = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    CaffeineBeverage.apply(<span class="keyword">this</span>);</span><br><span class="line">&#125;;</span><br><span class="line">Tea.prototype = <span class="keyword">new</span> CaffeineBeverage();</span><br><span class="line">Tea.prototype.brew = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"泡茶叶!"</span>);</span><br><span class="line">&#125;;</span><br><span class="line">Tea.prototype.addCondiments = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"添加柠檬!"</span>);</span><br><span class="line">&#125;;</span><br><span class="line">Tea.prototype.customerWantsCondiments = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> confirm(<span class="string">"你想添加柠檬嘛？"</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>使用confirm，可以让用户自己选择加不加小料，很不错嘛！</p><p>公司面试（百度面试 和 阿里面试）</p><h2 id="面试例子"><a href="#面试例子" class="headerlink" title="面试例子"></a>面试例子</h2><p>定义父类<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义父类</span></span><br><span class="line"><span class="keyword">let</span> ITInterview = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 笔试</span></span><br><span class="line">ITInterview.prototype.writtenTest = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"某公司笔试测试"</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 技术面试</span></span><br><span class="line">ITInterview.prototype.technicalInterview = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"某公司技术面试测试"</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 领导面试</span></span><br><span class="line">ITInterview.prototype.leader = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"某公司leader来面试了"</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等通知</span></span><br><span class="line">ITInterview.prototype.waitNotice = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"某公司的offer到了"</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">定义模版方法</span><br><span class="line"><span class="comment">// 作用：封装了子类的算法框架，包括实现一些公共方法及封装子类中所有方法的执行顺序。</span></span><br><span class="line">ITInterview.prototype.init = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">this</span>.writtenTest();</span><br><span class="line"><span class="keyword">this</span>.technicalInterview();</span><br><span class="line"><span class="keyword">this</span>.leader();</span><br><span class="line"><span class="keyword">this</span>.waitNotice();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>定义子类</p><p>首先子类需要重父类哪里继承所有的方法<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> BaiDuInterview = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line">BaiDuInterview.prototype = <span class="keyword">new</span> ITInterview();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 笔试</span></span><br><span class="line">BaiDuInterview.prototype.writtenTest = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"百度公司笔试测试"</span>); <span class="comment">// 无非就是面试题不一样呗</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 技术面试</span></span><br><span class="line">BaiDuInterview.prototype.technicalInterview = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"百度公司技术面试测试"</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 领导面试</span></span><br><span class="line">BaiDuInterview.prototype.leader = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"百度公司leader来面试了"</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等通知</span></span><br><span class="line">BaiDuInterview.prototype.waitNotice = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"百度公司的offer到了"</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> baiduInterview = <span class="keyword">new</span> BaiDuInterview();</span><br><span class="line">baiduInterview.init(); <span class="comment">// 子类还可以重写父类的init方法，这样各个公司面试的流程就不一样了。</span></span><br></pre></td></tr></table></figure></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>模板方法应用于下列情况：</p><p>一次性实现一个算法的不变的部分，并将可变的行为留给子类来实现<br>各子类中公共的行为应被提取出来并集中到一个公共父类中以避免代码重复，不同之处分离为新的操作，分别实现<br>控制子类扩展，模板方法可以只在特定点调用“Hook”操作，这样就只允许在这些点进行扩展。</p><p>注：<br>钩子（Hook）操作，它提供了缺省的行为，子类在必要时进行扩展。一个钩子操作的缺省操作通常是一个空操作。在模板方法中应指明哪些操是钩子操作（可以被重定义）以及哪些是抽象操作（必须被重定义）</p><p>和策略模式不同，模板方法使用继承来改变算法的一部分，而策略模式使用委托来改变整个算法（这一点暂时不是很明白，学习策略模式后再回来理解）。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;模版方法模式&quot;&gt;&lt;a href=&quot;#模版方法模式&quot; class=&quot;headerlink&quot; title=&quot;模版方法模式&quot;&gt;&lt;/a&gt;模版方法模式&lt;/h2&gt;&lt;p&gt;定义：模板方法模式由二部分组成，第一部分是抽象父类，第二部分是具体实现的子类，一般的情况下是抽象父类封装了子类的算法框架，包括实现一些公共方法及封装子类中所有方法的执行顺序，子类可以继承这个父类，并且可以在子类中重写父类的方法，从而实现自己的业务逻辑。&lt;br&gt;使用场景：（主要用于步骤相似的事情）&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;泡饮品（茶 和 coffee）&lt;/li&gt;
&lt;li&gt;公司面试
    
    </summary>
    
      <category term="JavaScript" scheme="https://chongdee.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://chongdee.github.io/tags/JavaScript/"/>
    
      <category term="JS设计模式" scheme="https://chongdee.github.io/tags/JS%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>js设计模式-访问者模式</title>
    <link href="https://chongdee.github.io/2018/10/31/js%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%AE%BF%E9%97%AE%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    <id>https://chongdee.github.io/2018/10/31/js设计模式-访问者模式/</id>
    <published>2018-10-31T13:44:04.000Z</published>
    <updated>2018-11-06T09:32:42.875Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2 id="访问者模式定义"><a href="#访问者模式定义" class="headerlink" title="访问者模式定义"></a>访问者模式定义</h2><p>介绍：访问者模式比较复杂，它包含访问者和被访问元素两个主要组成部分，这些被访问的元素通常具有不同的类型，且不同的访问者可以对他们进行不同的访问操作。访问者模式的主要目的是将数据结构与数据操作相分离。</p><p>定义：提供一个作用于某对象结构中的个元素的操作表示，它使得可以再不改变各元素的类的前提下定义作用于这些元素的新操作。访问者模式是一种对象行为型模式</p><h2 id="在访问者模式中，主要包括以下几个角色"><a href="#在访问者模式中，主要包括以下几个角色" class="headerlink" title="在访问者模式中，主要包括以下几个角色"></a>在访问者模式中，主要包括以下几个角色</h2><ol><li>抽象访问者：抽象类或者接口，声明访问者可以访问哪些元素，具体到程序中就是visit方法中的参数定义哪些对象是可以被访问的。</li><li>访问者：实现抽象访问者所声明的方法，它影响到访问者访问到一个类后该干什么，要做什么事情。</li><li>抽象元素类：接口或者抽象类，声明接受哪一类访问者访问，程序上是通过accept方法中的参数来定义的。抽象元素一般有两类方法，一部分是本身的业务逻辑，另外就是允许接收哪类访问者来访问。</li><li>元素类：实现抽象元素类所声明的accept方法，通常都是visitor.visit(this)，基本上已经形成一种定式了。</li><li>结构对象：一个元素的容器，一般包含一个容纳多个不同类、不同接口的容器，如List、Set、Map等，在项目中一般很少抽象出这个角色。<a id="more"></a></li></ol><h2 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Keyboard = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.accept = <span class="function"><span class="keyword">function</span>(<span class="params">computerPartVisitor</span>)</span>&#123;</span><br><span class="line">        computerPartVisitor.visit(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> Monitor = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.accept = <span class="function"><span class="keyword">function</span>(<span class="params">computerPartVisitor</span>)</span>&#123;</span><br><span class="line">        computerPartVisitor.visit(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> Mouse = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.accept = <span class="function"><span class="keyword">function</span>(<span class="params">computerPartVisitor</span>)</span>&#123;</span><br><span class="line">        computerPartVisitor.visit(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> Computer = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> parts = [<span class="keyword">new</span> Keyboard(), <span class="keyword">new</span> Monitor(), <span class="keyword">new</span> Mouse()];</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">this</span>.accept = <span class="function"><span class="keyword">function</span>(<span class="params">computerPartVisitor</span>)</span>&#123;</span><br><span class="line">        computerPartVisitor.visit(<span class="keyword">this</span>);</span><br><span class="line">        _acceptAll(computerPartVisitor);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">var</span> _acceptAll = <span class="function"><span class="keyword">function</span>(<span class="params">computerPartVisitor</span>)</span>&#123;</span><br><span class="line">        parts.map(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;</span><br><span class="line">            item.accept(computerPartVisitor)</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> ComputerPartDisplayVisitor = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.visit = <span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(item.constructor == Keyboard)&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"Displaying Keyboard."</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(item.constructor == Monitor)&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"Displaying Monitor."</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(item.constructor == Mouse)&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"Displaying Mouse."</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(item.constructor == Computer)&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"Displaying Computer."</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"Error"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> computer = <span class="keyword">new</span> Computer();</span><br><span class="line">computer.accept(<span class="keyword">new</span> ComputerPartDisplayVisitor());</span><br><span class="line"><span class="comment">// Displaying Computer.</span></span><br><span class="line"><span class="comment">// Displaying Keyboard.</span></span><br><span class="line"><span class="comment">// Displaying Monitor.</span></span><br><span class="line"><span class="comment">// Displaying Mouse.</span></span><br></pre></td></tr></table></figure><p>简洁版：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 访问者  </span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Visitor</span>(<span class="params"></span>) </span>&#123;  </span><br><span class="line">  <span class="keyword">this</span>.visit = <span class="function"><span class="keyword">function</span>(<span class="params"> concreteElement </span>) </span>&#123;  </span><br><span class="line">    concreteElement.doSomething();  </span><br><span class="line">  &#125;  </span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">// 元素类  </span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ConceteElement</span>(<span class="params"></span>) </span>&#123;  </span><br><span class="line">  <span class="keyword">this</span>.doSomething = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;  </span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"这是一个具体元素"</span>);  </span><br><span class="line">  &#125;  </span><br><span class="line">  <span class="keyword">this</span>.accept = <span class="function"><span class="keyword">function</span>(<span class="params"> visitor </span>) </span>&#123;  </span><br><span class="line">    visitor.visit(<span class="keyword">this</span>);  </span><br><span class="line">  &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">// Client  </span></span><br><span class="line"><span class="keyword">var</span> ele = <span class="keyword">new</span> ConceteElement();  </span><br><span class="line"><span class="keyword">var</span> v = <span class="keyword">new</span> Visitor();  </span><br><span class="line">ele.accept( v );</span><br></pre></td></tr></table></figure></p><p>这个模式比较复杂，我们先介绍下组成：<br>ComputerPartDisplayVisitor称为访问者，它为对象结构中的每一个具体元素例如Keyboard，Mouse等声明一个访问操作。当访问Keyboard时就会输出Displaying Keyboard。<br>Keyboard，Monitor，Mouse称为元素，他们包含一个accept方法，用来触发传递进来的访问者<br>Computer称为对象结构，它是一个元素的集合。parts数组用于存放元素对象，以供不同访问者访问。_acceptAll方法用来遍历内部元素。<br>访问者通过accept访问元素内部，元素内部也可以通过参数调用访问者的visit方法。这种调用机制称为双重分派。</p><h2 id="访问者模式总结"><a href="#访问者模式总结" class="headerlink" title="访问者模式总结"></a>访问者模式总结</h2><p>优点：</p><ul><li>增加新的访问操作便捷，只需要加一个新的访问者类。</li><li>将有关原色对象的访问行为集合到一个访问者对象中，类的职责更清晰。</li><li>让用户在不修改现有元素层次结构的情况下，定义作用于该层次结构的操作。<br>缺点：</li><li>增加新的元素类很困难，在访问者模式下，每增加一个新的元素,对应要增加访问者中的操作。</li><li>破坏封装。访问者模式要求访问者对象访问并调用每一个元素对象的操作，这意味着元素必须暴露一些内部操作和内部状态。</li></ul><p>适用场景：</p><ul><li>一个对象结构包含多个类型的对象，希望对这些对象实施一些依赖其具体类型的操作。</li><li>需要对一个对象结构中的对象进行横多不同的并且不相关的操作，而且需要避免让这些操作污染这些对象的类。</li><li>对象结构中对象对应的类很少改变，但经常需要再次对象结构上定义新的操作。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;访问者模式定义&quot;&gt;&lt;a href=&quot;#访问者模式定义&quot; class=&quot;headerlink&quot; title=&quot;访问者模式定义&quot;&gt;&lt;/a&gt;访问者模式定义&lt;/h2&gt;&lt;p&gt;介绍：访问者模式比较复杂，它包含访问者和被访问元素两个主要组成部分，这些被访问的元素通常具有不同的类型，且不同的访问者可以对他们进行不同的访问操作。访问者模式的主要目的是将数据结构与数据操作相分离。&lt;/p&gt;
&lt;p&gt;定义：提供一个作用于某对象结构中的个元素的操作表示，它使得可以再不改变各元素的类的前提下定义作用于这些元素的新操作。访问者模式是一种对象行为型模式&lt;/p&gt;
&lt;h2 id=&quot;在访问者模式中，主要包括以下几个角色&quot;&gt;&lt;a href=&quot;#在访问者模式中，主要包括以下几个角色&quot; class=&quot;headerlink&quot; title=&quot;在访问者模式中，主要包括以下几个角色&quot;&gt;&lt;/a&gt;在访问者模式中，主要包括以下几个角色&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;抽象访问者：抽象类或者接口，声明访问者可以访问哪些元素，具体到程序中就是visit方法中的参数定义哪些对象是可以被访问的。&lt;/li&gt;
&lt;li&gt;访问者：实现抽象访问者所声明的方法，它影响到访问者访问到一个类后该干什么，要做什么事情。&lt;/li&gt;
&lt;li&gt;抽象元素类：接口或者抽象类，声明接受哪一类访问者访问，程序上是通过accept方法中的参数来定义的。抽象元素一般有两类方法，一部分是本身的业务逻辑，另外就是允许接收哪类访问者来访问。&lt;/li&gt;
&lt;li&gt;元素类：实现抽象元素类所声明的accept方法，通常都是visitor.visit(this)，基本上已经形成一种定式了。&lt;/li&gt;
&lt;li&gt;结构对象：一个元素的容器，一般包含一个容纳多个不同类、不同接口的容器，如List、Set、Map等，在项目中一般很少抽象出这个角色。
    
    </summary>
    
      <category term="JavaScript" scheme="https://chongdee.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://chongdee.github.io/tags/JavaScript/"/>
    
      <category term="JS设计模式" scheme="https://chongdee.github.io/tags/JS%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>js设计模式-外观模式</title>
    <link href="https://chongdee.github.io/2018/10/31/js%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F/"/>
    <id>https://chongdee.github.io/2018/10/31/js设计模式-外观模式/</id>
    <published>2018-10-31T13:43:45.000Z</published>
    <updated>2018-11-06T09:12:49.794Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2 id="外观模式基础"><a href="#外观模式基础" class="headerlink" title="外观模式基础"></a>外观模式基础</h2><p>定义：外观模式（Facade）为子系统中的一组接口提供了一个一致的界面，此模块定义了一个高层接口，这个接口使得这一子系统更加容易使用。<br>外观模式不仅简化类中的接口，而且对接口与调用者也进行了解耦。外观模式经常被认为开发者必备，它可以将一些复杂操作封装起来，并创建一个简单的接口用于调用。</p><p>使用场景：外观模式经常被用于JavaScript类库里，通过它封装一些接口用于兼容多浏览器，外观模式可以让我们间接调用子系统，从而避免因直接访问子系统而产生不必要的错误。</p><p>外观模式的优势是易于使用，而且本身也比较轻量级。但也有缺点外观模式被开发者连续使用时会产生一定的性能问题，因为在每次调用时都要检测功能的可用性。<br><a id="more"></a></p><h2 id="兼容浏览器事件绑定"><a href="#兼容浏览器事件绑定" class="headerlink" title="兼容浏览器事件绑定"></a>兼容浏览器事件绑定</h2><p>下面是一段未优化过的代码，我们使用了外观模式通过检测浏览器特性的方式来创建一个跨浏览器的使用方法。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> addEvent = <span class="function"><span class="keyword">function</span>(<span class="params">el, ev, fn</span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (el.addEventListener) &#123;</span><br><span class="line">el.addEventListener(ev, fn, <span class="literal">false</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (el.attachEvent) &#123;</span><br><span class="line">el.attachEvent(<span class="string">`on<span class="subst">$&#123;ev&#125;</span>`</span>, fn);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">el.[<span class="string">`on<span class="subst">$&#123;ev&#125;</span>`</span>] = fn;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><blockquote><p>这里有一个问题，我们每调用一次 addEvent 函数就是执行一次 if-else 判断。</p></blockquote><h2 id="兼容浏览器阻止冒泡、默认事件"><a href="#兼容浏览器阻止冒泡、默认事件" class="headerlink" title="兼容浏览器阻止冒泡、默认事件"></a>兼容浏览器阻止冒泡、默认事件</h2><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">N</span> = window.N || &#123;&#125;;</span><br><span class="line">N.<span class="attr">tools</span> = &#123;</span><br><span class="line">stopPropagation(e) &#123;</span><br><span class="line"><span class="keyword">if</span> (e.stopPropagation) &#123;</span><br><span class="line">e.stopPropagation();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">e.<span class="attr">cancelBubble</span> = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">preventDefault(e) &#123;</span><br><span class="line"><span class="keyword">if</span> (e.preventDefault) &#123;</span><br><span class="line">e.preventDefault();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">e.<span class="attr">returnValue</span> = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">stopEvent (e) &#123;</span><br><span class="line">this.stopPropagation(e);</span><br><span class="line">this.preventDefault(e);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;外观模式基础&quot;&gt;&lt;a href=&quot;#外观模式基础&quot; class=&quot;headerlink&quot; title=&quot;外观模式基础&quot;&gt;&lt;/a&gt;外观模式基础&lt;/h2&gt;&lt;p&gt;定义：外观模式（Facade）为子系统中的一组接口提供了一个一致的界面，此模块定义了一个高层接口，这个接口使得这一子系统更加容易使用。&lt;br&gt;外观模式不仅简化类中的接口，而且对接口与调用者也进行了解耦。外观模式经常被认为开发者必备，它可以将一些复杂操作封装起来，并创建一个简单的接口用于调用。&lt;/p&gt;
&lt;p&gt;使用场景：外观模式经常被用于JavaScript类库里，通过它封装一些接口用于兼容多浏览器，外观模式可以让我们间接调用子系统，从而避免因直接访问子系统而产生不必要的错误。&lt;/p&gt;
&lt;p&gt;外观模式的优势是易于使用，而且本身也比较轻量级。但也有缺点外观模式被开发者连续使用时会产生一定的性能问题，因为在每次调用时都要检测功能的可用性。&lt;br&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="https://chongdee.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://chongdee.github.io/tags/JavaScript/"/>
    
      <category term="JS设计模式" scheme="https://chongdee.github.io/tags/JS%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>js设计模式-桥接模式</title>
    <link href="https://chongdee.github.io/2018/10/31/js%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F/"/>
    <id>https://chongdee.github.io/2018/10/31/js设计模式-桥接模式/</id>
    <published>2018-10-31T13:43:28.000Z</published>
    <updated>2018-11-06T09:12:45.455Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p>桥接模式定义<br>定义：桥接模式（Bridge）将抽象部分与它的实现部分分离，使它们都可以独立地变化。<br>桥接设计模式是许多其他设计模式的基础,比如装饰模式, 代理模式都或多或少看到他的影子, 在面向对象设计中最重要的一个特点就是继承, 然而作为拓展类的功能的方式有两种 – 继承和桥接, 桥接用我简单的理解就是放弃使用继承的方式拓展类, 而是采用包含另一个具有一定功能的对象来拓展类。</p><p>使用场景：事件回调函数、请求接口之间进行桥接、用于连接公开的API代码和私用实现的代码<br>根据javascript语言的特点，我们将其简化成2个角色：<br>（1）扩充抽象类<br>（2）具体实现类<br><a id="more"></a></p><h2 id="最简单的桥接模式"><a href="#最简单的桥接模式" class="headerlink" title="最简单的桥接模式"></a>最简单的桥接模式</h2><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="keyword">each</span> = <span class="function"><span class="keyword">function</span> <span class="params">(arr, fn)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line"><span class="keyword">var</span> val = arr[i];</span><br><span class="line"><span class="keyword">if</span> (fn.call(val, i, val, arr)) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"><span class="keyword">each</span>(arr, <span class="function"><span class="keyword">function</span> <span class="params">(i, v)</span> </span>&#123;</span><br><span class="line">arr[i] = v * <span class="number">2</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>在这个例子中，抽象部分是each函数，也就是上面说的扩充抽象类，实现部分是fn，即具体实现类。抽象部分和实现部分可以独立的进行变化。这个例子虽然简单，但就是一个典型的桥接模式的应用。</p></blockquote><h2 id="事件监控"><a href="#事件监控" class="headerlink" title="事件监控"></a>事件监控</h2><p>抽象类 click 事件<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">addEvent(element, <span class="string">'click'</span>, getBeerByIdBridge);</span><br><span class="line"><span class="comment">// 提供一个桥梁 将 抽象类和实现类链接起来</span></span><br><span class="line"><span class="comment">// 作为桥梁</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getBeerByIdBridge</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">　　getBeerById(<span class="keyword">this</span>.id, <span class="function"><span class="keyword">function</span>(<span class="params">beer</span>) </span>&#123;</span><br><span class="line">　　　　<span class="built_in">console</span>.log(<span class="string">'Requested Beer: '</span>+beer);</span><br><span class="line">　　&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>实现类<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getBeerById</span><span class="params">(id, callback)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 通过ID发送请求，然后返回数据</span></span><br><span class="line">asyncRequest(<span class="string">'GET'</span>, <span class="string">'beer.uri?id='</span> + id, <span class="function"><span class="keyword">function</span><span class="params">(resp)</span> </span>&#123;</span><br><span class="line"><span class="comment">// callback response</span></span><br><span class="line">callback(resp.responseText);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><blockquote><p>这里的getBeerByIdBridge就是我们定义的桥，用于将抽象的click事件和getBeerById连接起来，同时将事件源的ID，以及自定义的call函数（console.log输出）作为参数传入到getBeerById函数里。</p></blockquote><h2 id="用于连接公开的API代码和私用实现的代码"><a href="#用于连接公开的API代码和私用实现的代码" class="headerlink" title="用于连接公开的API代码和私用实现的代码"></a>用于连接公开的API代码和私用实现的代码</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="keyword">Public</span>=<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">// 定义的私有变量</span></span><br><span class="line"><span class="keyword">var</span> secret = <span class="number">3</span>;</span><br><span class="line"><span class="comment">// 该函数返回了私有变量，外界可以通过该方法访问该私有变量</span></span><br><span class="line">this.privilegedGetter = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line"> <span class="keyword">return</span> secret;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> o = <span class="keyword">new</span> <span class="keyword">Public</span>();</span><br><span class="line"><span class="keyword">var</span> data =o.privilegedGetter();</span><br></pre></td></tr></table></figure><blockquote><p>如果一个公用的接口抽象了一些也许应该属于私用性的较复杂的任务，那么可以使用桥接模式来收集某些私用性的信息。可以用一些具有特殊权利的方法作为桥梁以便访问私用变量空间。这一特例中的桥接性函数又称特权函数。</p></blockquote><h2 id="用桥接模式联结多个类"><a href="#用桥接模式联结多个类" class="headerlink" title="用桥接模式联结多个类"></a>用桥接模式联结多个类</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//例1</span></span><br><span class="line"><span class="keyword">var</span> Class1 =<span class="function"><span class="keyword">function</span>(<span class="params">a,b,c</span>)</span>&#123;</span><br><span class="line"><span class="keyword">this</span>.a =a;</span><br><span class="line"><span class="keyword">this</span>.b = b;</span><br><span class="line"><span class="keyword">this</span>.c = c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> Class2 =<span class="function"><span class="keyword">function</span>(<span class="params">d</span>)</span>&#123;</span><br><span class="line"><span class="keyword">this</span>.d = d;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> BridgeClass =<span class="function"><span class="keyword">function</span>(<span class="params">a,b,c,d</span>)</span>&#123;</span><br><span class="line">   <span class="keyword">this</span>.one = <span class="keyword">new</span> Class1(a,b,c);</span><br><span class="line">   <span class="keyword">this</span>.two = <span class="keyword">new</span> Class2(d);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">------------------------------------------------------------------------</span><br><span class="line"><span class="comment">//例2</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Speed</span> </span>&#123;            <span class="comment">// 运动模块</span></span><br><span class="line">  <span class="keyword">constructor</span>(x, y) &#123;</span><br><span class="line">    <span class="keyword">this</span>.x = x</span><br><span class="line">    <span class="keyword">this</span>.y = y</span><br><span class="line">  &#125;</span><br><span class="line">  run() &#123;  <span class="built_in">console</span>.log(<span class="string">`运动起来 <span class="subst">$&#123;<span class="keyword">this</span>.x&#125;</span> + <span class="subst">$&#123;<span class="keyword">this</span>.y&#125;</span>`</span>)  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Color</span> </span>&#123;            <span class="comment">// 着色模块</span></span><br><span class="line">  <span class="keyword">constructor</span>(cl) &#123;</span><br><span class="line">    <span class="keyword">this</span>.color = cl</span><br><span class="line">  &#125;</span><br><span class="line">  draw() &#123;  <span class="built_in">console</span>.log(<span class="string">`绘制颜色 <span class="subst">$&#123;<span class="keyword">this</span>.color&#125;</span>`</span>)  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Speak</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(wd) &#123;</span><br><span class="line">    <span class="keyword">this</span>.word = wd</span><br><span class="line">  &#125;</span><br><span class="line">  say() &#123;  <span class="built_in">console</span>.log(<span class="string">`说话 <span class="subst">$&#123;<span class="keyword">this</span>.word&#125;</span>`</span>)  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Ball</span> </span>&#123;                     <span class="comment">// 创建球类，可以着色和运动</span></span><br><span class="line">  <span class="keyword">constructor</span>(x, y, cl) &#123;</span><br><span class="line">    <span class="keyword">this</span>.speed = <span class="keyword">new</span> Speed(x, y)</span><br><span class="line">    <span class="keyword">this</span>.color = <span class="keyword">new</span> Color(cl)</span><br><span class="line">  &#125;</span><br><span class="line">  init() &#123;</span><br><span class="line">    <span class="keyword">this</span>.speed.run()</span><br><span class="line">    <span class="keyword">this</span>.color.draw()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Man</span> </span>&#123;                    <span class="comment">// 人类，可以运动和说话</span></span><br><span class="line">  <span class="keyword">constructor</span>(x, y, wd) &#123;</span><br><span class="line">    <span class="keyword">this</span>.speed = <span class="keyword">new</span> Speed(x, y)</span><br><span class="line">    <span class="keyword">this</span>.speak = <span class="keyword">new</span> Speak(wd)</span><br><span class="line">  &#125;</span><br><span class="line">  init() &#123;</span><br><span class="line">    <span class="keyword">this</span>.speed.run()</span><br><span class="line">    <span class="keyword">this</span>.speak.say()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> man = <span class="keyword">new</span> Man(<span class="number">1</span>, <span class="number">2</span>, <span class="string">'hehe?'</span>)</span><br><span class="line">man.init()                                <span class="comment">// 运动起来 1 + 2      说话 hehe?</span></span><br></pre></td></tr></table></figure><blockquote><p>这看起来很像是—-适配器，的确如此。但要注意到本例中实际上并没有客户系统要求提供数据。它只不过是用来接纳大量数据并将其发送给责任方的一种辅助性手段。此外，BridgeClass也不是一个客户系统已经实现的现有接口。引入这个类的目的只不过是要桥接一些类而已。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;桥接模式定义&lt;br&gt;定义：桥接模式（Bridge）将抽象部分与它的实现部分分离，使它们都可以独立地变化。&lt;br&gt;桥接设计模式是许多其他设计模式的基础,比如装饰模式, 代理模式都或多或少看到他的影子, 在面向对象设计中最重要的一个特点就是继承, 然而作为拓展类的功能的方式有两种 – 继承和桥接, 桥接用我简单的理解就是放弃使用继承的方式拓展类, 而是采用包含另一个具有一定功能的对象来拓展类。&lt;/p&gt;
&lt;p&gt;使用场景：事件回调函数、请求接口之间进行桥接、用于连接公开的API代码和私用实现的代码&lt;br&gt;根据javascript语言的特点，我们将其简化成2个角色：&lt;br&gt;（1）扩充抽象类&lt;br&gt;（2）具体实现类&lt;br&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="https://chongdee.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://chongdee.github.io/tags/JavaScript/"/>
    
      <category term="JS设计模式" scheme="https://chongdee.github.io/tags/JS%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>js设计模式-迭代器模式</title>
    <link href="https://chongdee.github.io/2018/10/31/js%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
    <id>https://chongdee.github.io/2018/10/31/js设计模式-迭代器模式/</id>
    <published>2018-10-31T13:42:36.000Z</published>
    <updated>2018-11-05T11:15:00.013Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2 id="迭代器模式介绍"><a href="#迭代器模式介绍" class="headerlink" title="迭代器模式介绍"></a>迭代器模式介绍</h2><p>定义：迭代器模式是指提供一种方法顺序访问一个聚合对象中的各个元素，而又不需要暴露该对象的内部表示。<br>使用的好处：迭代器模式可以把迭代的过程从业务逻辑中分离出来，在使用迭代器模式之后，即使不关心对象的内部构造，也可以按顺序访问其中的每个元素。<br><a id="more"></a><br>先看一个 仿jquery 迭代器<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> $ = &#123;</span><br><span class="line">    each: <span class="function"><span class="keyword">function</span> (<span class="params">arr, fn</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = arr.length; i &lt; len; i++) &#123;</span><br><span class="line">            fn.call(arr[i], i, arr[i])</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">$.each([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>], <span class="function"><span class="keyword">function</span>(<span class="params">i, val</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log([i, val]);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><h2 id="迭代器的分类"><a href="#迭代器的分类" class="headerlink" title="迭代器的分类"></a>迭代器的分类</h2><p>迭代器根据实现的位置，我们将它分为内部迭代器和外部迭代器两种。</p><h3 id="内部迭代器"><a href="#内部迭代器" class="headerlink" title="内部迭代器"></a>内部迭代器</h3><p>内部迭代器对于使用者来说他不用关心迭代器的内部实现，只用关注使用的效果，我们上面仿jQuery的each就是个内部迭代器的实现。</p><p>内部迭代器有它的好处但是也有它的不足，比如我们要比较两个数组是否相等，上面的方法就不满足我们的需要，我们就需要写一个新的方法来实现。<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> $ = &#123;</span><br><span class="line">    <span class="keyword">each</span>: <span class="function"><span class="keyword">function</span> <span class="params">(arr, fn)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = arr.length; i &lt; len; i++) &#123;</span><br><span class="line">            fn.call(arr[i], i, arr[i])</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> compareArray = <span class="function"><span class="keyword">function</span><span class="params">(arr, arr2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>( arr.length !== arr2.length) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    $.each(arr, <span class="function"><span class="keyword">function</span><span class="params">(i, val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>( val !== arr2[i]) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">compareArray([<span class="number">1</span>, <span class="number">2</span>], [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]); <span class="comment">// false</span></span><br></pre></td></tr></table></figure></p><h3 id="外部迭代器"><a href="#外部迭代器" class="headerlink" title="外部迭代器"></a>外部迭代器</h3><p>外部迭代器必须显式地请求才会迭代下一个元素。</p><p>外部迭代器虽然增加了使用上的一些麻烦，但是它的灵活性却正是我们需要的。我们可以人为的控制迭代的过程和顺序。<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 迭代器实现</span></span><br><span class="line"><span class="keyword">var</span> Iterator = <span class="function"><span class="keyword">function</span><span class="params">(obj)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> current = <span class="number">0</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">var</span> next = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        current += <span class="number">1</span>;</span><br><span class="line">    &#125;;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">var</span> isDone = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> current &gt;= obj.length;</span><br><span class="line">    &#125;;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">var</span> getCurrItem = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> obj[current];</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> len = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> obj.length;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        next: next,</span><br><span class="line">        isDone: isDone,</span><br><span class="line">        getCurrItem: getCurrItem,</span><br><span class="line">        length: len,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 比较数组</span></span><br><span class="line"><span class="keyword">var</span> compareArray = <span class="function"><span class="keyword">function</span> <span class="params">(iteratorObj, iteratorObj2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(iteratorObj.length !== iteratorObj2.length) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (!iteratorObj.isDone() &amp;&amp; !iteratorObj2.isDone())&#123;</span><br><span class="line">        <span class="keyword">if</span> (iteratorObj.getCurrItem() !== iteratorObj2.getCurrItem())&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        iteratorObj.next();</span><br><span class="line">        iteratorObj2.next();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr = Iterator([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]); </span><br><span class="line"><span class="keyword">var</span> arr2 = Iterator([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]); </span><br><span class="line"> </span><br><span class="line">compareArray(arr, arr2); <span class="comment">// true</span></span><br></pre></td></tr></table></figure></p><h2 id="迭代器可以中止"><a href="#迭代器可以中止" class="headerlink" title="迭代器可以中止"></a>迭代器可以中止</h2><p>在for循环中，我们可以通过break来跳出循环，所以在迭代器模式中。我们可以利用这个来提前终止迭代。接下来我们改在一下最开始的each函数</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="keyword">each</span> = <span class="function"><span class="keyword">function</span><span class="params">(arr, callback)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> result</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = arr.length; i &lt; len; i++) &#123;</span><br><span class="line">        result = callback.call(arr[i], i, arr[i])</span><br><span class="line">        <span class="keyword">if</span> (result === <span class="literal">false</span>) &#123;</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">each</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>], <span class="function"><span class="keyword">function</span><span class="params">(i, el)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (el &gt; <span class="number">3</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    console.log(el)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;迭代器模式介绍&quot;&gt;&lt;a href=&quot;#迭代器模式介绍&quot; class=&quot;headerlink&quot; title=&quot;迭代器模式介绍&quot;&gt;&lt;/a&gt;迭代器模式介绍&lt;/h2&gt;&lt;p&gt;定义：迭代器模式是指提供一种方法顺序访问一个聚合对象中的各个元素，而又不需要暴露该对象的内部表示。&lt;br&gt;使用的好处：迭代器模式可以把迭代的过程从业务逻辑中分离出来，在使用迭代器模式之后，即使不关心对象的内部构造，也可以按顺序访问其中的每个元素。&lt;br&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="https://chongdee.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://chongdee.github.io/tags/JavaScript/"/>
    
      <category term="JS设计模式" scheme="https://chongdee.github.io/tags/JS%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>js设计模式-适配器模式</title>
    <link href="https://chongdee.github.io/2018/10/31/js%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
    <id>https://chongdee.github.io/2018/10/31/js设计模式-适配器模式/</id>
    <published>2018-10-31T13:42:14.000Z</published>
    <updated>2018-11-05T10:41:43.831Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2 id="适配器模式介绍"><a href="#适配器模式介绍" class="headerlink" title="适配器模式介绍"></a>适配器模式介绍</h2><p>定义：适配器模式（Adapter）是将一个类（对象）的接口（方法或属性）转化成客户希望的另外一个接口（方法或属性），<br>适配器模式使得原本由于接口不兼容而不能一起工作的那些类（对象）可以一些工作。速成包装器（wrapper）。<br>使用场景：适配器模式往往用于适配两个接口不兼容的问题，在js中应用更为广泛，比如适配两个代码库、适配前后端数据。</p><p>因此应对这种场景，我们可以很快地想到可以用适配器模式来解决这个问题。</p><h2 id="参数适配"><a href="#参数适配" class="headerlink" title="参数适配"></a>参数适配</h2><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//比如某个方法中需要传入多个参数</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">doSomething</span><span class="params">(name,title,age,type,color,size)</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//记住这些参数顺序很难，所以我们经常是以一个参数的形式传进去</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    name: name,</span><br><span class="line">    title:title,</span><br><span class="line">    age:age,</span><br><span class="line">    type:type</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">doSomething</span><span class="params">(obj)</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//但是有的时候传入参数不完整或者默认的情况，这个时候我们需要适配器适配传入的参数对象</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">doSomething</span><span class="params">(obj)</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> _adapter=&#123;</span><br><span class="line">        name:<span class="string">'设计模式'</span>，</span><br><span class="line">        title：<span class="string">'js'</span>,</span><br><span class="line">        age:<span class="number">2</span>,</span><br><span class="line">        color:<span class="string">'red'</span></span><br><span class="line">        &#125;</span><br><span class="line">     <span class="keyword">for</span>(<span class="keyword">var</span> i <span class="keyword">in</span> _adapter)&#123;</span><br><span class="line">         <span class="keyword">return</span> _adapter[i]=obj[i]||_adapter[i];</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个接口方法，传3个参数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">interfaceMethod</span><span class="params">(a1,a2,a3)</span></span>&#123;</span><br><span class="line">    <span class="comment">// 随便写个弹出框</span></span><br><span class="line">    alert(a1+a2+a3+<span class="string">''</span>);</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 定义一个对象</span></span><br><span class="line"><span class="keyword">var</span> o = &#123;</span><br><span class="line">    s1:<span class="string">'飞狐就是帅'</span>,</span><br><span class="line">    s2:<span class="string">'，撸壕，'</span>,</span><br><span class="line">    s3:<span class="string">'大卫'</span></span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 适配器函数，把传递的对象参数转换为interfaceMethod函数需要的形式</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">adapter</span><span class="params">(o)</span></span>&#123;</span><br><span class="line">    interfaceMethod(o.s1,o.s2,o.s3);</span><br><span class="line">&#125;</span><br><span class="line">adapter(o);    <span class="comment">//飞狐就是帅，撸壕，大卫</span></span><br></pre></td></tr></table></figure><h2 id="数据适配"><a href="#数据适配" class="headerlink" title="数据适配"></a>数据适配</h2><p>往往后端返回的数据格式不是我们想要的格式，通常我们会将数据适配成正确的格式，然后进行操作。例如请求的数据是数组，通过适配模式数据格式变对象<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">var</span> arr = [<span class="string">'javascript'</span>,<span class="string">'book'</span>,<span class="string">'8月1号'</span>,<span class="string">'设计模式'</span>]</span><br></pre></td></tr></table></figure></p><p>数据格式每个成员语义不同，通常转换成对象形式，</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title">adapterData</span>(arr)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="type">&#123;</span></span><br><span class="line">        name:arr[<span class="number">0</span>],</span><br><span class="line">        <span class="keyword">type</span>:arr[<span class="number">1</span>],</span><br><span class="line">        time:arr[<span class="number">2</span>],</span><br><span class="line">        title:arr[<span class="number">3</span>]</span><br><span class="line">        &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>进而将数组转成了下面的格式：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var obj=&#123;</span><br><span class="line">    name:<span class="string">''</span>,</span><br><span class="line">    <span class="built_in">type</span>:<span class="string">''</span>,</span><br><span class="line">    <span class="built_in">time</span>:<span class="string">''</span>,</span><br><span class="line">    title:<span class="string">''</span>,</span><br><span class="line">&#125;</span><br><span class="line">var data = adapterData(arr);</span><br><span class="line">//&#123;name: <span class="string">"javascript"</span>, <span class="built_in">type</span>: <span class="string">"book"</span>, <span class="built_in">time</span>: <span class="string">"8月1号"</span>, title: <span class="string">"设计模式"</span>&#125;</span><br></pre></td></tr></table></figure><h2 id="适配不同库"><a href="#适配不同库" class="headerlink" title="适配不同库"></a>适配不同库</h2><p>Prototype库的$函数到YUI的get方法的转换，网上最多的一个适配器模式的讲解，看例子：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 模拟Prototype，根据id获取DOM元素，不需要传递任何的形参，一个id写一个参数，多个id多个参数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">$</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 定义一个结果数组</span></span><br><span class="line">    <span class="keyword">var</span> elements = [];</span><br><span class="line">    <span class="comment">// 遍历传入参数</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="built_in">arguments</span>.length;i++)&#123;</span><br><span class="line">        <span class="keyword">var</span> element = <span class="built_in">arguments</span>[i];</span><br><span class="line">        <span class="comment">// 判断是否为字符串</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">typeof</span> element ==<span class="string">'string'</span>)&#123;</span><br><span class="line">            element = <span class="built_in">document</span>.getElementById(element);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 判断长度，如果是一个，则返回一个</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">arguments</span>.length==<span class="number">1</span>) <span class="keyword">return</span> element;</span><br><span class="line">        <span class="comment">// 否则加入数组</span></span><br><span class="line">        elements.push(element);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 返回数组</span></span><br><span class="line">    <span class="keyword">return</span> elements;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 模拟雅虎</span></span><br><span class="line"><span class="keyword">var</span> YAHOO = &#123;&#125;;</span><br><span class="line"><span class="comment">// YUI中get只接受一个参数，字符串或数组</span></span><br><span class="line">YAHOO.get = <span class="function"><span class="keyword">function</span>(<span class="params">el</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 判断是否为字符串</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> el == <span class="string">'string'</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">document</span>.getElementById(el);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">// 判断是否为数组</span></span><br><span class="line">    <span class="keyword">if</span>(el <span class="keyword">instanceof</span> <span class="built_in">Array</span>)&#123;</span><br><span class="line">        <span class="keyword">var</span> elements = [] ;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;el.length;i++)&#123;</span><br><span class="line">            elements[elements.length] = YAHOO.get(el[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> elements;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果都不是，直接返回</span></span><br><span class="line">    <span class="keyword">if</span>(el)&#123;</span><br><span class="line">        <span class="keyword">return</span> el;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 否则返回null</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="comment">// YUI适配器</span></span><br><span class="line">YAHOO.get = YUIToPrototypeAdapter;</span><br><span class="line"><span class="comment">// 适配器函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">YUIToPrototypeAdapter</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 对于YUI开发人员来说 永远传递一个参数</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">arguments</span>.length == <span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">var</span> el = <span class="built_in">arguments</span>[<span class="number">0</span>];</span><br><span class="line">        <span class="comment">// 这里判断是否为数组，如果是直接返回，否则包装成数组返回，如："a"，包装后["a"]</span></span><br><span class="line">        <span class="keyword">return</span> $.apply(<span class="built_in">window</span>,el <span class="keyword">instanceof</span> <span class="built_in">Array</span>?el:[el]);</span><br><span class="line">     &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">         <span class="comment">// 如果是多个参数的情况,这里只能用apply，不能用call</span></span><br><span class="line">         <span class="keyword">return</span> $.apply(<span class="built_in">window</span>,<span class="built_in">arguments</span>);</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试数组的情况</span></span><br><span class="line"><span class="keyword">var</span> arr = YAHOO.get([<span class="string">'fox1'</span>,<span class="string">'fox2'</span>,<span class="string">'fox3'</span>]);</span><br><span class="line">alert(arr);</span><br><span class="line"><span class="comment">// 测试多个参数的情况</span></span><br><span class="line"><span class="keyword">var</span> arr = YAHOO.get(<span class="string">'fox1'</span>,<span class="string">'fox2'</span>,<span class="string">'fox3'</span>);</span><br><span class="line">alert(arr);</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=&quot;\assets\js\APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;h2 id=&quot;适配器模式介绍&quot;&gt;&lt;a href=&quot;#适配器模式介绍&quot; class=&quot;headerlink&quot; title=&quot;适配器模式介绍&quot;&gt;&lt;/a&gt;适配器模式介绍&lt;/h2&gt;&lt;p&gt;
      
    
    </summary>
    
      <category term="JavaScript" scheme="https://chongdee.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://chongdee.github.io/tags/JavaScript/"/>
    
      <category term="JS设计模式" scheme="https://chongdee.github.io/tags/JS%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>js设计-装饰者模式</title>
    <link href="https://chongdee.github.io/2018/10/31/js%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%A3%85%E9%A5%B0%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    <id>https://chongdee.github.io/2018/10/31/js设计模式-装饰者模式/</id>
    <published>2018-10-31T13:39:32.000Z</published>
    <updated>2018-11-02T03:56:14.904Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2 id="装饰者模式"><a href="#装饰者模式" class="headerlink" title="装饰者模式"></a>装饰者模式</h2><p>定义：装饰者(decorator)模式能够在不改变对象自身的基础上，在程序运行期间给对象动态的添加职责。<br>装饰者用于通过重载方法的形式添加新功能，该模式可以在被装饰者前面或者后面加上自己的行为以达到特定的目的。<br>与继承相比，装饰者是一种更轻便灵活的做法。</p><p>普通对象被装饰者包裹起来，就形成了装饰者模式。<br>举例：<br>雷霆战机（吃道具的例子）<br><a id="more"></a></p><h2 id="雷霆战机（吃道具的例子）"><a href="#雷霆战机（吃道具的例子）" class="headerlink" title="雷霆战机（吃道具的例子）"></a>雷霆战机（吃道具的例子）</h2><p>介绍：现在我们假设正在开发一个小游戏–雷霆战机，<br>最开始我们使用最渣的飞机，只能发射普通子弹；<br>吃一颗星，可以发射普通子弹和发射散弹 ；<br>再吃一颗，可以发射普通子弹和散弹和跟踪导弹。<br><strong>一级飞机</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> plane = &#123;</span><br><span class="line">fire: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'发射普通子弹'</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">plane.fire(); <span class="comment">// '发射普通子弹'</span></span><br></pre></td></tr></table></figure></p><p><strong>二级飞机</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fire1 = plane.fire;</span><br><span class="line"><span class="keyword">var</span> shot = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'发射散弹'</span>);</span><br><span class="line">&#125;;</span><br><span class="line">plane.fire = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">fire1();</span><br><span class="line">shot();</span><br><span class="line">&#125;;</span><br><span class="line">plane.fire(); <span class="comment">// '发射普通子弹' '发射散弹'</span></span><br></pre></td></tr></table></figure></p><p><strong>三级飞机</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fire2 = plane.fire;</span><br><span class="line"><span class="keyword">var</span> track = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'发射跟踪导弹'</span>);</span><br><span class="line">&#125;;</span><br><span class="line">plane.fire = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">fire2(); <span class="comment">// fire1(),shot()</span></span><br><span class="line">track();</span><br><span class="line">&#125;;</span><br><span class="line">plane.fire(); <span class="comment">// '发射普通子弹' '发射散弹' '发射跟踪导弹'</span></span><br></pre></td></tr></table></figure></p><blockquote><p>这样给对象动态的增加职责的方式就没有改变对象自身，一个对象放入另一个对象就形成了一条装饰链（一个聚合对象）， 而上面的shot和track也就是装饰者、装饰函数 ，当函数执行时，会把请求转给链中的下一个对象。</p></blockquote><p><strong>装饰函数， 很多时候我们在修改别人的代码时，会改动window.onload里的东西，但是直接修改别人的代码太多，容易出错，所以我们可以用下面这个方式来修改,通过以下方式，我们可以很轻松的在onload的函数里插入自己的方法，而不会影响别人的方法</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">   <span class="comment">// 别人的代码</span></span><br><span class="line">   <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">       <span class="built_in">console</span>.log(<span class="string">'别人的代码'</span>)</span><br><span class="line">   &#125;</span><br><span class="line"><span class="keyword">var</span> _onload = <span class="built_in">window</span>.onload || <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">   <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">       _onload()</span><br><span class="line">       <span class="built_in">console</span>.log(<span class="string">'自己的代码'</span>)</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><blockquote><p>面向切面的AOP编程，因为函数在js里是一等对象，所以，我们可以给函数原型添加我们需要执行的方法</p></blockquote><p><strong>在原函数之前执行</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.before = <span class="function"><span class="keyword">function</span> (<span class="params">fn</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> self = <span class="keyword">this</span> <span class="comment">// 原函数</span></span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;  <span class="comment">// 返回一个新函数，该函数先执行fn函数，再执行原函数</span></span><br><span class="line">            fn.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>)  <span class="comment">// fn函数</span></span><br><span class="line">            <span class="keyword">return</span> self.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>)  <span class="comment">// 原函数</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> f1 = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="number">2</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> f1 = f1.before(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    f1()  <span class="comment">// 1   2</span></span><br></pre></td></tr></table></figure></p><p>仔细观察上面的方法，我们可以看到，fn函数和原函数使用的都是一个arguments，所以，我们可以在fn函数里修改arguments，使原函数直接使用修改过的arguments，例如<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">        a: <span class="string">'a'</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> f1 = <span class="function"><span class="keyword">function</span> (<span class="params">params</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(params)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> f1 = f1.before(<span class="function"><span class="keyword">function</span> (<span class="params">params</span>) </span>&#123;</span><br><span class="line">        params.b = <span class="string">'b'</span>  <span class="comment">// 给obj添加b属性</span></span><br><span class="line">    &#125;)</span><br><span class="line">    f1(obj)  <span class="comment">// &#123;a: "a", b: "b"&#125;</span></span><br></pre></td></tr></table></figure></p><blockquote><p>我们添加了一个obj，可以看到，before里，给obj添加了一个b属性，因为before里的fn和f1用的是同一个参数</p></blockquote><p><strong>在原函数之后执行</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.after = <span class="function"><span class="keyword">function</span>(<span class="params">afterfn</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> _this = <span class="keyword">this</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> ret = _this.apply(<span class="keyword">this</span>,<span class="built_in">arguments</span>);</span><br><span class="line">afterfn.apply(<span class="keyword">this</span>,<span class="built_in">arguments</span>);</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h2 id="封装成单独函数（不污染原型）"><a href="#封装成单独函数（不污染原型）" class="headerlink" title="封装成单独函数（不污染原型）"></a>封装成单独函数（不污染原型）</h2><p><strong>在原函数之前执行</strong><br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var <span class="keyword">before</span> = <span class="title">function</span>(fn, <span class="keyword">before</span>) &#123;</span><br><span class="line"><span class="function"><span class="keyword">return</span> <span class="title">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">before</span>.<span class="title">apply</span>(this, arguments);</span><br><span class="line"><span class="function"><span class="keyword">return</span> fn.<span class="title">apply</span><span class="params">(<span class="keyword">this</span>, arguments)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line"><span class="keyword">before</span>(func1, func2);</span><br></pre></td></tr></table></figure></p><p><strong> 在原函数之后执行</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> after = <span class="function"><span class="keyword">function</span>(<span class="params">fn, after</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> ret = fn.apply(<span class="keyword">this</span>,<span class="built_in">arguments</span>);</span><br><span class="line">after.apply(<span class="keyword">this</span>,<span class="built_in">arguments</span>);</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line">after(func1, func2);</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;装饰者模式&quot;&gt;&lt;a href=&quot;#装饰者模式&quot; class=&quot;headerlink&quot; title=&quot;装饰者模式&quot;&gt;&lt;/a&gt;装饰者模式&lt;/h2&gt;&lt;p&gt;定义：装饰者(decorator)模式能够在不改变对象自身的基础上，在程序运行期间给对象动态的添加职责。&lt;br&gt;装饰者用于通过重载方法的形式添加新功能，该模式可以在被装饰者前面或者后面加上自己的行为以达到特定的目的。&lt;br&gt;与继承相比，装饰者是一种更轻便灵活的做法。&lt;/p&gt;
&lt;p&gt;普通对象被装饰者包裹起来，就形成了装饰者模式。&lt;br&gt;举例：&lt;br&gt;雷霆战机（吃道具的例子）&lt;br&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="https://chongdee.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://chongdee.github.io/tags/JavaScript/"/>
    
      <category term="JS设计模式" scheme="https://chongdee.github.io/tags/JS%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>js设计模式-中介模式</title>
    <link href="https://chongdee.github.io/2018/10/31/js%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E4%B8%AD%E4%BB%8B%E6%A8%A1%E5%BC%8F/"/>
    <id>https://chongdee.github.io/2018/10/31/js设计模式-中介模式/</id>
    <published>2018-10-31T13:38:36.000Z</published>
    <updated>2018-11-01T09:34:52.140Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2 id="中介者模式"><a href="#中介者模式" class="headerlink" title="中介者模式"></a>中介者模式</h2><p>定义：中介者模式的作用就是解除对象与对象之间的紧耦合关系。增加一个中介者对象后，<br>所有的相关对象都通过中介者对象来通信，而不是互相引用，所以当一个对象发生改变时，<br>只需要通知中介者对象即可。中介者使各对象之间耦合松散，而且可以独立地改变它们之间的交互。<br>中介者模式使网状的多对多关系变成了相对简单的一对多关系。<br>举例：<br>手机购买页面（颜色、数量、内存、价格）<br>MVC模式（控制层便是位于表现层与模型层之间的中介者。）<br>我们应该很熟悉 MVC 三层模型实体模型（Model）、视图表现层（View）还有控制层（Control/Mediator）。<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="markdown">/<span class="emphasis">** 模擬 Model, View, Controller *</span>/</span></span></span><br><span class="line"><span class="keyword">var</span> M = &#123;&#125;, V = &#123;&#125;, C = &#123;&#125;;</span><br><span class="line"><span class="comment"><span class="markdown">/<span class="emphasis">** Model 负责存放资料*</span>/</span></span></span><br><span class="line">M.data = <span class="string">"hello world"</span>;</span><br><span class="line"><span class="comment"><span class="markdown">/<span class="emphasis">** View  负责将资料输出到页面*</span>/</span></span></span><br><span class="line">V.render = (M) =&gt; &#123; alert(M.data); &#125;</span><br><span class="line"><span class="comment"><span class="markdown">/<span class="emphasis">** Controller  作为一个M和V的桥梁*</span>/</span></span></span><br><span class="line">C.handleOnload = () =&gt; &#123; V.render(M); &#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.onload = C.handleOnload;</span><br></pre></td></tr></table></figure></p><a id="more"></a><p>MVC 模式中的Control/Mediator 层，就是本设计模式的中介者 (它必须拿到 View 和 Model 的引用)。</p><h2 id="手机购买页面"><a href="#手机购买页面" class="headerlink" title="手机购买页面"></a>手机购买页面</h2><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">选择颜色: </span><br><span class="line">&lt;<span class="keyword">select</span> id=<span class="string">"colorSelect"</span>&gt;</span><br><span class="line">&lt;option <span class="keyword">value</span>=<span class="string">""</span>&gt;请选择&lt;/option&gt;</span><br><span class="line">&lt;option <span class="keyword">value</span>=<span class="string">"red"</span>&gt;红色&lt;/option&gt;</span><br><span class="line">&lt;option <span class="keyword">value</span>=<span class="string">"blue"</span>&gt;蓝色&lt;/option&gt;</span><br><span class="line">&lt;/<span class="keyword">select</span>&gt;</span><br><span class="line">选择内存: </span><br><span class="line">&lt;<span class="keyword">select</span> id=<span class="string">"memorySelect"</span>&gt;</span><br><span class="line">&lt;option <span class="keyword">value</span>=<span class="string">""</span>&gt;请选择&lt;/option&gt;</span><br><span class="line">&lt;option <span class="keyword">value</span>=<span class="string">"32G"</span>&gt;<span class="number">32</span>G&lt;/option&gt;</span><br><span class="line">&lt;option <span class="keyword">value</span>=<span class="string">"16G"</span>&gt;<span class="number">16</span>G&lt;/option&gt;</span><br><span class="line">&lt;/<span class="keyword">select</span>&gt;</span><br><span class="line">输入购买数量: &lt;input type=<span class="string">"text"</span> id=<span class="string">"numberInput"</span>/&gt;&lt;br/&gt;</span><br><span class="line">&lt;!--输入部分结束--&gt;</span><br><span class="line"></span><br><span class="line">您选择了颜色: &lt;div id=<span class="string">"colorInfo"</span>&gt;&lt;/div&gt;&lt;br/&gt;</span><br><span class="line">您选择了内存: &lt;div id=<span class="string">"memoryInfo"</span>&gt;&lt;/div&gt;&lt;br/&gt;</span><br><span class="line">您输入了数量: &lt;div id=<span class="string">"numberInfo"</span>&gt;&lt;/div&gt;&lt;br/&gt;</span><br><span class="line">&lt;button id=<span class="string">"nextBtn"</span> disabled=<span class="string">"true"</span>&gt;请选择手机颜色和购买数量&lt;/button&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 各种手机库存（通常来自于后端，这里前端进行模拟）</span></span><br><span class="line"><span class="keyword">var</span> goods = &#123; </span><br><span class="line"><span class="string">"red|32G"</span>: <span class="number">3</span>,</span><br><span class="line"><span class="string">"red|16G"</span>: <span class="number">0</span>,</span><br><span class="line"><span class="string">"blue|32G"</span>: <span class="number">1</span>,</span><br><span class="line"><span class="string">"blue|16G"</span>: <span class="number">6</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 中介者</span></span><br><span class="line"><span class="keyword">var</span> mediator = (function()&#123;</span><br><span class="line"><span class="comment">// 获得所有节点的引用，以便对其进行操作（中介者必许获得对其他对象的引用）</span></span><br><span class="line"><span class="keyword">var</span> colorSelect = document.getElementById( <span class="string">'colorSelect'</span> ),</span><br><span class="line">memorySelect = document.getElementById( <span class="string">'memorySelect'</span> ),</span><br><span class="line">numberInput = document.getElementById( <span class="string">'numberInput'</span> ),</span><br><span class="line">colorInfo = document.getElementById( <span class="string">'colorInfo'</span> ),</span><br><span class="line">memoryInfo = document.getElementById( <span class="string">'memoryInfo'</span> ),</span><br><span class="line">numberInfo = document.getElementById( <span class="string">'numberInfo'</span> ),</span><br><span class="line">nextBtn = document.getElementById( <span class="string">'nextBtn'</span> );</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line">changed( obj )&#123;</span><br><span class="line"><span class="keyword">var</span> color = colorSelect.<span class="keyword">value</span>, <span class="comment">// 颜色</span></span><br><span class="line">memory = memorySelect.<span class="keyword">value</span>,<span class="comment">// 内存</span></span><br><span class="line">number = numberInput.<span class="keyword">value</span>, <span class="comment">// 数量</span></span><br><span class="line">stock = goods[ color + <span class="string">'|'</span> + memory ]; <span class="comment">// 颜色和内存对应的手机库存数量</span></span><br><span class="line"><span class="keyword">if</span> ( obj === colorSelect )&#123; <span class="comment">// 如果改变的是选择颜色下拉框</span></span><br><span class="line">colorInfo.innerHTML = color;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span> ( obj === memorySelect )&#123;</span><br><span class="line">memoryInfo.innerHTML = memory;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span> ( obj === numberInput )&#123;</span><br><span class="line">numberInfo.innerHTML = number;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ( !color )&#123;</span><br><span class="line">nextBtn.disabled = <span class="literal">true</span>;</span><br><span class="line">nextBtn.innerHTML = <span class="string">'请选择手机颜色'</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ( !memory )&#123;</span><br><span class="line">nextBtn.disabled = <span class="literal">true</span>;</span><br><span class="line">nextBtn.innerHTML = <span class="string">'请选择内存大小'</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ( ( ( number - <span class="number">0</span> ) | <span class="number">0</span> ) !== number - <span class="number">0</span> )&#123; <span class="comment">// 输入购买数量是否为正整数</span></span><br><span class="line">nextBtn.disabled = <span class="literal">true</span>;</span><br><span class="line">nextBtn.innerHTML = <span class="string">'请输入正确的购买数量'</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">nextBtn.disabled = <span class="literal">false</span>;</span><br><span class="line">nextBtn.innerHTML = <span class="string">'放入购物车'</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)();</span><br><span class="line"><span class="comment">// 与中介者联系起来，事件函数</span></span><br><span class="line">colorSelect.onchange = function()&#123;</span><br><span class="line">mediator.changed( <span class="keyword">this</span> );</span><br><span class="line">&#125;;</span><br><span class="line">memorySelect.onchange = function()&#123;</span><br><span class="line">mediator.changed( <span class="keyword">this</span> );</span><br><span class="line">&#125;;</span><br><span class="line">numberInput.oninput = function()&#123;</span><br><span class="line">mediator.changed( <span class="keyword">this</span> );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这里共有手机颜色、手机内存、手机数量的选择和展示共6个对象，和一个中介者对象。<br>中介者必须获得这6个对象的应用，当每个对象发生变化时都需要通知中介者，中介者再来执行具体操作。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;中介者模式&quot;&gt;&lt;a href=&quot;#中介者模式&quot; class=&quot;headerlink&quot; title=&quot;中介者模式&quot;&gt;&lt;/a&gt;中介者模式&lt;/h2&gt;&lt;p&gt;定义：中介者模式的作用就是解除对象与对象之间的紧耦合关系。增加一个中介者对象后，&lt;br&gt;所有的相关对象都通过中介者对象来通信，而不是互相引用，所以当一个对象发生改变时，&lt;br&gt;只需要通知中介者对象即可。中介者使各对象之间耦合松散，而且可以独立地改变它们之间的交互。&lt;br&gt;中介者模式使网状的多对多关系变成了相对简单的一对多关系。&lt;br&gt;举例：&lt;br&gt;手机购买页面（颜色、数量、内存、价格）&lt;br&gt;MVC模式（控制层便是位于表现层与模型层之间的中介者。）&lt;br&gt;我们应该很熟悉 MVC 三层模型实体模型（Model）、视图表现层（View）还有控制层（Control/Mediator）。&lt;br&gt;&lt;figure class=&quot;highlight dart&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&lt;span class=&quot;markdown&quot;&gt;/&lt;span class=&quot;emphasis&quot;&gt;** 模擬 Model, View, Controller *&lt;/span&gt;/&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; M = &amp;#123;&amp;#125;, V = &amp;#123;&amp;#125;, C = &amp;#123;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&lt;span class=&quot;markdown&quot;&gt;/&lt;span class=&quot;emphasis&quot;&gt;** Model 负责存放资料*&lt;/span&gt;/&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;M.data = &lt;span class=&quot;string&quot;&gt;&quot;hello world&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&lt;span class=&quot;markdown&quot;&gt;/&lt;span class=&quot;emphasis&quot;&gt;** View  负责将资料输出到页面*&lt;/span&gt;/&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;V.render = (M) =&amp;gt; &amp;#123; alert(M.data); &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&lt;span class=&quot;markdown&quot;&gt;/&lt;span class=&quot;emphasis&quot;&gt;** Controller  作为一个M和V的桥梁*&lt;/span&gt;/&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;C.handleOnload = () =&amp;gt; &amp;#123; V.render(M); &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.onload = C.handleOnload;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="https://chongdee.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://chongdee.github.io/tags/JavaScript/"/>
    
      <category term="JS设计模式" scheme="https://chongdee.github.io/tags/JS%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>js设计模式-代理模式</title>
    <link href="https://chongdee.github.io/2018/10/31/js%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/"/>
    <id>https://chongdee.github.io/2018/10/31/js设计模式-代理模式/</id>
    <published>2018-10-31T13:38:04.000Z</published>
    <updated>2018-11-01T09:27:22.556Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h2><p>定义：为一个对象提供一个代用品或占位符，以便控制对它的访问。<br>代理对象和本体对象实现了同样的接口，并且会把任何方法调用传递给本体对象；<br>举例：<br>图片预加载、图片懒加载、<br>合并HTTP请求（代理收集一定时间内的所有HTTP请求，然后一次性发给服务器）、<br>惰性加载（通过代理处理和收集一些基本操作，然后仅在真正需要本体的时候才加载本体）、<br>缓存代理（缓存请求结果、计算结果）<br><a id="more"></a></p><h2 id="缓存代理"><a href="#缓存代理" class="headerlink" title="缓存代理"></a>缓存代理</h2><p>缓存代理可以作为一些开销大的运算结果提供暂时的存储，下次运算时，如果传递进来的参数跟之前一致，则可以直接返回前面存储的运算结果<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 先实现具体的两个算法</span></span><br><span class="line"><span class="keyword">const</span> mult = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">let</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="built_in">arguments</span>.length; i++) &#123;</span><br><span class="line">a *= <span class="built_in">arguments</span>[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> a;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> plus = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">let</span> a = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="built_in">arguments</span>.length; i++) &#123;</span><br><span class="line">a += <span class="built_in">arguments</span>[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> a;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 创建缓存代理</span></span><br><span class="line"><span class="keyword">const</span> createProxyFactory = <span class="function"><span class="keyword">function</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line"><span class="keyword">let</span> cache = &#123;&#125;; <span class="comment">// 保存计算的结果</span></span><br><span class="line"><span class="comment">// 使用闭包在内存中保留对cache的引用</span></span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">let</span> args = <span class="built_in">Array</span>.from(<span class="built_in">arguments</span>).join(<span class="string">','</span>); <span class="comment">// 将所有参数转化为字符串作为缓存的 key</span></span><br><span class="line"><span class="keyword">if</span> (args <span class="keyword">in</span> cache) &#123;</span><br><span class="line"><span class="keyword">return</span> cache[args];</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> cache[args] = fn.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 使用代理对象</span></span><br><span class="line"><span class="keyword">const</span> proxyMult = createProxyFactory(mult);</span><br><span class="line"><span class="keyword">const</span> proxyPlus = createProxyFactory(plus);</span><br><span class="line"><span class="built_in">console</span>.log(proxyMult(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)); <span class="comment">// 24</span></span><br><span class="line"><span class="built_in">console</span>.log(proxyPlus(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)); <span class="comment">// 10</span></span><br></pre></td></tr></table></figure></p><h2 id="虚拟代理"><a href="#虚拟代理" class="headerlink" title="虚拟代理"></a>虚拟代理</h2><p>虚拟代理：某一个花销很大的操作，可以通过虚拟代理的方式延迟到这种需要它的时候才去创建<br>例：使用虚拟代理实现图片懒加载<br><figure class="highlight scilab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这里是html的代码，</span></span><br><span class="line">&lt;ul&gt;</span><br><span class="line">    &lt;li&gt;&lt;img src=<span class="string">"./img/loading.gif"</span> data-url=<span class="string">"./img/1.jpg"</span>/&gt;&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;&lt;img src=<span class="string">"./img/loading.gif"</span> data-url=<span class="string">"./img/2.jpg"</span>/&gt;&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;&lt;img src=<span class="string">"./img/loading.gif"</span> data-url=<span class="string">"./img/3.jpg"</span>/&gt;&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;&lt;img src=<span class="string">"./img/loading.gif"</span> data-url=<span class="string">"./img/4.jpg"</span>/&gt;&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;&lt;img src=<span class="string">"./img/loading.gif"</span> data-url=<span class="string">"./img/5.jpg"</span>/&gt;&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;&lt;img src=<span class="string">"./img/loading.gif"</span> data-url=<span class="string">"./img/6.jpg"</span>/&gt;&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;<span class="comment">// ...省略很多的图片</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 这里开始是js代码，没有写script，只是简单的模拟</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> $<span class="params">(t)</span>&#123;</span></span><br><span class="line">    <span class="keyword">return</span> document.getElementsByTagName(t);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取id</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">lazyLoad</span><span class="params">(el)</span> &#123;</span></span><br><span class="line">    <span class="comment">// 遍历需要加载的图片元素</span></span><br><span class="line">    <span class="keyword">for</span> (var i = <span class="number">0</span>, len = el.<span class="built_in">length</span>; i &lt; len; i++) &#123;</span><br><span class="line">        <span class="comment">// 根据class属性判断是否已经加载过</span></span><br><span class="line">        <span class="keyword">if</span> (el[i].className != <span class="string">"load"</span>) &#123;</span><br><span class="line">            <span class="comment">// 这里就是获取data-url的值，也就是真实图片路径，替代loading图片</span></span><br><span class="line">            el[i].src = el[i].getAttribute(<span class="string">"data-url"</span>);</span><br><span class="line">            <span class="comment">// 替代后加一个class属性已经加载过的标记</span></span><br><span class="line">            el[i].className = <span class="string">"load"</span>; </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 滚动时执行</span></span><br><span class="line">window.onscroll = <span class="function"><span class="keyword">function</span><span class="params">()</span> &#123; </span></span><br><span class="line">    lazyLoad($(<span class="string">"img"</span>));</span><br><span class="line">&#125;;</span><br><span class="line"> <span class="comment">// 加载后执行</span></span><br><span class="line">window.onload = <span class="function"><span class="keyword">function</span><span class="params">()</span> &#123;</span></span><br><span class="line">    lazyLoad($(<span class="string">"img"</span>));</span><br><span class="line">&#125;; </span><br><span class="line"></span><br><span class="line">-------------------------------------------------------------</span><br><span class="line"><span class="comment">// 本体对象</span></span><br><span class="line">const imgFunc = (<span class="function"><span class="keyword">function</span><span class="params">()</span> &#123;</span></span><br><span class="line">const imgNode = document.createElement(<span class="string">'img'</span>);</span><br><span class="line">document.body.appendChild(imgNode);</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line">setSrc(src)&#123;</span><br><span class="line">imgNode.src = src;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)();</span><br><span class="line"><span class="comment">// 代理对象</span></span><br><span class="line">const proxyImage = (<span class="function"><span class="keyword">function</span><span class="params">()</span> &#123;</span></span><br><span class="line">const img = new Image();</span><br><span class="line">img.onload = <span class="function"><span class="keyword">function</span><span class="params">()</span> &#123;</span></span><br><span class="line">imgFunc.setSrc(this.src);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line">setSrc(src)&#123;</span><br><span class="line">imgFunc.setSrc(<span class="string">'./loading.gif'</span>);</span><br><span class="line">img.src = src;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;)();</span><br><span class="line"><span class="comment">// 使用代理对象</span></span><br><span class="line">proxyImage.setSrc(<span class="string">'./reality.png'</span>);</span><br></pre></td></tr></table></figure></p><blockquote><p>图片懒加载的方式：先通过一张loading图占位，然后通过异步的方式加载图片，等图片加载好了再把完成的图片加载到img标签里面。<br>这里讲述一下代理对象做了那些事：<br>1.创建了一个 Image 对象，并为其绑定了 onload 事件。<br>2.将 imgNode 先设置为 ‘./loading.gif’ 加载的菊花图。<br>3.当 Image 对象加载完真实的图片，也就是上文的 ‘./reality.png’ ,将 imgNode 设置为 ‘./reality.png’。</p></blockquote><h2 id="合并http请求"><a href="#合并http请求" class="headerlink" title="合并http请求"></a>合并http请求</h2><p>如果有一个功能需要频繁进行请求操作，这样开销比较大，可以通过一个代理函数收集一段时间内请求数据，一次性发出<br><figure class="highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//上传请求</span></span><br><span class="line"><span class="keyword">let</span> upload = <span class="function"><span class="keyword">function</span>(<span class="params">ids</span>)</span>&#123;</span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">        <span class="attribute">data</span>: &#123;</span><br><span class="line">            <span class="attribute">id:</span><span class="string">ids</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//代理合并请求</span></span><br><span class="line"><span class="keyword">let</span> proxy = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> cache = [],</span><br><span class="line">        timer = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">id</span>)</span>&#123;</span><br><span class="line">        cache[cache.length] = id;</span><br><span class="line">        <span class="keyword">if</span>(timer) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        timer = setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            upload(cache.join(<span class="string">','</span>));</span><br><span class="line">            clearTimeout(timer);</span><br><span class="line">            timer = <span class="literal">null</span>;</span><br><span class="line">            cache = [];</span><br><span class="line">        &#125;,<span class="number">2000</span>);</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;)();</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 绑定点击事件</span></span><br><span class="line"><span class="keyword">let</span> checkbox = <span class="built_in">document</span>.getElementsByTagName( <span class="string">"input"</span> );</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i= <span class="number">0</span>, c; c = checkbox[i++];)&#123;</span><br><span class="line">    c.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.checked === <span class="literal">true</span>)&#123;</span><br><span class="line">            proxy(<span class="keyword">this</span>.id);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="代理模式优缺点"><a href="#代理模式优缺点" class="headerlink" title="代理模式优缺点"></a>代理模式优缺点</h2><ul><li>优点：代理模式能将代理对象与被调用对象分离，降低了系统的耦合度。代理模式在客户端和目标对象之间起到一个中介作用，这样可以起到保护目标对象的作用。代理对象也可以对目标对象调用之前进行其他操作。</li><li>缺点：增加了系统的复杂度</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;代理模式&quot;&gt;&lt;a href=&quot;#代理模式&quot; class=&quot;headerlink&quot; title=&quot;代理模式&quot;&gt;&lt;/a&gt;代理模式&lt;/h2&gt;&lt;p&gt;定义：为一个对象提供一个代用品或占位符，以便控制对它的访问。&lt;br&gt;代理对象和本体对象实现了同样的接口，并且会把任何方法调用传递给本体对象；&lt;br&gt;举例：&lt;br&gt;图片预加载、图片懒加载、&lt;br&gt;合并HTTP请求（代理收集一定时间内的所有HTTP请求，然后一次性发给服务器）、&lt;br&gt;惰性加载（通过代理处理和收集一些基本操作，然后仅在真正需要本体的时候才加载本体）、&lt;br&gt;缓存代理（缓存请求结果、计算结果）&lt;br&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="https://chongdee.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://chongdee.github.io/tags/JavaScript/"/>
    
      <category term="JS设计模式" scheme="https://chongdee.github.io/tags/JS%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>js设计模式-发布订阅模式</title>
    <link href="https://chongdee.github.io/2018/10/31/js%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85%E6%A8%A1%E5%BC%8F/"/>
    <id>https://chongdee.github.io/2018/10/31/js设计模式-发布订阅模式/</id>
    <published>2018-10-31T13:33:54.000Z</published>
    <updated>2018-11-02T06:43:48.464Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2 id="发布-订阅模式（观察者模式）"><a href="#发布-订阅模式（观察者模式）" class="headerlink" title="发布-订阅模式（观察者模式）"></a>发布-订阅模式（观察者模式）</h2><p>定义：对象间的一种一对多的关系，让多个观察者对象同时监听某一个主题对象，当一个对象发生改变时，所有依赖于它的对象都将得到通知。</p><h2 id="现实生活中的发布-订阅模式"><a href="#现实生活中的发布-订阅模式" class="headerlink" title="现实生活中的发布-订阅模式"></a>现实生活中的发布-订阅模式</h2><p>比如小红最近在淘宝网上看上一双鞋子，但是呢 联系到卖家后，才发现这双鞋卖光了，但是小红对这双鞋又非常喜欢，所以呢联系卖家，问卖家什么时候有货，卖家告诉她，要等一个星期后才有货，卖家告诉小红，要是你喜欢的话，你可以收藏我们的店铺，等有货的时候再通知你，所以小红收藏了此店铺，但与此同时，小明，小花等也喜欢这双鞋，也收藏了该店铺；等来货的时候就依次会通知他们。在上面的故事中，可以看出是一个典型的发布订阅模式，卖家是属于发布者，小红，小明等属于订阅者，订阅该店铺，卖家作为发布者，当鞋子到了的时候，会依次通知小明，小红等，依次使用旺旺等工具给他们发布消息。<br><a id="more"></a></p><h2 id="实现发布-订阅模式的步骤"><a href="#实现发布-订阅模式的步骤" class="headerlink" title="实现发布-订阅模式的步骤"></a>实现发布-订阅模式的步骤</h2><ol><li>首先要想好谁是发布者(比如上面的卖家)。</li><li>然后给发布者添加一个缓存列表，用于存放回调函数来通知订阅者(比如上面的买家收藏了卖家的店铺，卖家通过收藏了该店铺的一个列表名单)。</li><li>最后就是发布消息，发布者遍历这个缓存列表，依次触发里面存放的订阅者回调函数。</li></ol><figure class="highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> shoeObj = &#123;&#125;; <span class="comment">// 定义发布者</span></span><br><span class="line">shoeObj.list = []; <span class="comment">// 缓存列表 存放订阅者回调函数</span></span><br><span class="line">        </span><br><span class="line"><span class="comment">// 增加订阅者</span></span><br><span class="line">shoeObj.listen = <span class="function"><span class="keyword">function</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">    shoeObj.list.push(fn);  <span class="comment">// 订阅消息添加到缓存列表</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 发布消息</span></span><br><span class="line">shoeObj.trigger = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>,fn; fn = <span class="keyword">this</span>.list[i++];) &#123;</span><br><span class="line">        fn.apply(<span class="keyword">this</span>,<span class="built_in">arguments</span>); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 小红订阅如下消息</span></span><br><span class="line">shoeObj.listen(<span class="function"><span class="keyword">function</span>(<span class="params">color,size</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"颜色是："</span>+<span class="built_in">color</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"尺码是："</span>+<span class="built_in">size</span>);  </span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 小花订阅如下消息</span></span><br><span class="line">shoeObj.listen(<span class="function"><span class="keyword">function</span>(<span class="params">color,size</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"再次打印颜色是："</span>+<span class="built_in">color</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"再次打印尺码是："</span>+<span class="built_in">size</span>); </span><br><span class="line">&#125;);</span><br><span class="line">shoeObj.trigger(<span class="string">"红色"</span>,<span class="number">40</span>);</span><br><span class="line">shoeObj.trigger(<span class="string">"黑色"</span>,<span class="number">42</span>);</span><br></pre></td></tr></table></figure><p>我们看到订阅者接收到发布者的每个消息，但是呢，对于小红来说，她只想接收颜色为红色的消息，不想接收颜色为黑色的消息，为此我们需要对代码进行如下改造下，我们可以先增加一个key，使订阅者只订阅自己感兴趣的消息。</p><figure class="highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> shoeObj = &#123;&#125;; <span class="comment">// 定义发布者</span></span><br><span class="line">shoeObj.list = []; <span class="comment">// 缓存列表 存放订阅者回调函数</span></span><br><span class="line">        </span><br><span class="line"><span class="comment">// 增加订阅者</span></span><br><span class="line">shoeObj.listen = <span class="function"><span class="keyword">function</span>(<span class="params">key,fn</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="keyword">this</span>.list[key]) &#123;</span><br><span class="line">        <span class="comment">// 如果还没有订阅过此类消息，给该类消息创建一个缓存列表</span></span><br><span class="line">        <span class="keyword">this</span>.list[key] = []; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.list[key].push(fn);  <span class="comment">// 订阅消息添加到缓存列表</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 发布消息</span></span><br><span class="line">shoeObj.trigger = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> key = <span class="built_in">Array</span>.prototype.shift.call(<span class="built_in">arguments</span>); <span class="comment">// 取出消息类型名称</span></span><br><span class="line">    <span class="keyword">var</span> fns = <span class="keyword">this</span>.list[key];  <span class="comment">// 取出该消息对应的回调函数的集合</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果没有订阅过该消息的话，则返回</span></span><br><span class="line">    <span class="keyword">if</span>(!fns || fns.length === <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>,fn; fn = fns[i++]; ) &#123;</span><br><span class="line">        fn.apply(<span class="keyword">this</span>,<span class="built_in">arguments</span>); <span class="comment">// arguments 是发布消息时附送的参数</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 小红订阅如下消息</span></span><br><span class="line">shoeObj.listen(<span class="string">'red'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">size</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"尺码是："</span>+<span class="built_in">size</span>);  </span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 小花订阅如下消息</span></span><br><span class="line">shoeObj.listen(<span class="string">'block'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">size</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"再次打印尺码是："</span>+<span class="built_in">size</span>); </span><br><span class="line">&#125;);</span><br><span class="line">shoeObj.trigger(<span class="string">"red"</span>,<span class="number">40</span>);</span><br><span class="line">shoeObj.trigger(<span class="string">"block"</span>,<span class="number">42</span>);</span><br></pre></td></tr></table></figure><h2 id="发布—订阅模式的代码封装"><a href="#发布—订阅模式的代码封装" class="headerlink" title="发布—订阅模式的代码封装"></a>发布—订阅模式的代码封装</h2><p>我们知道，对于上面的代码，小红去买鞋这么一个对象shoeObj 进行订阅，但是如果以后我们需要对买房子或者其他的对象进行订阅呢，我们需要复制上面的代码，再重新改下里面的对象代码；为此我们需要进行代码封装；</p><p>如下代码封装：<br><figure class="highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> event = &#123;</span><br><span class="line">    <span class="attribute">list</span>: [],</span><br><span class="line">    <span class="attribute">listen</span>: <span class="function"><span class="keyword">function</span>(<span class="params">key,fn</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="keyword">this</span>.list[key]) &#123;</span><br><span class="line">            <span class="keyword">this</span>.list[key] = [];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 订阅的消息添加到缓存列表中</span></span><br><span class="line">        <span class="keyword">this</span>.list[key].push(fn);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attribute">trigger</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> key = <span class="built_in">Array</span>.prototype.shift.call(<span class="built_in">arguments</span>);</span><br><span class="line">        <span class="keyword">var</span> fns = <span class="keyword">this</span>.list[key];</span><br><span class="line">        <span class="comment">// 如果没有订阅过该消息的话，则返回</span></span><br><span class="line">        <span class="keyword">if</span>(!fns || fns.length === <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>,fn; fn = fns[i++];) &#123;</span><br><span class="line">            fn.apply(<span class="keyword">this</span>,<span class="built_in">arguments</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//我们再定义一个initEvent函数，这个函数使所有的普通对象都具有发布订阅功能，如下代码：</span></span><br><span class="line"><span class="keyword">var</span> initEvent = <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i <span class="keyword">in</span> event) &#123;</span><br><span class="line">        obj[i] = event[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 我们再来测试下，我们还是给shoeObj这个对象添加发布-订阅功能；</span></span><br><span class="line"><span class="keyword">var</span> shoeObj = &#123;&#125;;</span><br><span class="line">initEvent(shoeObj);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 小红订阅如下消息</span></span><br><span class="line">shoeObj.listen(<span class="string">'red'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">size</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"尺码是："</span>+<span class="built_in">size</span>);  </span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 小花订阅如下消息</span></span><br><span class="line">shoeObj.listen(<span class="string">'block'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">size</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"再次打印尺码是："</span>+<span class="built_in">size</span>); </span><br><span class="line">&#125;);</span><br><span class="line">shoeObj.trigger(<span class="string">"red"</span>,<span class="number">40</span>);</span><br><span class="line">shoeObj.trigger(<span class="string">"block"</span>,<span class="number">42</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//取消订阅事件</span></span><br><span class="line">event.remove = <span class="function"><span class="keyword">function</span>(<span class="params">key,fn</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> fns = <span class="keyword">this</span>.list[key];</span><br><span class="line">    <span class="comment">// 如果key对应的消息没有订阅过的话，则返回</span></span><br><span class="line">    <span class="keyword">if</span>(!fns) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果没有传入具体的回调函数，表示需要取消key对应消息的所有订阅</span></span><br><span class="line">    <span class="keyword">if</span>(!fn) &#123;</span><br><span class="line">        fn &amp;&amp; (fns.length = <span class="number">0</span>);</span><br><span class="line">    &#125;<span class="title">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i = fns.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="keyword">var</span> _fn = fns[i];</span><br><span class="line">            <span class="keyword">if</span>(_fn === fn) &#123;</span><br><span class="line">                fns.splice(i,<span class="number">1</span>); <span class="comment">// 删除订阅者的回调函数</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p><strong>发布订阅代码封装完整版</strong><br><figure class="highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Event = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> <span class="built_in">list</span> = &#123;&#125;, <span class="comment">// 缓存列表</span></span><br><span class="line">  listen, <span class="comment">// 监听函数</span></span><br><span class="line">  trigger, <span class="comment">// 触发监听</span></span><br><span class="line">  remove; <span class="comment">// 移除监听函数</span></span><br><span class="line">  listen = <span class="function"><span class="keyword">function</span>(<span class="params">key,fn</span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!<span class="built_in">list</span>[key]) &#123;</span><br><span class="line"><span class="built_in">list</span>[key] = [];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">list</span>[key].push(fn);</span><br><span class="line">&#125;;</span><br><span class="line">trigger = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> key = <span class="built_in">Array</span>.prototype.shift.call(<span class="built_in">arguments</span>),</span><br><span class="line"> fns = <span class="built_in">list</span>[key];</span><br><span class="line"><span class="keyword">if</span>(!fns || fns.length === <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>, fn; fn = fns[i++];) &#123;</span><br><span class="line">fn.apply(<span class="keyword">this</span>,<span class="built_in">arguments</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">remove = <span class="function"><span class="keyword">function</span>(<span class="params">key,fn</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> fns = <span class="built_in">list</span>[key];</span><br><span class="line"><span class="keyword">if</span>(!fns) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!fn) &#123;</span><br><span class="line">fns &amp;&amp; (fns.length = <span class="number">0</span>);</span><br><span class="line">&#125;<span class="title">else</span> &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = fns.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)&#123;</span><br><span class="line"><span class="keyword">var</span> _fn = fns[i];</span><br><span class="line"><span class="keyword">if</span>(_fn === fn) &#123;</span><br><span class="line">fns.splice(i,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line"><span class="attribute">listen</span>: listen,</span><br><span class="line"><span class="attribute">trigger</span>: trigger,</span><br><span class="line"><span class="attribute">remove</span>: remove</span><br><span class="line">&#125;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;发布-订阅模式（观察者模式）&quot;&gt;&lt;a href=&quot;#发布-订阅模式（观察者模式）&quot; class=&quot;headerlink&quot; title=&quot;发布-订阅模式（观察者模式）&quot;&gt;&lt;/a&gt;发布-订阅模式（观察者模式）&lt;/h2&gt;&lt;p&gt;定义：对象间的一种一对多的关系，让多个观察者对象同时监听某一个主题对象，当一个对象发生改变时，所有依赖于它的对象都将得到通知。&lt;/p&gt;
&lt;h2 id=&quot;现实生活中的发布-订阅模式&quot;&gt;&lt;a href=&quot;#现实生活中的发布-订阅模式&quot; class=&quot;headerlink&quot; title=&quot;现实生活中的发布-订阅模式&quot;&gt;&lt;/a&gt;现实生活中的发布-订阅模式&lt;/h2&gt;&lt;p&gt;比如小红最近在淘宝网上看上一双鞋子，但是呢 联系到卖家后，才发现这双鞋卖光了，但是小红对这双鞋又非常喜欢，所以呢联系卖家，问卖家什么时候有货，卖家告诉她，要等一个星期后才有货，卖家告诉小红，要是你喜欢的话，你可以收藏我们的店铺，等有货的时候再通知你，所以小红收藏了此店铺，但与此同时，小明，小花等也喜欢这双鞋，也收藏了该店铺；等来货的时候就依次会通知他们。在上面的故事中，可以看出是一个典型的发布订阅模式，卖家是属于发布者，小红，小明等属于订阅者，订阅该店铺，卖家作为发布者，当鞋子到了的时候，会依次通知小明，小红等，依次使用旺旺等工具给他们发布消息。&lt;br&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="https://chongdee.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://chongdee.github.io/tags/JavaScript/"/>
    
      <category term="JS设计模式" scheme="https://chongdee.github.io/tags/JS%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>js设计模式-策略模式</title>
    <link href="https://chongdee.github.io/2018/10/31/js%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/"/>
    <id>https://chongdee.github.io/2018/10/31/js设计模式-策略模式/</id>
    <published>2018-10-31T13:20:03.000Z</published>
    <updated>2018-11-01T05:00:17.592Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h2><p>定义：定义一系列的算法，把它们一个个封装起来，并且使它们可以相互替换。<br>举例：计算年终奖（工资、效绩）,表单效验（是否为空、长度、手机号、邮箱等等）</p><p>比如公司的年终奖是根据员工的工资和绩效来考核的，绩效为A的人，年终奖为工资的4倍，<br>绩效为B的人，年终奖为工资的3倍，绩效为C的人，年终奖为工资的2倍；</p><a id="more"></a><h2 id="计算年终奖"><a href="#计算年终奖" class="headerlink" title="计算年终奖"></a>计算年终奖</h2><p>普通模式：<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> awardS = <span class="function"><span class="keyword">function</span> <span class="params">(salary)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> salary * <span class="number">4</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> awardA = <span class="function"><span class="keyword">function</span> <span class="params">(salary)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> salary * <span class="number">3</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> awardB = <span class="function"><span class="keyword">function</span> <span class="params">(salary)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> salary * <span class="number">2</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> calculateBonus = <span class="function"><span class="keyword">function</span> <span class="params">(level, salary)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (level === <span class="string">'S'</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> awardS(salary);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (level === <span class="string">'A'</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> awardA(salary);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (level === <span class="string">'B'</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> awardB(salary);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">calculateBonus(<span class="string">'A'</span>, <span class="number">10000</span>);</span><br></pre></td></tr></table></figure></p><p>策略模式：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 一组策略类封装具体的算法</span></span><br><span class="line"><span class="keyword">const</span> Bouns = &#123;</span><br><span class="line">A (salary)&#123;</span><br><span class="line"><span class="keyword">return</span> salary * <span class="number">4</span>;</span><br><span class="line">&#125;,</span><br><span class="line">B (salary)&#123;</span><br><span class="line"><span class="keyword">return</span> salary * <span class="number">3</span>;</span><br><span class="line">&#125;,</span><br><span class="line">C (salary)&#123;</span><br><span class="line"><span class="keyword">return</span> salary * <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">Object.freeze(Bouns);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 计算年终奖 环境类Context</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> &#123;String&#125; A 效绩等级</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> &#123;Number&#125; 10000 每月工资</span></span><br><span class="line"><span class="comment">* <span class="doctag">@returns</span> &#123;Number&#125; 40000 年终奖</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">const</span> calculateBouns = <span class="function"><span class="keyword">function</span> <span class="params">(type, salary)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> Bouns[type](salary);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 测试年终奖计算方式</span></span><br><span class="line"><span class="keyword">const</span> demo1 = calculateBouns(<span class="string">'A'</span>, <span class="number">10000</span>);</span><br><span class="line"><span class="keyword">const</span> demo2 = calculateBouns(<span class="string">'B'</span>, <span class="number">80000</span>);</span><br><span class="line">console.log(demo1, demo2); <span class="comment">// 40000, 240000</span></span><br></pre></td></tr></table></figure><blockquote><p>策略模式指的是定义一系列的算法，把它们一个个封装起来，将不变的部分和变化的部分隔开，<br>实际就是将算法的使用和实现分离出来；算法的使用方式是不变的，都是根据某个算法取得计算后的奖金数，<br>而算法的实现是根据绩效对应不同的绩效规则；<br>一个基于策略模式的程序至少由2部分组成，第一个部分是一组策略类，策略类封装了具体的算法，<br>并负责具体的计算过程。第二个部分是环境类Context，该Context接收客户端的请求，<br>随后把请求委托给某一个策略类。<br>复合开放-封闭原则，可变的部分为策略类（一组算法），不变的部分为执行具体算法的方式。</p></blockquote><h2 id="表单验证"><a href="#表单验证" class="headerlink" title="表单验证"></a>表单验证</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这里我们实现一组策略类封装具体的验证规则</span></span><br><span class="line"><span class="keyword">const</span> strategy = &#123;</span><br><span class="line"><span class="comment">// 是否为空</span></span><br><span class="line">isNotEmpty (value, errorMsg)&#123;</span><br><span class="line"><span class="keyword">if</span> (value === <span class="string">''</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> errorMsg;</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">// 最小长度</span></span><br><span class="line">minLength (value, errorMsg, length)&#123;</span><br><span class="line"><span class="keyword">if</span> (value.length &lt; length) &#123;</span><br><span class="line"><span class="keyword">return</span> errorMsg;</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">// 手机号码格式</span></span><br><span class="line">mobileFormat (value,errorMsg)&#123;</span><br><span class="line"><span class="keyword">if</span>(!<span class="regexp">/(^1[3|5|8][0-9]&#123;9&#125;$)/</span>.test(value)) &#123;</span><br><span class="line"><span class="keyword">return</span> errorMsg;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">Object</span>.freeze(strategy);</span><br><span class="line"><span class="keyword">var</span> Validator = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">this</span>.cache = [];  <span class="comment">// 保存效验规则</span></span><br><span class="line">&#125;;</span><br><span class="line">Validator.prototype.add = <span class="function"><span class="keyword">function</span>(<span class="params">dom,rules</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> self = <span class="keyword">this</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>, rule; rule = rules[i++]; )&#123;</span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">rule</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> strategyAry = rule.strategy.split(<span class="string">":"</span>);</span><br><span class="line"><span class="keyword">var</span> errorMsg = rule.errorMsg;</span><br><span class="line">self.cache.push(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> strategy = strategyAry.shift();</span><br><span class="line">strategyAry.unshift(dom.value);</span><br><span class="line">strategyAry.push(errorMsg);</span><br><span class="line"><span class="keyword">return</span> strategys[strategy].apply(dom,strategyAry);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;)(rule);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">Validator.prototype.start = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>, validatorFunc; validatorFunc = <span class="keyword">this</span>.cache[i++]; ) &#123;</span><br><span class="line"><span class="keyword">var</span> msg = validatorFunc(); <span class="comment">// 开始效验 并取得效验后的返回信息</span></span><br><span class="line"><span class="keyword">if</span>(msg) &#123;</span><br><span class="line"><span class="keyword">return</span> msg;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 代码调用</span></span><br><span class="line"><span class="keyword">var</span> registerForm = <span class="built_in">document</span>.getElementById(<span class="string">"registerForm"</span>);</span><br><span class="line"><span class="keyword">var</span> validateFunc = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> validator = <span class="keyword">new</span> Validator(); <span class="comment">// 创建一个Validator对象</span></span><br><span class="line"><span class="comment">/* 添加一些效验规则 */</span></span><br><span class="line">validator.add(registerForm.userName,[</span><br><span class="line">&#123;<span class="attr">strategy</span>: <span class="string">'isNotEmpty'</span>,<span class="attr">errorMsg</span>:<span class="string">'用户名不能为空'</span>&#125;,</span><br><span class="line">&#123;<span class="attr">strategy</span>: <span class="string">'minLength:6'</span>,<span class="attr">errorMsg</span>:<span class="string">'用户名长度不能小于6位'</span>&#125;</span><br><span class="line">]);</span><br><span class="line">validator.add(registerForm.password,[</span><br><span class="line">&#123;<span class="attr">strategy</span>: <span class="string">'minLength:6'</span>,<span class="attr">errorMsg</span>:<span class="string">'密码长度不能小于6位'</span>&#125;,</span><br><span class="line">]);</span><br><span class="line">validator.add(registerForm.phoneNumber,[</span><br><span class="line">&#123;<span class="attr">strategy</span>: <span class="string">'mobileFormat'</span>,<span class="attr">errorMsg</span>:<span class="string">'手机号格式不正确'</span>&#125;,</span><br><span class="line">]);</span><br><span class="line"><span class="keyword">var</span> errorMsg = validator.start(); <span class="comment">// 获得效验结果</span></span><br><span class="line"><span class="keyword">return</span> errorMsg; <span class="comment">// 返回效验结果</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 点击确定提交</span></span><br><span class="line">registerForm.onsubmit = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> errorMsg = validateFunc();</span><br><span class="line"><span class="keyword">if</span>(errorMsg)&#123;</span><br><span class="line">alert(errorMsg);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;策略模式&quot;&gt;&lt;a href=&quot;#策略模式&quot; class=&quot;headerlink&quot; title=&quot;策略模式&quot;&gt;&lt;/a&gt;策略模式&lt;/h2&gt;&lt;p&gt;定义：定义一系列的算法，把它们一个个封装起来，并且使它们可以相互替换。&lt;br&gt;举例：计算年终奖（工资、效绩）,表单效验（是否为空、长度、手机号、邮箱等等）&lt;/p&gt;
&lt;p&gt;比如公司的年终奖是根据员工的工资和绩效来考核的，绩效为A的人，年终奖为工资的4倍，&lt;br&gt;绩效为B的人，年终奖为工资的3倍，绩效为C的人，年终奖为工资的2倍；&lt;/p&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="https://chongdee.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://chongdee.github.io/tags/JavaScript/"/>
    
      <category term="JS设计模式" scheme="https://chongdee.github.io/tags/JS%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
</feed>
